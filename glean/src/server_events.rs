// {# The final Rust code is autogenerated, but this template is not. Please file bugs if there is a problem! #}
// package glean

// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// AUTOGENERATED BY glean_parser v{{ parser_version }}. DO NOT EDIT.

// Required imports
use chrono::Utc;
use serde::{Deserialize, Serialize};
use serde_json;
use std::collections::HashMap;
use uuid::Uuid;

/// Log type string used to identify logs to process in the Moz Data Pipeline
const GLEAN_EVENT_MOZLOG_TYPE: &str = "glean-server-event";

// Code below is static, regardless of what is defined in `metrics.yaml``:
pub struct GleanEventsLogger {
    // Application Id to identify application per Glean standards
    pub app_id: String,
    // Version of application emitting the event
    pub app_display_version: String,
    // Channel to differentiate logs from prod/beta/staging/devel
    pub app_channel: String,
}

/// Exported type for public method parameters.
/// Default impl empty values will be omitted in json from ping struct definition.
#[derive(Default, Serialize, Deserialize)]
pub struct RequestInfo {
    pub user_agent: String,
    pub ip_address: String,
}

/// Struct of internal application data related to pings.
///
/// Provides a limited set of details regarding the platform.
/// Much if not all of this data is not used in server context.
/// Most values default to "Unknown" in this context.
#[derive(Serialize, Deserialize, Debug)]
struct ClientInfo {
    // The version of the Glean SDK.
    telemetry_sdk_build: String,
    // The date of the first run of the application.
    fist_run_date: String,
    // The name of the operating system (e.g. "Linux", "Android", "iOS").
    os: String,
    // The user-visible version of the operating system (e.g. "1.2.3").
    os_version: String,
    // The architecture of the device (e.g. "arm", "x86").
    architecture: String,
    // CI build ID.
    app_build: String,
    // App-specific, user-visible version string.
    app_display_version: String,
    // Product-provided release channel (e.g. "beta").
    app_channel: String,
}
/// Metadata about the ping itself.
#[derive(Serialize, Deserialize, Debug)]
struct PingInfo {
    /// A sequential counter of the number of times a type has been sent.
    seq: u32,
    /// Time of the start of collection of the data.
    start_time: String,
    /// Time of the end of collection of the data.
    end_time: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct Ping {
    document_namespace: String,
    document_type: String,
    document_version: String,
    document_id: String,
    user_agent: Option<String>,
    ip_address: Option<String>,
    payload: String,
}
/// Metrics HashMap that contains a string key pointing to HashMaps
/// of serialized serde_json::Value.
type Metrics = HashMap<String, HashMap<String, serde_json::Value>>;

#[derive(Debug, Serialize, Deserialize)]
struct GleanEvent {
    category: String,
    name: String,
    timestamp: i64,
    extra: HashMap<String, String>,
}

fn new_glean_event(
    category: &str,
    name: &str,
    extra: std::collections::HashMap<String, String>,
) -> GleanEvent {
    GleanEvent {
        category: category.to_string(),
        name: name.to_string(),
        timestamp: Utc::now().timestamp_millis(),
        extra,
    }
}
#[derive(Serialize, Deserialize, Debug)]
struct PingPayload {
    client_info: ClientInfo,
    ping_info: PingInfo,
    metrics: Metrics,
    events: Vec<GleanEvent>,
}

#[derive(Serialize, Deserialize)]
struct LogEnvelope {
    timestamp: String,
    logger: String,
    #[serde(rename = "type")]
    log_type: String,
    fields: Ping,
}
