# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS
#
version: 2.1
commands:
  setup-rust:
    steps:
      - run:
          name: Setup Rust
          command: |
            rustup install stable
            rustup default stable
            rustup update
            rustc --version
  setup-rust-check:
    steps:
      - run:
          name: Setup Rust checks
          command: |
            rustup component add rustfmt
            cargo install cargo-audit
            rustup component add clippy
  rust-check:
    steps:
      - run:
          name: Core Rust Checks
          command: |
            cargo audit
            cargo fmt -- --check
  rust-clippy:
    steps:
      - run:
          name: Rust Clippy
          command: |
            cargo clippy --all --all-targets --all-features -- -D warnings
  cargo-build:
    steps:
      - run:
          name: cargo build
          command: cargo build
  setup-gcp-grpc:
    steps:
      - run:
          name: Install grpcio dependencies
          command: sudo apt-get update && sudo apt-get install -y cmake golang-go

  write-version:
    steps:
      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

  run-tests:
    steps:
      - run:
          name: cargo test
          command: cargo test --all --verbose

  run-e2e-tests:
    steps:
      - run:
          name: e2e tests
          command: >
               /usr/local/bin/docker-compose
               -f docker-compose.yaml
               -f docker-compose.e2e.yaml
               up
               --exit-code-from server-syncstorage
               --abort-on-container-exit
          environment:
              SYNCSTORAGE_RS_IMAGE: app:build

  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          key: sccache-cache-stable-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
jobs:
  checks:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - setup-rust
      - setup-rust-check
      - setup-gcp-grpc
      - rust-check
      - rust-clippy

  build-and-test:
    docker:
      - image: circleci/rust:latest
        environment:
            SYNC_DATABASE_URL: mysql://test:test@127.0.0.1/syncstorage
            RUST_BACKTRACE: 1
            # XXX: begin_test_transaction doesn't play nice over threaded tests
            RUST_TEST_THREADS: 1
      - image: circleci/mysql:5.7-ram
        environment:
            MYSQL_ROOT_PASSWORD: random
            MYSQL_USER: test
            MYSQL_PASSWORD: test
            MYSQL_DATABASE: syncstorage
    steps:
      - checkout
      - setup-rust
      - setup-gcp-grpc
      # XXX: currently the time needed to setup-sccache negates its savings
      #- setup-sccache
      #- restore-sccache-cache
      - write-version
      - cargo-build
      - run-tests
      #- save-sccache-cache
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t app:build .
      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: |
            mkdir -p /home/circleci/cache
            docker save -o /home/circleci/cache/docker.tar "app:build"
      - run:
          name: Save docker-compose config
          command: cp docker-compose*.yaml /home/circleci/cache
      - save_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}-{{ epoch }}
          paths:
            - /home/circleci/cache

  e2e-tests:
    docker:
      - image: docker/compose:1.24.0
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: Restore Docker image cache
          command: docker load -i /home/circleci/cache/docker.tar
      - run:
          name: Restore docker-compose config
          command: cp /home/circleci/cache/docker-compose*.yaml .
      - run-e2e-tests

  deploy:
    docker:
      - image: docker:18.02.0-ce
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: Restore Docker image cache
          command: docker load -i /home/circleci/cache/docker.tar

      - run:
          name: Deploy to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              DOCKER_TAG="${CIRCLE_SHA1}"
            fi

            if echo "${CIRCLE_BRANCH}" | grep '^feature\..*' > /dev/null; then
              DOCKER_TAG="${CIRCLE_BRANCH}"
            fi

            if [ -n "${CIRCLE_TAG}" ]; then
              DOCKER_TAG="$CIRCLE_TAG"
            fi

            if [ -n "${DOCKER_TAG}" ]; then
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
              echo ${DOCKERHUB_REPO}:${DOCKER_TAG}
              docker tag app:build ${DOCKERHUB_REPO}:${DOCKER_TAG}
              docker images
              docker push "${DOCKERHUB_REPO}:${DOCKER_TAG}"
            else
              echo "Not pushing to dockerhub for tag=${CIRCLE_TAG} branch=${CIRCLE_BRANCH}"
            fi

workflows:
  version: 2
  build-deploy:
    jobs:
      - checks:
          filters:
            tags:
              only: /.*/
      - build-and-test:
          filters:
            tags:
              only: /.*/
      - e2e-tests:
          requires:
            - build-and-test
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - e2e-tests
          filters:
            tags:
              only: /.*/
