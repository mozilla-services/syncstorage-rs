# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS
#
version: 2.1

orbs:
  gcp-gcr: circleci/gcp-gcr@0.16.3

commands:
  display-versions:
    steps:
      - run:
          name: Display Version Info
          command: |
            if [ "$(which rustc)" != "" ]; then rustc --version; fi
            if [ "$(which python)" != "" ]; then python --version; fi
            uname -a
            cat /etc/os-release
  setup-rust-check:
    steps:
      - run:
          name: Setup Rust checks
          command: |
            rustup component add rustfmt
            cargo install --locked cargo-audit
            rustup component add clippy
  setup-python:
    steps:
      - run:
          name: Setup python
          command: |
            sudo apt-get update && sudo apt-get install -y python3-dev python3-pip
            pip3 install flake8 hawkauthlib konfig pyramid pyramid_hawkauth requests simplejson unittest2 WebTest WSGIProxy2
            # NOTE: Python3.12 requires `--break-system-packages`.
            # This command is run on the cimg/rust image, which is running python 3.10
            pip3 install -r requirements.txt
  rust-check:
    steps:
      - run:
          name: Core Rust Checks
          command: |
            cargo fmt -- --check
            cargo audit
  python-check:
    steps:
      - run:
          name: Core Python Checks
          command: |
            flake8 syncserver/src/tokenserver
            flake8 tools/integration_tests
            flake8 tools/tokenserver
  rust-clippy-mysql:
    steps:
      - run:
          name: Rust Clippy MySQL
          command: |
            cargo clippy --workspace --all-targets --no-default-features --features=syncstorage-db/mysql --features=py_verifier -- -D warnings
  rust-clippy-spanner:
    steps:
      - run:
          name: Rust Clippy Spanner
          command: |
            cargo clippy --workspace --all-targets --no-default-features --features=syncstorage-db/spanner --features=py_verifier -- -D warnings
  setup-mysql:
    steps:
      - run:
          name: Install MySQL client
          command: sudo apt-get update && sudo apt-get install -y default-mysql-client
  create-tokenserver-database:
    steps:
      - run:
          name: Create Tokenserver database
          command: |
            mysql -u root -ppassword -h 127.0.0.1 -e 'CREATE DATABASE tokenserver;'
            mysql -u root -ppassword -h 127.0.0.1 -e "GRANT ALL ON tokenserver.* to 'test'@'%';"

  write-version:
    steps:
      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > syncserver/version.json

  install-test-deps:
    steps:
      - run: 
          name: Install test dependencies
          command: cargo install cargo-nextest cargo-llvm-cov

  make-test-dir:
    steps:
      - run:
          name: Create test-results directory
          command: mkdir -p workflow/test-results

  run-unit-tests:
    steps:
      - run:
          name: nextest with code coverage
          command: make test_with_coverage
      - run:
          name: nextest with code coverage (quota enforced)
          command: make test_with_coverage
          environment:
              SYNC_SYNCSTORAGE__ENFORCE_QUOTA: 1

  merge-unit-test-coverage:
    steps:
      - run:
          when: always
          name: Merge llvm-cov results
          command: make merge_coverage_results

  store-unit-test-results:
    steps:
      - store_test_results:
          path: workflow/test-results
      - store_artifacts:
          path: workflow/test-results

  run-e2e-mysql-tests:
    steps:
      - run:
          name: e2e tests (syncstorage mysql)
          command: >
               /usr/local/bin/docker-compose
               -f docker-compose.mysql.yaml
               -f docker-compose.e2e.mysql.yaml
               up
               --exit-code-from mysql-e2e-tests
               --abort-on-container-exit
          environment:
              SYNCSTORAGE_RS_IMAGE: app:build

  run-tokenserver-scripts-tests:
    steps:
      - run:
          name: Tokenserver scripts tests
          command: |
              # NOTE: Python3.12 requires `--break-system-packages`.
              # This command is run on the circleci/rust image, which is running python 3.10
               pip3 install -r tools/tokenserver/requirements.txt
               python3 tools/tokenserver/run_tests.py
          environment:
              SYNCSTORAGE_RS_IMAGE: app:build

  run-e2e-spanner-tests:
    steps:
      - run:
          name: e2e tests (syncstorage spanner)
          command: >
               /usr/local/bin/docker-compose
               -f docker-compose.spanner.yaml
               -f docker-compose.e2e.spanner.yaml
               up
               --exit-code-from spanner-e2e-tests
               --abort-on-container-exit
          environment:
              SYNCSTORAGE_RS_IMAGE: app:build

  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            cargo install --locked sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          key: sccache-cache-stable-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
jobs:
  checks:
    docker:
      - image: cimg/rust:1.81.0  # RUST_VER
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    resource_class: large
    steps:
      - checkout
      - display-versions
      - setup-rust-check
      - rust-check
      - rust-clippy-spanner
      - rust-clippy-mysql
      - setup-python
      - python-check

  build-and-test:
    docker:
      - image: cimg/rust:1.81.0  # RUST_VER
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
            SYNC_SYNCSTORAGE__DATABASE_URL: mysql://test:test@127.0.0.1/syncstorage
            SYNC_TOKENSERVER__DATABASE_URL: mysql://test:test@127.0.0.1/tokenserver
            RUST_BACKTRACE: 1
            # XXX: begin_test_transaction doesn't play nice over threaded tests
            RUST_TEST_THREADS: 1
      - image: cimg/mysql:5.7
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
            MYSQL_ROOT_PASSWORD: password
            MYSQL_USER: test
            MYSQL_PASSWORD: test
            MYSQL_DATABASE: syncstorage
    resource_class: large
    steps:
      - checkout
      - display-versions
      - setup-python
      - setup-mysql
      - create-tokenserver-database
      # XXX: currently the time needed to setup-sccache negates its savings
      #- setup-sccache
      #- restore-sccache-cache
      - write-version
      - install-test-deps
      - make-test-dir
      - run-unit-tests
      - merge-unit-test-coverage
      - store-unit-test-results
      # if the above tests don't run tokenserver-db tests (i.e. using --workspace)
      # then run-tokenserver-scripts-tests will fail. These tests expect the db to be
      # configured already, and it appears unit-tests modify the db to the expected state
      - run-tokenserver-scripts-tests
      #- save-sccache-cache
  build-mysql-image:
    docker:
      - image: cimg/rust:1.81.0  # RUST_VER
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    resource_class: large
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - display-versions
      - write-version
      - run:
          name: Build MySQL Docker image
          command: docker build -t app:build --build-arg DATABASE_BACKEND=mysql .
          no_output_timeout: 30m
      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: |
            mkdir -p /home/circleci/cache
            docker save -o /home/circleci/cache/docker.tar "app:build"
      - run:
          name: Save docker-compose config
          command: cp docker-compose*mysql.yaml /home/circleci/cache
      - save_cache:
          key: mysql-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}-{{ epoch }}
          paths:
            - /home/circleci/cache

  build-spanner-image:
    docker:
      - image: cimg/rust:1.81.0  # RUST_VER
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    resource_class: large
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - display-versions
      - write-version
      - run:
          name: Build Spanner Docker image
          command: docker build -t app:build --build-arg DATABASE_BACKEND=spanner .
          no_output_timeout: 30m
      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: |
            mkdir -p /home/circleci/cache
            docker save -o /home/circleci/cache/docker.tar "app:build"
      - run:
          name: Save docker-compose config
          command: cp docker-compose*spanner.yaml /home/circleci/cache
      - save_cache:
          key: spanner-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}-{{ epoch }}
          paths:
            - /home/circleci/cache

  # Auth to GCR, tag and push image
  deploy-to-gar:
    executor: gcp-gcr/default
    parameters:
      image:
        type: string
        default: us-docker.pkg.dev/my-gcp-project-id/my-gar-repo/my-image
      tag:
        type: string
        default: latest
    steps:
      # Auth to GCR
      # https://circleci.com/developer/orbs/orb/circleci/gcp-gcr#commands-gcr-auth
      - gcp-gcr/gcr-auth:
          registry-url: us-docker.pkg.dev
          use_oidc: true
      - restore_cache:
          key: spanner-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Restore Docker image cache
          command: docker load -i /home/circleci/cache/docker.tar
      # Tag image
      # https://circleci.com/developer/orbs/orb/circleci/gcp-gcr#commands-tag-image
      - gcp-gcr/tag-image:
          image: <<parameters.image>>
          source-tag: build
          target-tag: <<parameters.tag>>
      # Push image
      # https://circleci.com/developer/orbs/orb/circleci/gcp-gcr#commands-push-image
      - gcp-gcr/push-image:
          image: <<parameters.image>>
          registry-url: us-docker.pkg.dev
          tag: <<parameters.tag>>

  mysql-e2e-tests:
    docker:
      - image: docker/compose:1.24.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - setup_remote_docker
      - display-versions
      - restore_cache:
          key: mysql-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Restore Docker image cache
          command: docker load -i /home/circleci/cache/docker.tar
      - run:
          name: Restore docker-compose config
          command: cp /home/circleci/cache/docker-compose*.yaml .
      - run-e2e-mysql-tests

  spanner-e2e-tests:
    docker:
      - image: docker/compose:1.24.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - setup_remote_docker
      - display-versions
      - restore_cache:
          key: spanner-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Restore Docker image cache
          command: docker load -i /home/circleci/cache/docker.tar
      - run:
          name: Restore docker-compose config
          command: cp /home/circleci/cache/docker-compose*.yaml .
      - run-e2e-spanner-tests

  deploy:
    docker:
      - image: docker:18.02.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - setup_remote_docker
      - display-versions
      - restore_cache:
          key: spanner-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Restore Docker image cache
          command: docker load -i /home/circleci/cache/docker.tar
      - run:
          name: Deploy to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              DOCKER_TAG="${CIRCLE_SHA1}"
            fi

            if echo "${CIRCLE_BRANCH}" | grep '^feature\..*' > /dev/null; then
              DOCKER_TAG="${CIRCLE_BRANCH}"
            fi

            if [ -n "${CIRCLE_TAG}" ]; then
              DOCKER_TAG="$CIRCLE_TAG"
            fi

            if [ -n "${DOCKER_TAG}" ]; then
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
              echo ${DOCKERHUB_REPO}:${DOCKER_TAG}
              docker tag app:build ${DOCKERHUB_REPO}:${DOCKER_TAG}
              docker images
              docker push "${DOCKERHUB_REPO}:${DOCKER_TAG}"
            else
              echo "Not pushing to dockerhub for tag=${CIRCLE_TAG} branch=${CIRCLE_BRANCH}"
            fi

  deploy-python-utils:
    docker:
      - image: docker:stable-git
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - setup_remote_docker
      - checkout
      - display-versions
      - write-version
      - run:
          name: Build and deploy to Dockerhub
          command: |
            export UTILS_DOCKERHUB_REPO=mozilla/sync-spanner-py-utils
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              DOCKER_TAG="latest"
            fi

            if echo "${CIRCLE_BRANCH}" | grep '^feature\..*' > /dev/null; then
              DOCKER_TAG="${CIRCLE_BRANCH}"
            fi

            if [ -n "${CIRCLE_TAG}" ]; then
              DOCKER_TAG="$CIRCLE_TAG"
            fi

            if [ -n "${DOCKER_TAG}" ]; then
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
              echo ${UTILS_DOCKERHUB_REPO}:${DOCKER_TAG}
              cd tools/spanner
              docker build -t ${UTILS_DOCKERHUB_REPO}:${DOCKER_TAG} .
              docker images
              docker push "${UTILS_DOCKERHUB_REPO}:${DOCKER_TAG}"
            else
              echo "Not building or pushing to dockerhub for tag=${CIRCLE_TAG} branch=${CIRCLE_BRANCH}"
            fi

workflows:
  version: 2
  build-deploy:
    jobs:
      - checks:
          filters:
            tags:
              only: /.*/
      - build-and-test:
          filters:
            tags:
              only: /.*/
      - build-mysql-image:
          requires:
            - build-and-test
          filters:
            tags:
              only: /.*/
      - build-spanner-image:
          requires:
            - build-and-test
          filters:
            tags:
              only: /.*/
      - mysql-e2e-tests:
          requires:
            - build-mysql-image
          filters:
            tags:
              only: /.*/
      - spanner-e2e-tests:
          requires:
            - build-spanner-image
          filters:
            tags:
              only: /.*/
      - build-for-gar:
          requires:
            - build-and-test
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - mysql-e2e-tests
            - spanner-e2e-tests
          filters:
            tags:
              only: /.*/
            branches:
              only: master
              # touch: 1676417203
      - deploy-to-gar:
          requires:
            - mysql-e2e-tests
            - spanner-e2e-tests
            - build-for-gar
          filters:
            tags:
              only: /.*/
            branches:
              only: master
      - deploy-python-utils:
          requires:
            - mysql-e2e-tests
            - spanner-e2e-tests
          filters:
            tags:
              only: /.*/
