// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/spanner/v1/mutation.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct Mutation {
    // message oneof groups
    pub operation: ::std::option::Option<Mutation_oneof_operation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Mutation {
    fn default() -> &'a Mutation {
        <Mutation as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Mutation_oneof_operation {
    insert(Mutation_Write),
    update(Mutation_Write),
    insert_or_update(Mutation_Write),
    replace(Mutation_Write),
    delete(Mutation_Delete),
}

impl Mutation {
    pub fn new() -> Mutation {
        ::std::default::Default::default()
    }

    // .google.spanner.v1.Mutation.Write insert = 1;


    pub fn get_insert(&self) -> &Mutation_Write {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::insert(ref v)) => v,
            _ => <Mutation_Write as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_insert(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_insert(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::insert(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insert(&mut self, v: Mutation_Write) {
        self.operation = ::std::option::Option::Some(Mutation_oneof_operation::insert(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insert(&mut self) -> &mut Mutation_Write {
        if let ::std::option::Option::Some(Mutation_oneof_operation::insert(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Mutation_oneof_operation::insert(Mutation_Write::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::insert(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insert(&mut self) -> Mutation_Write {
        if self.has_insert() {
            match self.operation.take() {
                ::std::option::Option::Some(Mutation_oneof_operation::insert(v)) => v,
                _ => panic!(),
            }
        } else {
            Mutation_Write::new()
        }
    }

    // .google.spanner.v1.Mutation.Write update = 2;


    pub fn get_update(&self) -> &Mutation_Write {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::update(ref v)) => v,
            _ => <Mutation_Write as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_update(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_update(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: Mutation_Write) {
        self.operation = ::std::option::Option::Some(Mutation_oneof_operation::update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_update(&mut self) -> &mut Mutation_Write {
        if let ::std::option::Option::Some(Mutation_oneof_operation::update(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Mutation_oneof_operation::update(Mutation_Write::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_update(&mut self) -> Mutation_Write {
        if self.has_update() {
            match self.operation.take() {
                ::std::option::Option::Some(Mutation_oneof_operation::update(v)) => v,
                _ => panic!(),
            }
        } else {
            Mutation_Write::new()
        }
    }

    // .google.spanner.v1.Mutation.Write insert_or_update = 3;


    pub fn get_insert_or_update(&self) -> &Mutation_Write {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::insert_or_update(ref v)) => v,
            _ => <Mutation_Write as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_insert_or_update(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_insert_or_update(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::insert_or_update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insert_or_update(&mut self, v: Mutation_Write) {
        self.operation = ::std::option::Option::Some(Mutation_oneof_operation::insert_or_update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insert_or_update(&mut self) -> &mut Mutation_Write {
        if let ::std::option::Option::Some(Mutation_oneof_operation::insert_or_update(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Mutation_oneof_operation::insert_or_update(Mutation_Write::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::insert_or_update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insert_or_update(&mut self) -> Mutation_Write {
        if self.has_insert_or_update() {
            match self.operation.take() {
                ::std::option::Option::Some(Mutation_oneof_operation::insert_or_update(v)) => v,
                _ => panic!(),
            }
        } else {
            Mutation_Write::new()
        }
    }

    // .google.spanner.v1.Mutation.Write replace = 4;


    pub fn get_replace(&self) -> &Mutation_Write {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::replace(ref v)) => v,
            _ => <Mutation_Write as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_replace(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_replace(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::replace(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_replace(&mut self, v: Mutation_Write) {
        self.operation = ::std::option::Option::Some(Mutation_oneof_operation::replace(v))
    }

    // Mutable pointer to the field.
    pub fn mut_replace(&mut self) -> &mut Mutation_Write {
        if let ::std::option::Option::Some(Mutation_oneof_operation::replace(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Mutation_oneof_operation::replace(Mutation_Write::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::replace(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_replace(&mut self) -> Mutation_Write {
        if self.has_replace() {
            match self.operation.take() {
                ::std::option::Option::Some(Mutation_oneof_operation::replace(v)) => v,
                _ => panic!(),
            }
        } else {
            Mutation_Write::new()
        }
    }

    // .google.spanner.v1.Mutation.Delete delete = 5;


    pub fn get_delete(&self) -> &Mutation_Delete {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::delete(ref v)) => v,
            _ => <Mutation_Delete as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_delete(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: Mutation_Delete) {
        self.operation = ::std::option::Option::Some(Mutation_oneof_operation::delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut Mutation_Delete {
        if let ::std::option::Option::Some(Mutation_oneof_operation::delete(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Mutation_oneof_operation::delete(Mutation_Delete::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Mutation_oneof_operation::delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> Mutation_Delete {
        if self.has_delete() {
            match self.operation.take() {
                ::std::option::Option::Some(Mutation_oneof_operation::delete(v)) => v,
                _ => panic!(),
            }
        } else {
            Mutation_Delete::new()
        }
    }
}

impl ::protobuf::Message for Mutation {
    fn is_initialized(&self) -> bool {
        if let Some(Mutation_oneof_operation::insert(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Mutation_oneof_operation::update(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Mutation_oneof_operation::insert_or_update(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Mutation_oneof_operation::replace(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Mutation_oneof_operation::delete(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(Mutation_oneof_operation::insert(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(Mutation_oneof_operation::update(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(Mutation_oneof_operation::insert_or_update(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(Mutation_oneof_operation::replace(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(Mutation_oneof_operation::delete(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.operation {
            match v {
                &Mutation_oneof_operation::insert(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Mutation_oneof_operation::update(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Mutation_oneof_operation::insert_or_update(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Mutation_oneof_operation::replace(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Mutation_oneof_operation::delete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.operation {
            match v {
                &Mutation_oneof_operation::insert(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Mutation_oneof_operation::update(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Mutation_oneof_operation::insert_or_update(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Mutation_oneof_operation::replace(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Mutation_oneof_operation::delete(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Mutation {
        Mutation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Mutation_Write>(
                "insert",
                Mutation::has_insert,
                Mutation::get_insert,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Mutation_Write>(
                "update",
                Mutation::has_update,
                Mutation::get_update,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Mutation_Write>(
                "insert_or_update",
                Mutation::has_insert_or_update,
                Mutation::get_insert_or_update,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Mutation_Write>(
                "replace",
                Mutation::has_replace,
                Mutation::get_replace,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Mutation_Delete>(
                "delete",
                Mutation::has_delete,
                Mutation::get_delete,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Mutation>(
                "Mutation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Mutation {
        static instance: ::protobuf::rt::LazyV2<Mutation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Mutation::new)
    }
}

impl ::protobuf::Clear for Mutation {
    fn clear(&mut self) {
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.operation = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Mutation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mutation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Mutation_Write {
    // message fields
    pub table: ::std::string::String,
    pub columns: ::protobuf::RepeatedField<::std::string::String>,
    pub values: ::protobuf::RepeatedField<::protobuf::well_known_types::ListValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Mutation_Write {
    fn default() -> &'a Mutation_Write {
        <Mutation_Write as ::protobuf::Message>::default_instance()
    }
}

impl Mutation_Write {
    pub fn new() -> Mutation_Write {
        ::std::default::Default::default()
    }

    // string table = 1;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // repeated string columns = 2;


    pub fn get_columns(&self) -> &[::std::string::String] {
        &self.columns
    }
    pub fn clear_columns(&mut self) {
        self.columns.clear();
    }

    // Param is passed by value, moved
    pub fn set_columns(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.columns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_columns(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.columns
    }

    // Take field
    pub fn take_columns(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.columns, ::protobuf::RepeatedField::new())
    }

    // repeated .google.protobuf.ListValue values = 3;


    pub fn get_values(&self) -> &[::protobuf::well_known_types::ListValue] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::ListValue>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::ListValue> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::ListValue> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Mutation_Write {
    fn is_initialized(&self) -> bool {
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.columns)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table);
        }
        for value in &self.columns {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table.is_empty() {
            os.write_string(1, &self.table)?;
        }
        for v in &self.columns {
            os.write_string(2, &v)?;
        };
        for v in &self.values {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Mutation_Write {
        Mutation_Write::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "table",
                |m: &Mutation_Write| { &m.table },
                |m: &mut Mutation_Write| { &mut m.table },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "columns",
                |m: &Mutation_Write| { &m.columns },
                |m: &mut Mutation_Write| { &mut m.columns },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::ListValue>>(
                "values",
                |m: &Mutation_Write| { &m.values },
                |m: &mut Mutation_Write| { &mut m.values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Mutation_Write>(
                "Mutation.Write",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Mutation_Write {
        static instance: ::protobuf::rt::LazyV2<Mutation_Write> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Mutation_Write::new)
    }
}

impl ::protobuf::Clear for Mutation_Write {
    fn clear(&mut self) {
        self.table.clear();
        self.columns.clear();
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Mutation_Write {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mutation_Write {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Mutation_Delete {
    // message fields
    pub table: ::std::string::String,
    pub key_set: ::protobuf::SingularPtrField<super::keys::KeySet>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Mutation_Delete {
    fn default() -> &'a Mutation_Delete {
        <Mutation_Delete as ::protobuf::Message>::default_instance()
    }
}

impl Mutation_Delete {
    pub fn new() -> Mutation_Delete {
        ::std::default::Default::default()
    }

    // string table = 1;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // .google.spanner.v1.KeySet key_set = 2;


    pub fn get_key_set(&self) -> &super::keys::KeySet {
        self.key_set.as_ref().unwrap_or_else(|| <super::keys::KeySet as ::protobuf::Message>::default_instance())
    }
    pub fn clear_key_set(&mut self) {
        self.key_set.clear();
    }

    pub fn has_key_set(&self) -> bool {
        self.key_set.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_set(&mut self, v: super::keys::KeySet) {
        self.key_set = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_set(&mut self) -> &mut super::keys::KeySet {
        if self.key_set.is_none() {
            self.key_set.set_default();
        }
        self.key_set.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_set(&mut self) -> super::keys::KeySet {
        self.key_set.take().unwrap_or_else(|| super::keys::KeySet::new())
    }
}

impl ::protobuf::Message for Mutation_Delete {
    fn is_initialized(&self) -> bool {
        for v in &self.key_set {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key_set)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table);
        }
        if let Some(ref v) = self.key_set.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table.is_empty() {
            os.write_string(1, &self.table)?;
        }
        if let Some(ref v) = self.key_set.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Mutation_Delete {
        Mutation_Delete::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "table",
                |m: &Mutation_Delete| { &m.table },
                |m: &mut Mutation_Delete| { &mut m.table },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::KeySet>>(
                "key_set",
                |m: &Mutation_Delete| { &m.key_set },
                |m: &mut Mutation_Delete| { &mut m.key_set },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Mutation_Delete>(
                "Mutation.Delete",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Mutation_Delete {
        static instance: ::protobuf::rt::LazyV2<Mutation_Delete> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Mutation_Delete::new)
    }
}

impl ::protobuf::Clear for Mutation_Delete {
    fn clear(&mut self) {
        self.table.clear();
        self.key_set.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Mutation_Delete {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mutation_Delete {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20google/spanner/v1/mutation.proto\x12\x11google.spanner.v1\x1a\x1cg\
    oogle/api/annotations.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1cg\
    oogle/spanner/v1/keys.proto\"\x9e\x04\n\x08Mutation\x12;\n\x06insert\x18\
    \x01\x20\x01(\x0b2!.google.spanner.v1.Mutation.WriteH\0R\x06insert\x12;\
    \n\x06update\x18\x02\x20\x01(\x0b2!.google.spanner.v1.Mutation.WriteH\0R\
    \x06update\x12M\n\x10insert_or_update\x18\x03\x20\x01(\x0b2!.google.span\
    ner.v1.Mutation.WriteH\0R\x0einsertOrUpdate\x12=\n\x07replace\x18\x04\
    \x20\x01(\x0b2!.google.spanner.v1.Mutation.WriteH\0R\x07replace\x12<\n\
    \x06delete\x18\x05\x20\x01(\x0b2\".google.spanner.v1.Mutation.DeleteH\0R\
    \x06delete\x1ak\n\x05Write\x12\x14\n\x05table\x18\x01\x20\x01(\tR\x05tab\
    le\x12\x18\n\x07columns\x18\x02\x20\x03(\tR\x07columns\x122\n\x06values\
    \x18\x03\x20\x03(\x0b2\x1a.google.protobuf.ListValueR\x06values\x1aR\n\
    \x06Delete\x12\x14\n\x05table\x18\x01\x20\x01(\tR\x05table\x122\n\x07key\
    _set\x18\x02\x20\x01(\x0b2\x19.google.spanner.v1.KeySetR\x06keySetB\x0b\
    \n\toperationB\x96\x01\n\x15com.google.spanner.v1B\rMutationProtoP\x01Z8\
    google.golang.org/genproto/googleapis/spanner/v1;spanner\xaa\x02\x17Goog\
    le.Cloud.Spanner.V1\xca\x02\x17Google\\Cloud\\Spanner\\V1J\xbe\x1f\n\x06\
    \x12\x04\x0e\0^\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Co\
    pyright\x202018\x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apac\
    he\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20ma\
    y\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\
    \x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\
    \x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/\
    LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\
    \x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\
    \x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20B\
    ASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIN\
    D,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20\
    for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\n\
    \x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\
    \x10\0\x1a\n\t\n\x02\x03\0\x12\x03\x12\0&\n\t\n\x02\x03\x01\x12\x03\x13\
    \0&\n\t\n\x02\x03\x02\x12\x03\x14\0&\n\x08\n\x01\x08\x12\x03\x16\04\n\t\
    \n\x02\x08%\x12\x03\x16\04\n\x08\n\x01\x08\x12\x03\x17\0O\n\t\n\x02\x08\
    \x0b\x12\x03\x17\0O\n\x08\n\x01\x08\x12\x03\x18\0\"\n\t\n\x02\x08\n\x12\
    \x03\x18\0\"\n\x08\n\x01\x08\x12\x03\x19\0.\n\t\n\x02\x08\x08\x12\x03\
    \x19\0.\n\x08\n\x01\x08\x12\x03\x1a\0.\n\t\n\x02\x08\x01\x12\x03\x1a\0.\
    \n\x08\n\x01\x08\x12\x03\x1b\04\n\t\n\x02\x08)\x12\x03\x1b\04\n\xbe\x01\
    \n\x02\x04\0\x12\x04!\0^\x01\x1a\xb1\x01\x20A\x20modification\x20to\x20o\
    ne\x20or\x20more\x20Cloud\x20Spanner\x20rows.\x20\x20Mutations\x20can\
    \x20be\n\x20applied\x20to\x20a\x20Cloud\x20Spanner\x20database\x20by\x20\
    sending\x20them\x20in\x20a\n\x20[Commit][google.spanner.v1.Spanner.Commi\
    t]\x20call.\n\n\n\n\x03\x04\0\x01\x12\x03!\x08\x10\n\xf7\x01\n\x04\x04\0\
    \x03\0\x12\x04$\x028\x03\x1a\xe8\x01\x20Arguments\x20to\x20[insert][goog\
    le.spanner.v1.Mutation.insert],\x20[update][google.spanner.v1.Mutation.u\
    pdate],\x20[insert_or_update][google.spanner.v1.Mutation.insert_or_updat\
    e],\x20and\n\x20[replace][google.spanner.v1.Mutation.replace]\x20operati\
    ons.\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03$\n\x0f\n@\n\x06\x04\0\x03\0\
    \x02\0\x12\x03&\x04\x15\x1a1\x20Required.\x20The\x20table\x20whose\x20ro\
    ws\x20will\x20be\x20written.\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\
    &\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03&\x0b\x10\n\x0e\n\x07\
    \x04\0\x03\0\x02\0\x03\x12\x03&\x13\x14\n\x82\x02\n\x06\x04\0\x03\0\x02\
    \x01\x12\x03-\x04\x20\x1a\xf2\x01\x20The\x20names\x20of\x20the\x20column\
    s\x20in\x20[table][google.spanner.v1.Mutation.Write.table]\x20to\x20be\
    \x20written.\n\n\x20The\x20list\x20of\x20columns\x20must\x20contain\x20e\
    nough\x20columns\x20to\x20allow\n\x20Cloud\x20Spanner\x20to\x20derive\
    \x20values\x20for\x20all\x20primary\x20key\x20columns\x20in\x20the\n\x20\
    row(s)\x20to\x20be\x20modified.\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\
    \x12\x03-\x04\x0c\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03-\r\x13\n\
    \x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03-\x14\x1b\n\x0e\n\x07\x04\0\
    \x03\0\x02\x01\x03\x12\x03-\x1e\x1f\n\xf8\x04\n\x06\x04\0\x03\0\x02\x02\
    \x12\x037\x042\x1a\xe8\x04\x20The\x20values\x20to\x20be\x20written.\x20`\
    values`\x20can\x20contain\x20more\x20than\x20one\n\x20list\x20of\x20valu\
    es.\x20If\x20it\x20does,\x20then\x20multiple\x20rows\x20are\x20written,\
    \x20one\n\x20for\x20each\x20entry\x20in\x20`values`.\x20Each\x20list\x20\
    in\x20`values`\x20must\x20have\n\x20exactly\x20as\x20many\x20entries\x20\
    as\x20there\x20are\x20entries\x20in\x20[columns][google.spanner.v1.Mutat\
    ion.Write.columns]\n\x20above.\x20Sending\x20multiple\x20lists\x20is\x20\
    equivalent\x20to\x20sending\x20multiple\n\x20`Mutation`s,\x20each\x20con\
    taining\x20one\x20`values`\x20entry\x20and\x20repeating\n\x20[table][goo\
    gle.spanner.v1.Mutation.Write.table]\x20and\x20[columns][google.spanner.\
    v1.Mutation.Write.columns].\x20Individual\x20values\x20in\x20each\x20lis\
    t\x20are\n\x20encoded\x20as\x20described\x20[here][google.spanner.v1.Typ\
    eCode].\n\n\x0e\n\x07\x04\0\x03\0\x02\x02\x04\x12\x037\x04\x0c\n\x0e\n\
    \x07\x04\0\x03\0\x02\x02\x06\x12\x037\r&\n\x0e\n\x07\x04\0\x03\0\x02\x02\
    \x01\x12\x037'-\n\x0e\n\x07\x04\0\x03\0\x02\x02\x03\x12\x03701\nT\n\x04\
    \x04\0\x03\x01\x12\x04;\x02C\x03\x1aF\x20Arguments\x20to\x20[delete][goo\
    gle.spanner.v1.Mutation.delete]\x20operations.\n\n\x0c\n\x05\x04\0\x03\
    \x01\x01\x12\x03;\n\x10\n@\n\x06\x04\0\x03\x01\x02\0\x12\x03=\x04\x15\
    \x1a1\x20Required.\x20The\x20table\x20whose\x20rows\x20will\x20be\x20del\
    eted.\n\n\x0e\n\x07\x04\0\x03\x01\x02\0\x05\x12\x03=\x04\n\n\x0e\n\x07\
    \x04\0\x03\x01\x02\0\x01\x12\x03=\x0b\x10\n\x0e\n\x07\x04\0\x03\x01\x02\
    \0\x03\x12\x03=\x13\x14\n\xd7\x01\n\x06\x04\0\x03\x01\x02\x01\x12\x03B\
    \x04\x17\x1a\xc7\x01\x20Required.\x20The\x20primary\x20keys\x20of\x20the\
    \x20rows\x20within\x20[table][google.spanner.v1.Mutation.Delete.table]\
    \x20to\x20delete.\n\x20Delete\x20is\x20idempotent.\x20The\x20transaction\
    \x20will\x20succeed\x20even\x20if\x20some\x20or\x20all\n\x20rows\x20do\
    \x20not\x20exist.\n\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x06\x12\x03B\x04\n\
    \n\x0e\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x03B\x0b\x12\n\x0e\n\x07\x04\
    \0\x03\x01\x02\x01\x03\x12\x03B\x15\x16\n3\n\x04\x04\0\x08\0\x12\x04F\
    \x02]\x03\x1a%\x20Required.\x20The\x20operation\x20to\x20perform.\n\n\
    \x0c\n\x05\x04\0\x08\0\x01\x12\x03F\x08\x11\n\x89\x01\n\x04\x04\0\x02\0\
    \x12\x03I\x04\x15\x1a|\x20Insert\x20new\x20rows\x20in\x20a\x20table.\x20\
    If\x20any\x20of\x20the\x20rows\x20already\x20exist,\n\x20the\x20write\
    \x20or\x20transaction\x20fails\x20with\x20error\x20`ALREADY_EXISTS`.\n\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03I\x04\t\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03I\n\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03I\x13\x14\n\x89\x01\n\
    \x04\x04\0\x02\x01\x12\x03M\x04\x15\x1a|\x20Update\x20existing\x20rows\
    \x20in\x20a\x20table.\x20If\x20any\x20of\x20the\x20rows\x20does\x20not\n\
    \x20already\x20exist,\x20the\x20transaction\x20fails\x20with\x20error\
    \x20`NOT_FOUND`.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03M\x04\t\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03M\n\x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03M\x13\x14\n\xe1\x01\n\x04\x04\0\x02\x02\x12\x03R\x04\x1f\x1a\xd3\x01\
    \x20Like\x20[insert][google.spanner.v1.Mutation.insert],\x20except\x20th\
    at\x20if\x20the\x20row\x20already\x20exists,\x20then\n\x20its\x20column\
    \x20values\x20are\x20overwritten\x20with\x20the\x20ones\x20provided.\x20\
    Any\n\x20column\x20values\x20not\x20explicitly\x20written\x20are\x20pres\
    erved.\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03R\x04\t\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03R\n\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03R\x1d\
    \x1e\n\xb3\x02\n\x04\x04\0\x02\x03\x12\x03X\x04\x16\x1a\xa5\x02\x20Like\
    \x20[insert][google.spanner.v1.Mutation.insert],\x20except\x20that\x20if\
    \x20the\x20row\x20already\x20exists,\x20it\x20is\n\x20deleted,\x20and\
    \x20the\x20column\x20values\x20provided\x20are\x20inserted\n\x20instead.\
    \x20Unlike\x20[insert_or_update][google.spanner.v1.Mutation.insert_or_up\
    date],\x20this\x20means\x20any\x20values\x20not\n\x20explicitly\x20writt\
    en\x20become\x20`NULL`.\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03X\x04\t\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03X\n\x11\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03X\x14\x15\n^\n\x04\x04\0\x02\x04\x12\x03\\\x04\x16\x1aQ\x20D\
    elete\x20rows\x20from\x20a\x20table.\x20Succeeds\x20whether\x20or\x20not\
    \x20the\x20named\n\x20rows\x20were\x20present.\n\n\x0c\n\x05\x04\0\x02\
    \x04\x06\x12\x03\\\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\\\x0b\x11\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\\\x14\x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
