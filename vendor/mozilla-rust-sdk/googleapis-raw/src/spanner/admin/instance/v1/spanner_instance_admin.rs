// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/spanner/admin/instance/v1/spanner_instance_admin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct InstanceConfig {
    // message fields
    pub name: ::std::string::String,
    pub display_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstanceConfig {
    fn default() -> &'a InstanceConfig {
        <InstanceConfig as ::protobuf::Message>::default_instance()
    }
}

impl InstanceConfig {
    pub fn new() -> InstanceConfig {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string display_name = 2;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for InstanceConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstanceConfig {
        InstanceConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &InstanceConfig| { &m.name },
                |m: &mut InstanceConfig| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &InstanceConfig| { &m.display_name },
                |m: &mut InstanceConfig| { &mut m.display_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstanceConfig>(
                "InstanceConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstanceConfig {
        static instance: ::protobuf::rt::LazyV2<InstanceConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstanceConfig::new)
    }
}

impl ::protobuf::Clear for InstanceConfig {
    fn clear(&mut self) {
        self.name.clear();
        self.display_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstanceConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Instance {
    // message fields
    pub name: ::std::string::String,
    pub config: ::std::string::String,
    pub display_name: ::std::string::String,
    pub node_count: i32,
    pub state: Instance_State,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Instance {
    fn default() -> &'a Instance {
        <Instance as ::protobuf::Message>::default_instance()
    }
}

impl Instance {
    pub fn new() -> Instance {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string config = 2;


    pub fn get_config(&self) -> &str {
        &self.config
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::std::string::String) {
        self.config = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut ::std::string::String {
        &mut self.config
    }

    // Take field
    pub fn take_config(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.config, ::std::string::String::new())
    }

    // string display_name = 3;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // int32 node_count = 5;


    pub fn get_node_count(&self) -> i32 {
        self.node_count
    }
    pub fn clear_node_count(&mut self) {
        self.node_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_count(&mut self, v: i32) {
        self.node_count = v;
    }

    // .google.spanner.admin.instance.v1.Instance.State state = 6;


    pub fn get_state(&self) -> Instance_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = Instance_State::STATE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: Instance_State) {
        self.state = v;
    }

    // repeated .google.spanner.admin.instance.v1.Instance.LabelsEntry labels = 7;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Instance {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.config)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.node_count = tmp;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.config.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.config);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.display_name);
        }
        if self.node_count != 0 {
            my_size += ::protobuf::rt::value_size(5, self.node_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.state != Instance_State::STATE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(6, self.state);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.labels);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.config.is_empty() {
            os.write_string(2, &self.config)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(3, &self.display_name)?;
        }
        if self.node_count != 0 {
            os.write_int32(5, self.node_count)?;
        }
        if self.state != Instance_State::STATE_UNSPECIFIED {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.labels, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Instance {
        Instance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Instance| { &m.name },
                |m: &mut Instance| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "config",
                |m: &Instance| { &m.config },
                |m: &mut Instance| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &Instance| { &m.display_name },
                |m: &mut Instance| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "node_count",
                |m: &Instance| { &m.node_count },
                |m: &mut Instance| { &mut m.node_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Instance_State>>(
                "state",
                |m: &Instance| { &m.state },
                |m: &mut Instance| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &Instance| { &m.labels },
                |m: &mut Instance| { &mut m.labels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Instance>(
                "Instance",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Instance {
        static instance: ::protobuf::rt::LazyV2<Instance> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Instance::new)
    }
}

impl ::protobuf::Clear for Instance {
    fn clear(&mut self) {
        self.name.clear();
        self.config.clear();
        self.display_name.clear();
        self.node_count = 0;
        self.state = Instance_State::STATE_UNSPECIFIED;
        self.labels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Instance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Instance_State {
    STATE_UNSPECIFIED = 0,
    CREATING = 1,
    READY = 2,
}

impl ::protobuf::ProtobufEnum for Instance_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Instance_State> {
        match value {
            0 => ::std::option::Option::Some(Instance_State::STATE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Instance_State::CREATING),
            2 => ::std::option::Option::Some(Instance_State::READY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Instance_State] = &[
            Instance_State::STATE_UNSPECIFIED,
            Instance_State::CREATING,
            Instance_State::READY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Instance_State>("Instance.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Instance_State {
}

impl ::std::default::Default for Instance_State {
    fn default() -> Self {
        Instance_State::STATE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstanceConfigsRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstanceConfigsRequest {
    fn default() -> &'a ListInstanceConfigsRequest {
        <ListInstanceConfigsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInstanceConfigsRequest {
    pub fn new() -> ListInstanceConfigsRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstanceConfigsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstanceConfigsRequest {
        ListInstanceConfigsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListInstanceConfigsRequest| { &m.parent },
                |m: &mut ListInstanceConfigsRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListInstanceConfigsRequest| { &m.page_size },
                |m: &mut ListInstanceConfigsRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListInstanceConfigsRequest| { &m.page_token },
                |m: &mut ListInstanceConfigsRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstanceConfigsRequest>(
                "ListInstanceConfigsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstanceConfigsRequest {
        static instance: ::protobuf::rt::LazyV2<ListInstanceConfigsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstanceConfigsRequest::new)
    }
}

impl ::protobuf::Clear for ListInstanceConfigsRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstanceConfigsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstanceConfigsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstanceConfigsResponse {
    // message fields
    pub instance_configs: ::protobuf::RepeatedField<InstanceConfig>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstanceConfigsResponse {
    fn default() -> &'a ListInstanceConfigsResponse {
        <ListInstanceConfigsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListInstanceConfigsResponse {
    pub fn new() -> ListInstanceConfigsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.spanner.admin.instance.v1.InstanceConfig instance_configs = 1;


    pub fn get_instance_configs(&self) -> &[InstanceConfig] {
        &self.instance_configs
    }
    pub fn clear_instance_configs(&mut self) {
        self.instance_configs.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_configs(&mut self, v: ::protobuf::RepeatedField<InstanceConfig>) {
        self.instance_configs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instance_configs(&mut self) -> &mut ::protobuf::RepeatedField<InstanceConfig> {
        &mut self.instance_configs
    }

    // Take field
    pub fn take_instance_configs(&mut self) -> ::protobuf::RepeatedField<InstanceConfig> {
        ::std::mem::replace(&mut self.instance_configs, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstanceConfigsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.instance_configs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instance_configs)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.instance_configs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.instance_configs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstanceConfigsResponse {
        ListInstanceConfigsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstanceConfig>>(
                "instance_configs",
                |m: &ListInstanceConfigsResponse| { &m.instance_configs },
                |m: &mut ListInstanceConfigsResponse| { &mut m.instance_configs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListInstanceConfigsResponse| { &m.next_page_token },
                |m: &mut ListInstanceConfigsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstanceConfigsResponse>(
                "ListInstanceConfigsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstanceConfigsResponse {
        static instance: ::protobuf::rt::LazyV2<ListInstanceConfigsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstanceConfigsResponse::new)
    }
}

impl ::protobuf::Clear for ListInstanceConfigsResponse {
    fn clear(&mut self) {
        self.instance_configs.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstanceConfigsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstanceConfigsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetInstanceConfigRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetInstanceConfigRequest {
    fn default() -> &'a GetInstanceConfigRequest {
        <GetInstanceConfigRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetInstanceConfigRequest {
    pub fn new() -> GetInstanceConfigRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetInstanceConfigRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetInstanceConfigRequest {
        GetInstanceConfigRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetInstanceConfigRequest| { &m.name },
                |m: &mut GetInstanceConfigRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetInstanceConfigRequest>(
                "GetInstanceConfigRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetInstanceConfigRequest {
        static instance: ::protobuf::rt::LazyV2<GetInstanceConfigRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetInstanceConfigRequest::new)
    }
}

impl ::protobuf::Clear for GetInstanceConfigRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetInstanceConfigRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInstanceConfigRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetInstanceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetInstanceRequest {
    fn default() -> &'a GetInstanceRequest {
        <GetInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetInstanceRequest {
    pub fn new() -> GetInstanceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetInstanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetInstanceRequest {
        GetInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetInstanceRequest| { &m.name },
                |m: &mut GetInstanceRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetInstanceRequest>(
                "GetInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<GetInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetInstanceRequest::new)
    }
}

impl ::protobuf::Clear for GetInstanceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateInstanceRequest {
    // message fields
    pub parent: ::std::string::String,
    pub instance_id: ::std::string::String,
    pub instance: ::protobuf::SingularPtrField<Instance>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInstanceRequest {
    fn default() -> &'a CreateInstanceRequest {
        <CreateInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceRequest {
    pub fn new() -> CreateInstanceRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string instance_id = 2;


    pub fn get_instance_id(&self) -> &str {
        &self.instance_id
    }
    pub fn clear_instance_id(&mut self) {
        self.instance_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_id(&mut self, v: ::std::string::String) {
        self.instance_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_id(&mut self) -> &mut ::std::string::String {
        &mut self.instance_id
    }

    // Take field
    pub fn take_instance_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_id, ::std::string::String::new())
    }

    // .google.spanner.admin.instance.v1.Instance instance = 3;


    pub fn get_instance(&self) -> &Instance {
        self.instance.as_ref().unwrap_or_else(|| <Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> Instance {
        self.instance.take().unwrap_or_else(|| Instance::new())
    }
}

impl ::protobuf::Message for CreateInstanceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.instance_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.instance_id);
        }
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.instance_id.is_empty() {
            os.write_string(2, &self.instance_id)?;
        }
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInstanceRequest {
        CreateInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateInstanceRequest| { &m.parent },
                |m: &mut CreateInstanceRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_id",
                |m: &CreateInstanceRequest| { &m.instance_id },
                |m: &mut CreateInstanceRequest| { &mut m.instance_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                "instance",
                |m: &CreateInstanceRequest| { &m.instance },
                |m: &mut CreateInstanceRequest| { &mut m.instance },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateInstanceRequest>(
                "CreateInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<CreateInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateInstanceRequest::new)
    }
}

impl ::protobuf::Clear for CreateInstanceRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.instance_id.clear();
        self.instance.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstancesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    pub filter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstancesRequest {
    fn default() -> &'a ListInstancesRequest {
        <ListInstancesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInstancesRequest {
    pub fn new() -> ListInstancesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }

    // string filter = 4;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstancesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        if !self.filter.is_empty() {
            os.write_string(4, &self.filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstancesRequest {
        ListInstancesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListInstancesRequest| { &m.parent },
                |m: &mut ListInstancesRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListInstancesRequest| { &m.page_size },
                |m: &mut ListInstancesRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListInstancesRequest| { &m.page_token },
                |m: &mut ListInstancesRequest| { &mut m.page_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListInstancesRequest| { &m.filter },
                |m: &mut ListInstancesRequest| { &mut m.filter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstancesRequest>(
                "ListInstancesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstancesRequest {
        static instance: ::protobuf::rt::LazyV2<ListInstancesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstancesRequest::new)
    }
}

impl ::protobuf::Clear for ListInstancesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstancesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstancesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstancesResponse {
    // message fields
    pub instances: ::protobuf::RepeatedField<Instance>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstancesResponse {
    fn default() -> &'a ListInstancesResponse {
        <ListInstancesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListInstancesResponse {
    pub fn new() -> ListInstancesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.spanner.admin.instance.v1.Instance instances = 1;


    pub fn get_instances(&self) -> &[Instance] {
        &self.instances
    }
    pub fn clear_instances(&mut self) {
        self.instances.clear();
    }

    // Param is passed by value, moved
    pub fn set_instances(&mut self, v: ::protobuf::RepeatedField<Instance>) {
        self.instances = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instances(&mut self) -> &mut ::protobuf::RepeatedField<Instance> {
        &mut self.instances
    }

    // Take field
    pub fn take_instances(&mut self) -> ::protobuf::RepeatedField<Instance> {
        ::std::mem::replace(&mut self.instances, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstancesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.instances {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instances)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.instances {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.instances {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstancesResponse {
        ListInstancesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                "instances",
                |m: &ListInstancesResponse| { &m.instances },
                |m: &mut ListInstancesResponse| { &mut m.instances },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListInstancesResponse| { &m.next_page_token },
                |m: &mut ListInstancesResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstancesResponse>(
                "ListInstancesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstancesResponse {
        static instance: ::protobuf::rt::LazyV2<ListInstancesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstancesResponse::new)
    }
}

impl ::protobuf::Clear for ListInstancesResponse {
    fn clear(&mut self) {
        self.instances.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstancesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstancesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateInstanceRequest {
    // message fields
    pub instance: ::protobuf::SingularPtrField<Instance>,
    pub field_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateInstanceRequest {
    fn default() -> &'a UpdateInstanceRequest {
        <UpdateInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInstanceRequest {
    pub fn new() -> UpdateInstanceRequest {
        ::std::default::Default::default()
    }

    // .google.spanner.admin.instance.v1.Instance instance = 1;


    pub fn get_instance(&self) -> &Instance {
        self.instance.as_ref().unwrap_or_else(|| <Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> Instance {
        self.instance.take().unwrap_or_else(|| Instance::new())
    }

    // .google.protobuf.FieldMask field_mask = 2;


    pub fn get_field_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.field_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_mask(&mut self) {
        self.field_mask.clear();
    }

    pub fn has_field_mask(&self) -> bool {
        self.field_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.field_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.field_mask.is_none() {
            self.field_mask.set_default();
        }
        self.field_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.field_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for UpdateInstanceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.field_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.field_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.field_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateInstanceRequest {
        UpdateInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                "instance",
                |m: &UpdateInstanceRequest| { &m.instance },
                |m: &mut UpdateInstanceRequest| { &mut m.instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "field_mask",
                |m: &UpdateInstanceRequest| { &m.field_mask },
                |m: &mut UpdateInstanceRequest| { &mut m.field_mask },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateInstanceRequest>(
                "UpdateInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateInstanceRequest::new)
    }
}

impl ::protobuf::Clear for UpdateInstanceRequest {
    fn clear(&mut self) {
        self.instance.clear();
        self.field_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteInstanceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteInstanceRequest {
    fn default() -> &'a DeleteInstanceRequest {
        <DeleteInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteInstanceRequest {
    pub fn new() -> DeleteInstanceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteInstanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteInstanceRequest {
        DeleteInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteInstanceRequest| { &m.name },
                |m: &mut DeleteInstanceRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteInstanceRequest>(
                "DeleteInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteInstanceRequest::new)
    }
}

impl ::protobuf::Clear for DeleteInstanceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateInstanceMetadata {
    // message fields
    pub instance: ::protobuf::SingularPtrField<Instance>,
    pub start_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub cancel_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInstanceMetadata {
    fn default() -> &'a CreateInstanceMetadata {
        <CreateInstanceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceMetadata {
    pub fn new() -> CreateInstanceMetadata {
        ::std::default::Default::default()
    }

    // .google.spanner.admin.instance.v1.Instance instance = 1;


    pub fn get_instance(&self) -> &Instance {
        self.instance.as_ref().unwrap_or_else(|| <Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> Instance {
        self.instance.take().unwrap_or_else(|| Instance::new())
    }

    // .google.protobuf.Timestamp start_time = 2;


    pub fn get_start_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp cancel_time = 3;


    pub fn get_cancel_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.cancel_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cancel_time(&mut self) {
        self.cancel_time.clear();
    }

    pub fn has_cancel_time(&self) -> bool {
        self.cancel_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cancel_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.cancel_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.cancel_time.is_none() {
            self.cancel_time.set_default();
        }
        self.cancel_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_cancel_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.cancel_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end_time = 4;


    pub fn get_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end_time(&mut self) {
        self.end_time.clear();
    }

    pub fn has_end_time(&self) -> bool {
        self.end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_time.is_none() {
            self.end_time.set_default();
        }
        self.end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for CreateInstanceMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.start_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cancel_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cancel_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInstanceMetadata {
        CreateInstanceMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                "instance",
                |m: &CreateInstanceMetadata| { &m.instance },
                |m: &mut CreateInstanceMetadata| { &mut m.instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start_time",
                |m: &CreateInstanceMetadata| { &m.start_time },
                |m: &mut CreateInstanceMetadata| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "cancel_time",
                |m: &CreateInstanceMetadata| { &m.cancel_time },
                |m: &mut CreateInstanceMetadata| { &mut m.cancel_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "end_time",
                |m: &CreateInstanceMetadata| { &m.end_time },
                |m: &mut CreateInstanceMetadata| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateInstanceMetadata>(
                "CreateInstanceMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateInstanceMetadata {
        static instance: ::protobuf::rt::LazyV2<CreateInstanceMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateInstanceMetadata::new)
    }
}

impl ::protobuf::Clear for CreateInstanceMetadata {
    fn clear(&mut self) {
        self.instance.clear();
        self.start_time.clear();
        self.cancel_time.clear();
        self.end_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInstanceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateInstanceMetadata {
    // message fields
    pub instance: ::protobuf::SingularPtrField<Instance>,
    pub start_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub cancel_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateInstanceMetadata {
    fn default() -> &'a UpdateInstanceMetadata {
        <UpdateInstanceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInstanceMetadata {
    pub fn new() -> UpdateInstanceMetadata {
        ::std::default::Default::default()
    }

    // .google.spanner.admin.instance.v1.Instance instance = 1;


    pub fn get_instance(&self) -> &Instance {
        self.instance.as_ref().unwrap_or_else(|| <Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> Instance {
        self.instance.take().unwrap_or_else(|| Instance::new())
    }

    // .google.protobuf.Timestamp start_time = 2;


    pub fn get_start_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp cancel_time = 3;


    pub fn get_cancel_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.cancel_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cancel_time(&mut self) {
        self.cancel_time.clear();
    }

    pub fn has_cancel_time(&self) -> bool {
        self.cancel_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cancel_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.cancel_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.cancel_time.is_none() {
            self.cancel_time.set_default();
        }
        self.cancel_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_cancel_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.cancel_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end_time = 4;


    pub fn get_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end_time(&mut self) {
        self.end_time.clear();
    }

    pub fn has_end_time(&self) -> bool {
        self.end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_time.is_none() {
            self.end_time.set_default();
        }
        self.end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for UpdateInstanceMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.start_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cancel_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cancel_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cancel_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateInstanceMetadata {
        UpdateInstanceMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Instance>>(
                "instance",
                |m: &UpdateInstanceMetadata| { &m.instance },
                |m: &mut UpdateInstanceMetadata| { &mut m.instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start_time",
                |m: &UpdateInstanceMetadata| { &m.start_time },
                |m: &mut UpdateInstanceMetadata| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "cancel_time",
                |m: &UpdateInstanceMetadata| { &m.cancel_time },
                |m: &mut UpdateInstanceMetadata| { &mut m.cancel_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "end_time",
                |m: &UpdateInstanceMetadata| { &m.end_time },
                |m: &mut UpdateInstanceMetadata| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateInstanceMetadata>(
                "UpdateInstanceMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateInstanceMetadata {
        static instance: ::protobuf::rt::LazyV2<UpdateInstanceMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateInstanceMetadata::new)
    }
}

impl ::protobuf::Clear for UpdateInstanceMetadata {
    fn clear(&mut self) {
        self.instance.clear();
        self.start_time.clear();
        self.cancel_time.clear();
        self.end_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateInstanceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInstanceMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n=google/spanner/admin/instance/v1/spanner_instance_admin.proto\x12\x20\
    google.spanner.admin.instance.v1\x1a\x1cgoogle/api/annotations.proto\x1a\
    \x1egoogle/iam/v1/iam_policy.proto\x1a\x1agoogle/iam/v1/policy.proto\x1a\
    #google/longrunning/operations.proto\x1a\x1bgoogle/protobuf/empty.proto\
    \x1a\x20google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestam\
    p.proto\"G\n\x0eInstanceConfig\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04\
    name\x12!\n\x0cdisplay_name\x18\x02\x20\x01(\tR\x0bdisplayName\"\x84\x03\
    \n\x08Instance\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x16\n\
    \x06config\x18\x02\x20\x01(\tR\x06config\x12!\n\x0cdisplay_name\x18\x03\
    \x20\x01(\tR\x0bdisplayName\x12\x1d\n\nnode_count\x18\x05\x20\x01(\x05R\
    \tnodeCount\x12F\n\x05state\x18\x06\x20\x01(\x0e20.google.spanner.admin.\
    instance.v1.Instance.StateR\x05state\x12N\n\x06labels\x18\x07\x20\x03(\
    \x0b26.google.spanner.admin.instance.v1.Instance.LabelsEntryR\x06labels\
    \x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"7\n\x05State\x12\
    \x15\n\x11STATE_UNSPECIFIED\x10\0\x12\x0c\n\x08CREATING\x10\x01\x12\t\n\
    \x05READY\x10\x02\"p\n\x1aListInstanceConfigsRequest\x12\x16\n\x06parent\
    \x18\x01\x20\x01(\tR\x06parent\x12\x1b\n\tpage_size\x18\x02\x20\x01(\x05\
    R\x08pageSize\x12\x1d\n\npage_token\x18\x03\x20\x01(\tR\tpageToken\"\xa2\
    \x01\n\x1bListInstanceConfigsResponse\x12[\n\x10instance_configs\x18\x01\
    \x20\x03(\x0b20.google.spanner.admin.instance.v1.InstanceConfigR\x0finst\
    anceConfigs\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPageToken\
    \".\n\x18GetInstanceConfigRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\"(\n\x12GetInstanceRequest\x12\x12\n\x04name\x18\x01\x20\x01(\t\
    R\x04name\"\x98\x01\n\x15CreateInstanceRequest\x12\x16\n\x06parent\x18\
    \x01\x20\x01(\tR\x06parent\x12\x1f\n\x0binstance_id\x18\x02\x20\x01(\tR\
    \ninstanceId\x12F\n\x08instance\x18\x03\x20\x01(\x0b2*.google.spanner.ad\
    min.instance.v1.InstanceR\x08instance\"\x82\x01\n\x14ListInstancesReques\
    t\x12\x16\n\x06parent\x18\x01\x20\x01(\tR\x06parent\x12\x1b\n\tpage_size\
    \x18\x02\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_token\x18\x03\x20\x01\
    (\tR\tpageToken\x12\x16\n\x06filter\x18\x04\x20\x01(\tR\x06filter\"\x89\
    \x01\n\x15ListInstancesResponse\x12H\n\tinstances\x18\x01\x20\x03(\x0b2*\
    .google.spanner.admin.instance.v1.InstanceR\tinstances\x12&\n\x0fnext_pa\
    ge_token\x18\x02\x20\x01(\tR\rnextPageToken\"\x9a\x01\n\x15UpdateInstanc\
    eRequest\x12F\n\x08instance\x18\x01\x20\x01(\x0b2*.google.spanner.admin.\
    instance.v1.InstanceR\x08instance\x129\n\nfield_mask\x18\x02\x20\x01(\
    \x0b2\x1a.google.protobuf.FieldMaskR\tfieldMask\"+\n\x15DeleteInstanceRe\
    quest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"\x8f\x02\n\x16Creat\
    eInstanceMetadata\x12F\n\x08instance\x18\x01\x20\x01(\x0b2*.google.spann\
    er.admin.instance.v1.InstanceR\x08instance\x129\n\nstart_time\x18\x02\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tstartTime\x12;\n\x0bcance\
    l_time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ncancelTime\
    \x125\n\x08end_time\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \x07endTime\"\x8f\x02\n\x16UpdateInstanceMetadata\x12F\n\x08instance\x18\
    \x01\x20\x01(\x0b2*.google.spanner.admin.instance.v1.InstanceR\x08instan\
    ce\x129\n\nstart_time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.Timestam\
    pR\tstartTime\x12;\n\x0bcancel_time\x18\x03\x20\x01(\x0b2\x1a.google.pro\
    tobuf.TimestampR\ncancelTime\x125\n\x08end_time\x18\x04\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\x07endTime2\xe6\x0c\n\rInstanceAdmin\x12\
    \xc3\x01\n\x13ListInstanceConfigs\x12<.google.spanner.admin.instance.v1.\
    ListInstanceConfigsRequest\x1a=.google.spanner.admin.instance.v1.ListIns\
    tanceConfigsResponse\"/\x82\xd3\xe4\x93\x02)\x12'/v1/{parent=projects/*}\
    /instanceConfigs\x12\xb2\x01\n\x11GetInstanceConfig\x12:.google.spanner.\
    admin.instance.v1.GetInstanceConfigRequest\x1a0.google.spanner.admin.ins\
    tance.v1.InstanceConfig\"/\x82\xd3\xe4\x93\x02)\x12'/v1/{name=projects/*\
    /instanceConfigs/*}\x12\xab\x01\n\rListInstances\x126.google.spanner.adm\
    in.instance.v1.ListInstancesRequest\x1a7.google.spanner.admin.instance.v\
    1.ListInstancesResponse\")\x82\xd3\xe4\x93\x02#\x12!/v1/{parent=projects\
    /*}/instances\x12\x9a\x01\n\x0bGetInstance\x124.google.spanner.admin.ins\
    tance.v1.GetInstanceRequest\x1a*.google.spanner.admin.instance.v1.Instan\
    ce\")\x82\xd3\xe4\x93\x02#\x12!/v1/{name=projects/*/instances/*}\x12\x96\
    \x01\n\x0eCreateInstance\x127.google.spanner.admin.instance.v1.CreateIns\
    tanceRequest\x1a\x1d.google.longrunning.Operation\",\x82\xd3\xe4\x93\x02\
    &\"!/v1/{parent=projects/*}/instances:\x01*\x12\x9f\x01\n\x0eUpdateInsta\
    nce\x127.google.spanner.admin.instance.v1.UpdateInstanceRequest\x1a\x1d.\
    google.longrunning.Operation\"5\x82\xd3\xe4\x93\x02/2*/v1/{instance.name\
    =projects/*/instances/*}:\x01*\x12\x8c\x01\n\x0eDeleteInstance\x127.goog\
    le.spanner.admin.instance.v1.DeleteInstanceRequest\x1a\x16.google.protob\
    uf.Empty\")\x82\xd3\xe4\x93\x02#*!/v1/{name=projects/*/instances/*}\x12\
    \x88\x01\n\x0cSetIamPolicy\x12\".google.iam.v1.SetIamPolicyRequest\x1a\
    \x15.google.iam.v1.Policy\"=\x82\xd3\xe4\x93\x027\"2/v1/{resource=projec\
    ts/*/instances/*}:setIamPolicy:\x01*\x12\x88\x01\n\x0cGetIamPolicy\x12\"\
    .google.iam.v1.GetIamPolicyRequest\x1a\x15.google.iam.v1.Policy\"=\x82\
    \xd3\xe4\x93\x027\"2/v1/{resource=projects/*/instances/*}:getIamPolicy:\
    \x01*\x12\xae\x01\n\x12TestIamPermissions\x12(.google.iam.v1.TestIamPerm\
    issionsRequest\x1a).google.iam.v1.TestIamPermissionsResponse\"C\x82\xd3\
    \xe4\x93\x02=\"8/v1/{resource=projects/*/instances/*}:testIamPermissions\
    :\x01*B\xdf\x01\n$com.google.spanner.admin.instance.v1B\x19SpannerInstan\
    ceAdminProtoP\x01ZHgoogle.golang.org/genproto/googleapis/spanner/admin/i\
    nstance/v1;instance\xaa\x02&Google.Cloud.Spanner.Admin.Instance.V1\xca\
    \x02&Google\\Cloud\\Spanner\\Admin\\Instance\\V1J\xa6\x9b\x01\n\x07\x12\
    \x05\x0e\0\xda\x03\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\
    \x20Copyright\x202018\x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/li\
    censes/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\
    \x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\
    \x12\x03\x10\0)\n\t\n\x02\x03\0\x12\x03\x12\0&\n\t\n\x02\x03\x01\x12\x03\
    \x13\0(\n\t\n\x02\x03\x02\x12\x03\x14\0$\n\t\n\x02\x03\x03\x12\x03\x15\0\
    -\n\t\n\x02\x03\x04\x12\x03\x16\0%\n\t\n\x02\x03\x05\x12\x03\x17\0*\n\t\
    \n\x02\x03\x06\x12\x03\x18\0)\n\x08\n\x01\x08\x12\x03\x1a\0C\n\t\n\x02\
    \x08%\x12\x03\x1a\0C\n\x08\n\x01\x08\x12\x03\x1b\0_\n\t\n\x02\x08\x0b\
    \x12\x03\x1b\0_\n\x08\n\x01\x08\x12\x03\x1c\0\"\n\t\n\x02\x08\n\x12\x03\
    \x1c\0\"\n\x08\n\x01\x08\x12\x03\x1d\0:\n\t\n\x02\x08\x08\x12\x03\x1d\0:\
    \n\x08\n\x01\x08\x12\x03\x1e\0=\n\t\n\x02\x08\x01\x12\x03\x1e\0=\n\x08\n\
    \x01\x08\x12\x03\x1f\0E\n\t\n\x02\x08)\x12\x03\x1f\0E\n\xdd\x08\n\x02\
    \x06\0\x12\x057\0\xe1\x01\x01\x1a\xcf\x08\x20Cloud\x20Spanner\x20Instanc\
    e\x20Admin\x20API\n\n\x20The\x20Cloud\x20Spanner\x20Instance\x20Admin\
    \x20API\x20can\x20be\x20used\x20to\x20create,\x20delete,\n\x20modify\x20\
    and\x20list\x20instances.\x20Instances\x20are\x20dedicated\x20Cloud\x20S\
    panner\x20serving\n\x20and\x20storage\x20resources\x20to\x20be\x20used\
    \x20by\x20Cloud\x20Spanner\x20databases.\n\n\x20Each\x20instance\x20has\
    \x20a\x20\"configuration\",\x20which\x20dictates\x20where\x20the\n\x20se\
    rving\x20resources\x20for\x20the\x20Cloud\x20Spanner\x20instance\x20are\
    \x20located\x20(e.g.,\n\x20US-central,\x20Europe).\x20Configurations\x20\
    are\x20created\x20by\x20Google\x20based\x20on\n\x20resource\x20availabil\
    ity.\n\n\x20Cloud\x20Spanner\x20billing\x20is\x20based\x20on\x20the\x20i\
    nstances\x20that\x20exist\x20and\x20their\n\x20sizes.\x20After\x20an\x20\
    instance\x20exists,\x20there\x20are\x20no\x20additional\n\x20per-databas\
    e\x20or\x20per-operation\x20charges\x20for\x20use\x20of\x20the\x20instan\
    ce\n\x20(though\x20there\x20may\x20be\x20additional\x20network\x20bandwi\
    dth\x20charges).\n\x20Instances\x20offer\x20isolation:\x20problems\x20wi\
    th\x20databases\x20in\x20one\x20instance\n\x20will\x20not\x20affect\x20o\
    ther\x20instances.\x20However,\x20within\x20an\x20instance\n\x20database\
    s\x20can\x20affect\x20each\x20other.\x20For\x20example,\x20if\x20one\x20\
    database\x20in\x20an\n\x20instance\x20receives\x20a\x20lot\x20of\x20requ\
    ests\x20and\x20consumes\x20most\x20of\x20the\n\x20instance\x20resources,\
    \x20fewer\x20resources\x20are\x20available\x20for\x20other\n\x20database\
    s\x20in\x20that\x20instance,\x20and\x20their\x20performance\x20may\x20su\
    ffer.\n\n\n\n\x03\x06\0\x01\x12\x037\x08\x15\nP\n\x04\x06\0\x02\0\x12\
    \x049\x02=\x03\x1aB\x20Lists\x20the\x20supported\x20instance\x20configur\
    ations\x20for\x20a\x20given\x20project.\n\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x039\x06\x19\n\x0c\n\x05\x06\0\x02\0\x02\x12\x039\x1a4\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x039?Z\n\r\n\x05\x06\0\x02\0\x04\x12\x04:\x04<\x06\
    \n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04:\x04<\x06\nK\n\x04\x06\
    \0\x02\x01\x12\x04@\x02D\x03\x1a=\x20Gets\x20information\x20about\x20a\
    \x20particular\x20instance\x20configuration.\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03@\x06\x17\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03@\x180\n\x0c\
    \n\x05\x06\0\x02\x01\x03\x12\x03@;I\n\r\n\x05\x06\0\x02\x01\x04\x12\x04A\
    \x04C\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04A\x04C\x06\n9\
    \n\x04\x06\0\x02\x02\x12\x04G\x02K\x03\x1a+\x20Lists\x20all\x20instances\
    \x20in\x20the\x20given\x20project.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\
    \x03G\x06\x13\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03G\x14(\n\x0c\n\x05\
    \x06\0\x02\x02\x03\x12\x03G3H\n\r\n\x05\x06\0\x02\x02\x04\x12\x04H\x04J\
    \x06\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04H\x04J\x06\n=\n\
    \x04\x06\0\x02\x03\x12\x04N\x02R\x03\x1a/\x20Gets\x20information\x20abou\
    t\x20a\x20particular\x20instance.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\
    \x03N\x06\x11\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03N\x12$\n\x0c\n\x05\
    \x06\0\x02\x03\x03\x12\x03N/7\n\r\n\x05\x06\0\x02\x03\x04\x12\x04O\x04Q\
    \x06\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04O\x04Q\x06\n\xa8\
    \x0c\n\x04\x06\0\x02\x04\x12\x04v\x02{\x03\x1a\x99\x0c\x20Creates\x20an\
    \x20instance\x20and\x20begins\x20preparing\x20it\x20to\x20begin\x20servi\
    ng.\x20The\n\x20returned\x20[long-running\x20operation][google.longrunni\
    ng.Operation]\n\x20can\x20be\x20used\x20to\x20track\x20the\x20progress\
    \x20of\x20preparing\x20the\x20new\n\x20instance.\x20The\x20instance\x20n\
    ame\x20is\x20assigned\x20by\x20the\x20caller.\x20If\x20the\n\x20named\
    \x20instance\x20already\x20exists,\x20`CreateInstance`\x20returns\n\x20`\
    ALREADY_EXISTS`.\n\n\x20Immediately\x20upon\x20completion\x20of\x20this\
    \x20request:\n\n\x20\x20\x20*\x20The\x20instance\x20is\x20readable\x20vi\
    a\x20the\x20API,\x20with\x20all\x20requested\x20attributes\n\x20\x20\x20\
    \x20\x20but\x20no\x20allocated\x20resources.\x20Its\x20state\x20is\x20`C\
    REATING`.\n\n\x20Until\x20completion\x20of\x20the\x20returned\x20operati\
    on:\n\n\x20\x20\x20*\x20Cancelling\x20the\x20operation\x20renders\x20the\
    \x20instance\x20immediately\x20unreadable\n\x20\x20\x20\x20\x20via\x20th\
    e\x20API.\n\x20\x20\x20*\x20The\x20instance\x20can\x20be\x20deleted.\n\
    \x20\x20\x20*\x20All\x20other\x20attempts\x20to\x20modify\x20the\x20inst\
    ance\x20are\x20rejected.\n\n\x20Upon\x20completion\x20of\x20the\x20retur\
    ned\x20operation:\n\n\x20\x20\x20*\x20Billing\x20for\x20all\x20successfu\
    lly-allocated\x20resources\x20begins\x20(some\x20types\n\x20\x20\x20\x20\
    \x20may\x20have\x20lower\x20than\x20the\x20requested\x20levels).\n\x20\
    \x20\x20*\x20Databases\x20can\x20be\x20created\x20in\x20the\x20instance.\
    \n\x20\x20\x20*\x20The\x20instance's\x20allocated\x20resource\x20levels\
    \x20are\x20readable\x20via\x20the\x20API.\n\x20\x20\x20*\x20The\x20insta\
    nce's\x20state\x20becomes\x20`READY`.\n\n\x20The\x20returned\x20[long-ru\
    nning\x20operation][google.longrunning.Operation]\x20will\n\x20have\x20a\
    \x20name\x20of\x20the\x20format\x20`<instance_name>/operations/<operatio\
    n_id>`\x20and\n\x20can\x20be\x20used\x20to\x20track\x20creation\x20of\
    \x20the\x20instance.\x20\x20The\n\x20[metadata][google.longrunning.Opera\
    tion.metadata]\x20field\x20type\x20is\n\x20[CreateInstanceMetadata][goog\
    le.spanner.admin.instance.v1.CreateInstanceMetadata].\n\x20The\x20[respo\
    nse][google.longrunning.Operation.response]\x20field\x20type\x20is\n\x20\
    [Instance][google.spanner.admin.instance.v1.Instance],\x20if\x20successf\
    ul.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03v\x06\x14\n\x0c\n\x05\x06\0\
    \x02\x04\x02\x12\x03v\x15*\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03v5Q\n\r\
    \n\x05\x06\0\x02\x04\x04\x12\x04w\x04z\x06\n\x11\n\t\x06\0\x02\x04\x04\
    \xb0\xca\xbc\"\x12\x04w\x04z\x06\n\xb8\x0f\n\x04\x06\0\x02\x05\x12\x06\
    \xa5\x01\x02\xaa\x01\x03\x1a\xa7\x0f\x20Updates\x20an\x20instance,\x20an\
    d\x20begins\x20allocating\x20or\x20releasing\x20resources\n\x20as\x20req\
    uested.\x20The\x20returned\x20[long-running\n\x20operation][google.longr\
    unning.Operation]\x20can\x20be\x20used\x20to\x20track\x20the\n\x20progre\
    ss\x20of\x20updating\x20the\x20instance.\x20If\x20the\x20named\x20instan\
    ce\x20does\x20not\n\x20exist,\x20returns\x20`NOT_FOUND`.\n\n\x20Immediat\
    ely\x20upon\x20completion\x20of\x20this\x20request:\n\n\x20\x20\x20*\x20\
    For\x20resource\x20types\x20for\x20which\x20a\x20decrease\x20in\x20the\
    \x20instance's\x20allocation\n\x20\x20\x20\x20\x20has\x20been\x20request\
    ed,\x20billing\x20is\x20based\x20on\x20the\x20newly-requested\x20level.\
    \n\n\x20Until\x20completion\x20of\x20the\x20returned\x20operation:\n\n\
    \x20\x20\x20*\x20Cancelling\x20the\x20operation\x20sets\x20its\x20metada\
    ta's\n\x20\x20\x20\x20\x20[cancel_time][google.spanner.admin.instance.v1\
    .UpdateInstanceMetadata.cancel_time],\x20and\x20begins\n\x20\x20\x20\x20\
    \x20restoring\x20resources\x20to\x20their\x20pre-request\x20values.\x20T\
    he\x20operation\n\x20\x20\x20\x20\x20is\x20guaranteed\x20to\x20succeed\
    \x20at\x20undoing\x20all\x20resource\x20changes,\n\x20\x20\x20\x20\x20af\
    ter\x20which\x20point\x20it\x20terminates\x20with\x20a\x20`CANCELLED`\
    \x20status.\n\x20\x20\x20*\x20All\x20other\x20attempts\x20to\x20modify\
    \x20the\x20instance\x20are\x20rejected.\n\x20\x20\x20*\x20Reading\x20the\
    \x20instance\x20via\x20the\x20API\x20continues\x20to\x20give\x20the\x20p\
    re-request\n\x20\x20\x20\x20\x20resource\x20levels.\n\n\x20Upon\x20compl\
    etion\x20of\x20the\x20returned\x20operation:\n\n\x20\x20\x20*\x20Billing\
    \x20begins\x20for\x20all\x20successfully-allocated\x20resources\x20(some\
    \x20types\n\x20\x20\x20\x20\x20may\x20have\x20lower\x20than\x20the\x20re\
    quested\x20levels).\n\x20\x20\x20*\x20All\x20newly-reserved\x20resources\
    \x20are\x20available\x20for\x20serving\x20the\x20instance's\n\x20\x20\
    \x20\x20\x20tables.\n\x20\x20\x20*\x20The\x20instance's\x20new\x20resour\
    ce\x20levels\x20are\x20readable\x20via\x20the\x20API.\n\n\x20The\x20retu\
    rned\x20[long-running\x20operation][google.longrunning.Operation]\x20wil\
    l\n\x20have\x20a\x20name\x20of\x20the\x20format\x20`<instance_name>/oper\
    ations/<operation_id>`\x20and\n\x20can\x20be\x20used\x20to\x20track\x20t\
    he\x20instance\x20modification.\x20\x20The\n\x20[metadata][google.longru\
    nning.Operation.metadata]\x20field\x20type\x20is\n\x20[UpdateInstanceMet\
    adata][google.spanner.admin.instance.v1.UpdateInstanceMetadata].\n\x20Th\
    e\x20[response][google.longrunning.Operation.response]\x20field\x20type\
    \x20is\n\x20[Instance][google.spanner.admin.instance.v1.Instance],\x20if\
    \x20successful.\n\n\x20Authorization\x20requires\x20`spanner.instances.u\
    pdate`\x20permission\x20on\n\x20resource\x20[name][google.spanner.admin.\
    instance.v1.Instance.name].\n\n\r\n\x05\x06\0\x02\x05\x01\x12\x04\xa5\
    \x01\x06\x14\n\r\n\x05\x06\0\x02\x05\x02\x12\x04\xa5\x01\x15*\n\r\n\x05\
    \x06\0\x02\x05\x03\x12\x04\xa5\x015Q\n\x0f\n\x05\x06\0\x02\x05\x04\x12\
    \x06\xa6\x01\x04\xa9\x01\x06\n\x13\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\
    \x12\x06\xa6\x01\x04\xa9\x01\x06\n\xc8\x02\n\x04\x06\0\x02\x06\x12\x06\
    \xb7\x01\x02\xbb\x01\x03\x1a\xb7\x02\x20Deletes\x20an\x20instance.\n\n\
    \x20Immediately\x20upon\x20completion\x20of\x20the\x20request:\n\n\x20\
    \x20\x20*\x20Billing\x20ceases\x20for\x20all\x20of\x20the\x20instance's\
    \x20reserved\x20resources.\n\n\x20Soon\x20afterward:\n\n\x20\x20\x20*\
    \x20The\x20instance\x20and\x20*all\x20of\x20its\x20databases*\x20immedia\
    tely\x20and\n\x20\x20\x20\x20\x20irrevocably\x20disappear\x20from\x20the\
    \x20API.\x20All\x20data\x20in\x20the\x20databases\n\x20\x20\x20\x20\x20i\
    s\x20permanently\x20deleted.\n\n\r\n\x05\x06\0\x02\x06\x01\x12\x04\xb7\
    \x01\x06\x14\n\r\n\x05\x06\0\x02\x06\x02\x12\x04\xb7\x01\x15*\n\r\n\x05\
    \x06\0\x02\x06\x03\x12\x04\xb7\x015J\n\x0f\n\x05\x06\0\x02\x06\x04\x12\
    \x06\xb8\x01\x04\xba\x01\x06\n\x13\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\
    \x12\x06\xb8\x01\x04\xba\x01\x06\n\xdf\x01\n\x04\x06\0\x02\x07\x12\x06\
    \xc2\x01\x02\xc7\x01\x03\x1a\xce\x01\x20Sets\x20the\x20access\x20control\
    \x20policy\x20on\x20an\x20instance\x20resource.\x20Replaces\x20any\n\x20\
    existing\x20policy.\n\n\x20Authorization\x20requires\x20`spanner.instanc\
    es.setIamPolicy`\x20on\n\x20[resource][google.iam.v1.SetIamPolicyRequest\
    .resource].\n\n\r\n\x05\x06\0\x02\x07\x01\x12\x04\xc2\x01\x06\x12\n\r\n\
    \x05\x06\0\x02\x07\x02\x12\x04\xc2\x01\x134\n\r\n\x05\x06\0\x02\x07\x03\
    \x12\x04\xc2\x01?S\n\x0f\n\x05\x06\0\x02\x07\x04\x12\x06\xc3\x01\x04\xc6\
    \x01\x06\n\x13\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\"\x12\x06\xc3\x01\x04\
    \xc6\x01\x06\n\x90\x02\n\x04\x06\0\x02\x08\x12\x06\xce\x01\x02\xd3\x01\
    \x03\x1a\xff\x01\x20Gets\x20the\x20access\x20control\x20policy\x20for\
    \x20an\x20instance\x20resource.\x20Returns\x20an\x20empty\n\x20policy\
    \x20if\x20an\x20instance\x20exists\x20but\x20does\x20not\x20have\x20a\
    \x20policy\x20set.\n\n\x20Authorization\x20requires\x20`spanner.instance\
    s.getIamPolicy`\x20on\n\x20[resource][google.iam.v1.GetIamPolicyRequest.\
    resource].\n\n\r\n\x05\x06\0\x02\x08\x01\x12\x04\xce\x01\x06\x12\n\r\n\
    \x05\x06\0\x02\x08\x02\x12\x04\xce\x01\x134\n\r\n\x05\x06\0\x02\x08\x03\
    \x12\x04\xce\x01?S\n\x0f\n\x05\x06\0\x02\x08\x04\x12\x06\xcf\x01\x04\xd2\
    \x01\x06\n\x13\n\t\x06\0\x02\x08\x04\xb0\xca\xbc\"\x12\x06\xcf\x01\x04\
    \xd2\x01\x06\n\xd5\x02\n\x04\x06\0\x02\t\x12\x06\xdb\x01\x02\xe0\x01\x03\
    \x1a\xc4\x02\x20Returns\x20permissions\x20that\x20the\x20caller\x20has\
    \x20on\x20the\x20specified\x20instance\x20resource.\n\n\x20Attempting\
    \x20this\x20RPC\x20on\x20a\x20non-existent\x20Cloud\x20Spanner\x20instan\
    ce\x20resource\x20will\n\x20result\x20in\x20a\x20NOT_FOUND\x20error\x20i\
    f\x20the\x20user\x20has\x20`spanner.instances.list`\n\x20permission\x20o\
    n\x20the\x20containing\x20Google\x20Cloud\x20Project.\x20Otherwise\x20re\
    turns\x20an\n\x20empty\x20set\x20of\x20permissions.\n\n\r\n\x05\x06\0\
    \x02\t\x01\x12\x04\xdb\x01\x06\x18\n\r\n\x05\x06\0\x02\t\x02\x12\x04\xdb\
    \x01\x19@\n\r\n\x05\x06\0\x02\t\x03\x12\x04\xdb\x01Ks\n\x0f\n\x05\x06\0\
    \x02\t\x04\x12\x06\xdc\x01\x04\xdf\x01\x06\n\x13\n\t\x06\0\x02\t\x04\xb0\
    \xca\xbc\"\x12\x06\xdc\x01\x04\xdf\x01\x06\n\x97\x01\n\x02\x04\0\x12\x06\
    \xe5\x01\0\xed\x01\x01\x1a\x88\x01\x20A\x20possible\x20configuration\x20\
    for\x20a\x20Cloud\x20Spanner\x20instance.\x20Configurations\n\x20define\
    \x20the\x20geographic\x20placement\x20of\x20nodes\x20and\x20their\x20rep\
    lication.\n\n\x0b\n\x03\x04\0\x01\x12\x04\xe5\x01\x08\x16\n\x93\x01\n\
    \x04\x04\0\x02\0\x12\x04\xe9\x01\x02\x12\x1a\x84\x01\x20A\x20unique\x20i\
    dentifier\x20for\x20the\x20instance\x20configuration.\x20\x20Values\n\
    \x20are\x20of\x20the\x20form\n\x20`projects/<project>/instanceConfigs/[a\
    -z][-a-z0-9]*`\n\n\x0f\n\x05\x04\0\x02\0\x04\x12\x06\xe9\x01\x02\xe5\x01\
    \x18\n\r\n\x05\x04\0\x02\0\x05\x12\x04\xe9\x01\x02\x08\n\r\n\x05\x04\0\
    \x02\0\x01\x12\x04\xe9\x01\t\r\n\r\n\x05\x04\0\x02\0\x03\x12\x04\xe9\x01\
    \x10\x11\nM\n\x04\x04\0\x02\x01\x12\x04\xec\x01\x02\x1a\x1a?\x20The\x20n\
    ame\x20of\x20this\x20instance\x20configuration\x20as\x20it\x20appears\
    \x20in\x20UIs.\n\n\x0f\n\x05\x04\0\x02\x01\x04\x12\x06\xec\x01\x02\xe9\
    \x01\x12\n\r\n\x05\x04\0\x02\x01\x05\x12\x04\xec\x01\x02\x08\n\r\n\x05\
    \x04\0\x02\x01\x01\x12\x04\xec\x01\t\x15\n\r\n\x05\x04\0\x02\x01\x03\x12\
    \x04\xec\x01\x18\x19\n\\\n\x02\x04\x01\x12\x06\xf0\x01\0\xb4\x02\x01\x1a\
    N\x20An\x20isolated\x20set\x20of\x20Cloud\x20Spanner\x20resources\x20on\
    \x20which\x20databases\x20can\x20be\x20hosted.\n\n\x0b\n\x03\x04\x01\x01\
    \x12\x04\xf0\x01\x08\x10\n>\n\x04\x04\x01\x04\0\x12\x06\xf2\x01\x02\xfe\
    \x01\x03\x1a.\x20Indicates\x20the\x20current\x20state\x20of\x20the\x20in\
    stance.\n\n\r\n\x05\x04\x01\x04\0\x01\x12\x04\xf2\x01\x07\x0c\n\x20\n\
    \x06\x04\x01\x04\0\x02\0\x12\x04\xf4\x01\x04\x1a\x1a\x10\x20Not\x20speci\
    fied.\n\n\x0f\n\x07\x04\x01\x04\0\x02\0\x01\x12\x04\xf4\x01\x04\x15\n\
    \x0f\n\x07\x04\x01\x04\0\x02\0\x02\x12\x04\xf4\x01\x18\x19\n\x94\x01\n\
    \x06\x04\x01\x04\0\x02\x01\x12\x04\xf9\x01\x04\x11\x1a\x83\x01\x20The\
    \x20instance\x20is\x20still\x20being\x20created.\x20Resources\x20may\x20\
    not\x20be\n\x20available\x20yet,\x20and\x20operations\x20such\x20as\x20d\
    atabase\x20creation\x20may\x20not\n\x20work.\n\n\x0f\n\x07\x04\x01\x04\0\
    \x02\x01\x01\x12\x04\xf9\x01\x04\x0c\n\x0f\n\x07\x04\x01\x04\0\x02\x01\
    \x02\x12\x04\xf9\x01\x0f\x10\na\n\x06\x04\x01\x04\0\x02\x02\x12\x04\xfd\
    \x01\x04\x0e\x1aQ\x20The\x20instance\x20is\x20fully\x20created\x20and\
    \x20ready\x20to\x20do\x20work\x20such\x20as\n\x20creating\x20databases.\
    \n\n\x0f\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x04\xfd\x01\x04\t\n\x0f\n\
    \x07\x04\x01\x04\0\x02\x02\x02\x12\x04\xfd\x01\x0c\r\n\x96\x02\n\x04\x04\
    \x01\x02\0\x12\x04\x84\x02\x02\x12\x1a\x87\x02\x20Required.\x20A\x20uniq\
    ue\x20identifier\x20for\x20the\x20instance,\x20which\x20cannot\x20be\x20\
    changed\n\x20after\x20the\x20instance\x20is\x20created.\x20Values\x20are\
    \x20of\x20the\x20form\n\x20`projects/<project>/instances/[a-z][-a-z0-9]*\
    [a-z0-9]`.\x20The\x20final\n\x20segment\x20of\x20the\x20name\x20must\x20\
    be\x20between\x206\x20and\x2030\x20characters\x20in\x20length.\n\n\x0f\n\
    \x05\x04\x01\x02\0\x04\x12\x06\x84\x02\x02\xfe\x01\x03\n\r\n\x05\x04\x01\
    \x02\0\x05\x12\x04\x84\x02\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\
    \x84\x02\t\r\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\x84\x02\x10\x11\n\xbe\
    \x02\n\x04\x04\x01\x02\x01\x12\x04\x8a\x02\x02\x14\x1a\xaf\x02\x20Requir\
    ed.\x20The\x20name\x20of\x20the\x20instance's\x20configuration.\x20Value\
    s\x20are\x20of\x20the\x20form\n\x20`projects/<project>/instanceConfigs/<\
    configuration>`.\x20See\n\x20also\x20[InstanceConfig][google.spanner.adm\
    in.instance.v1.InstanceConfig]\x20and\n\x20[ListInstanceConfigs][google.\
    spanner.admin.instance.v1.InstanceAdmin.ListInstanceConfigs].\n\n\x0f\n\
    \x05\x04\x01\x02\x01\x04\x12\x06\x8a\x02\x02\x84\x02\x12\n\r\n\x05\x04\
    \x01\x02\x01\x05\x12\x04\x8a\x02\x02\x08\n\r\n\x05\x04\x01\x02\x01\x01\
    \x12\x04\x8a\x02\t\x0f\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\x8a\x02\x12\
    \x13\n\x9e\x01\n\x04\x04\x01\x02\x02\x12\x04\x8e\x02\x02\x1a\x1a\x8f\x01\
    \x20Required.\x20The\x20descriptive\x20name\x20for\x20this\x20instance\
    \x20as\x20it\x20appears\x20in\x20UIs.\n\x20Must\x20be\x20unique\x20per\
    \x20project\x20and\x20between\x204\x20and\x2030\x20characters\x20in\x20l\
    ength.\n\n\x0f\n\x05\x04\x01\x02\x02\x04\x12\x06\x8e\x02\x02\x8a\x02\x14\
    \n\r\n\x05\x04\x01\x02\x02\x05\x12\x04\x8e\x02\x02\x08\n\r\n\x05\x04\x01\
    \x02\x02\x01\x12\x04\x8e\x02\t\x15\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\
    \x8e\x02\x18\x19\n\x97\x02\n\x04\x04\x01\x02\x03\x12\x04\x95\x02\x02\x17\
    \x1a\x88\x02\x20Required.\x20The\x20number\x20of\x20nodes\x20allocated\
    \x20to\x20this\x20instance.\x20This\x20may\x20be\x20zero\n\x20in\x20API\
    \x20responses\x20for\x20instances\x20that\x20are\x20not\x20yet\x20in\x20\
    state\x20`READY`.\n\n\x20See\x20[the\x20documentation](https://cloud.goo\
    gle.com/spanner/docs/instances#node_count)\n\x20for\x20more\x20informati\
    on\x20about\x20nodes.\n\n\x0f\n\x05\x04\x01\x02\x03\x04\x12\x06\x95\x02\
    \x02\x8e\x02\x1a\n\r\n\x05\x04\x01\x02\x03\x05\x12\x04\x95\x02\x02\x07\n\
    \r\n\x05\x04\x01\x02\x03\x01\x12\x04\x95\x02\x08\x12\n\r\n\x05\x04\x01\
    \x02\x03\x03\x12\x04\x95\x02\x15\x16\n\xd2\x02\n\x04\x04\x01\x02\x04\x12\
    \x04\x9c\x02\x02\x12\x1a\xc3\x02\x20Output\x20only.\x20The\x20current\
    \x20instance\x20state.\x20For\n\x20[CreateInstance][google.spanner.admin\
    .instance.v1.InstanceAdmin.CreateInstance],\x20the\x20state\x20must\x20b\
    e\n\x20either\x20omitted\x20or\x20set\x20to\x20`CREATING`.\x20For\n\x20[\
    UpdateInstance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateIns\
    tance],\x20the\x20state\x20must\x20be\n\x20either\x20omitted\x20or\x20se\
    t\x20to\x20`READY`.\n\n\x0f\n\x05\x04\x01\x02\x04\x04\x12\x06\x9c\x02\
    \x02\x95\x02\x17\n\r\n\x05\x04\x01\x02\x04\x06\x12\x04\x9c\x02\x02\x07\n\
    \r\n\x05\x04\x01\x02\x04\x01\x12\x04\x9c\x02\x08\r\n\r\n\x05\x04\x01\x02\
    \x04\x03\x12\x04\x9c\x02\x10\x11\n\xe3\t\n\x04\x04\x01\x02\x05\x12\x04\
    \xb3\x02\x02!\x1a\xd4\t\x20Cloud\x20Labels\x20are\x20a\x20flexible\x20an\
    d\x20lightweight\x20mechanism\x20for\x20organizing\x20cloud\n\x20resourc\
    es\x20into\x20groups\x20that\x20reflect\x20a\x20customer's\x20organizati\
    onal\x20needs\x20and\n\x20deployment\x20strategies.\x20Cloud\x20Labels\
    \x20can\x20be\x20used\x20to\x20filter\x20collections\x20of\n\x20resource\
    s.\x20They\x20can\x20be\x20used\x20to\x20control\x20how\x20resource\x20m\
    etrics\x20are\x20aggregated.\n\x20And\x20they\x20can\x20be\x20used\x20as\
    \x20arguments\x20to\x20policy\x20management\x20rules\x20(e.g.\x20route,\
    \n\x20firewall,\x20load\x20balancing,\x20etc.).\n\n\x20\x20*\x20Label\
    \x20keys\x20must\x20be\x20between\x201\x20and\x2063\x20characters\x20lon\
    g\x20and\x20must\x20conform\x20to\n\x20\x20\x20\x20the\x20following\x20r\
    egular\x20expression:\x20`[a-z]([-a-z0-9]*[a-z0-9])?`.\n\x20\x20*\x20Lab\
    el\x20values\x20must\x20be\x20between\x200\x20and\x2063\x20characters\
    \x20long\x20and\x20must\x20conform\n\x20\x20\x20\x20to\x20the\x20regular\
    \x20expression\x20`([a-z]([-a-z0-9]*[a-z0-9])?)?`.\n\x20\x20*\x20No\x20m\
    ore\x20than\x2064\x20labels\x20can\x20be\x20associated\x20with\x20a\x20g\
    iven\x20resource.\n\n\x20See\x20https://goo.gl/xmQnxf\x20for\x20more\x20\
    information\x20on\x20and\x20examples\x20of\x20labels.\n\n\x20If\x20you\
    \x20plan\x20to\x20use\x20labels\x20in\x20your\x20own\x20code,\x20please\
    \x20note\x20that\x20additional\n\x20characters\x20may\x20be\x20allowed\
    \x20in\x20the\x20future.\x20And\x20so\x20you\x20are\x20advised\x20to\x20\
    use\x20an\n\x20internal\x20label\x20representation,\x20such\x20as\x20JSO\
    N,\x20which\x20doesn't\x20rely\x20upon\n\x20specific\x20characters\x20be\
    ing\x20disallowed.\x20\x20For\x20example,\x20representing\x20labels\n\
    \x20as\x20the\x20string:\x20\x20name\x20+\x20\"_\"\x20+\x20value\x20\x20\
    would\x20prove\x20problematic\x20if\x20we\x20were\x20to\n\x20allow\x20\"\
    _\"\x20in\x20a\x20future\x20release.\n\n\x0f\n\x05\x04\x01\x02\x05\x04\
    \x12\x06\xb3\x02\x02\x9c\x02\x12\n\r\n\x05\x04\x01\x02\x05\x06\x12\x04\
    \xb3\x02\x02\x15\n\r\n\x05\x04\x01\x02\x05\x01\x12\x04\xb3\x02\x16\x1c\n\
    \r\n\x05\x04\x01\x02\x05\x03\x12\x04\xb3\x02\x1f\x20\nz\n\x02\x04\x02\
    \x12\x06\xb7\x02\0\xc5\x02\x01\x1al\x20The\x20request\x20for\x20[ListIns\
    tanceConfigs][google.spanner.admin.instance.v1.InstanceAdmin.ListInstanc\
    eConfigs].\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xb7\x02\x08\"\n\xa5\x01\n\
    \x04\x04\x02\x02\0\x12\x04\xbb\x02\x02\x14\x1a\x96\x01\x20Required.\x20T\
    he\x20name\x20of\x20the\x20project\x20for\x20which\x20a\x20list\x20of\
    \x20supported\x20instance\n\x20configurations\x20is\x20requested.\x20Val\
    ues\x20are\x20of\x20the\x20form\n\x20`projects/<project>`.\n\n\x0f\n\x05\
    \x04\x02\x02\0\x04\x12\x06\xbb\x02\x02\xb7\x02$\n\r\n\x05\x04\x02\x02\0\
    \x05\x12\x04\xbb\x02\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xbb\x02\
    \t\x0f\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xbb\x02\x12\x13\n\x95\x01\n\
    \x04\x04\x02\x02\x01\x12\x04\xbf\x02\x02\x16\x1a\x86\x01\x20Number\x20of\
    \x20instance\x20configurations\x20to\x20be\x20returned\x20in\x20the\x20r\
    esponse.\x20If\x200\x20or\n\x20less,\x20defaults\x20to\x20the\x20server'\
    s\x20maximum\x20allowed\x20page\x20size.\n\n\x0f\n\x05\x04\x02\x02\x01\
    \x04\x12\x06\xbf\x02\x02\xbb\x02\x14\n\r\n\x05\x04\x02\x02\x01\x05\x12\
    \x04\xbf\x02\x02\x07\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\xbf\x02\x08\
    \x11\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xbf\x02\x14\x15\n\x8b\x02\n\
    \x04\x04\x02\x02\x02\x12\x04\xc4\x02\x02\x18\x1a\xfc\x01\x20If\x20non-em\
    pty,\x20`page_token`\x20should\x20contain\x20a\n\x20[next_page_token][go\
    ogle.spanner.admin.instance.v1.ListInstanceConfigsResponse.next_page_tok\
    en]\n\x20from\x20a\x20previous\x20[ListInstanceConfigsResponse][google.s\
    panner.admin.instance.v1.ListInstanceConfigsResponse].\n\n\x0f\n\x05\x04\
    \x02\x02\x02\x04\x12\x06\xc4\x02\x02\xbf\x02\x16\n\r\n\x05\x04\x02\x02\
    \x02\x05\x12\x04\xc4\x02\x02\x08\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\
    \xc4\x02\t\x13\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\xc4\x02\x16\x17\n{\
    \n\x02\x04\x03\x12\x06\xc8\x02\0\xd0\x02\x01\x1am\x20The\x20response\x20\
    for\x20[ListInstanceConfigs][google.spanner.admin.instance.v1.InstanceAd\
    min.ListInstanceConfigs].\n\n\x0b\n\x03\x04\x03\x01\x12\x04\xc8\x02\x08#\
    \n>\n\x04\x04\x03\x02\0\x12\x04\xca\x02\x02/\x1a0\x20The\x20list\x20of\
    \x20requested\x20instance\x20configurations.\n\n\r\n\x05\x04\x03\x02\0\
    \x04\x12\x04\xca\x02\x02\n\n\r\n\x05\x04\x03\x02\0\x06\x12\x04\xca\x02\
    \x0b\x19\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xca\x02\x1a*\n\r\n\x05\x04\
    \x03\x02\0\x03\x12\x04\xca\x02-.\n\xd6\x01\n\x04\x04\x03\x02\x01\x12\x04\
    \xcf\x02\x02\x1d\x1a\xc7\x01\x20`next_page_token`\x20can\x20be\x20sent\
    \x20in\x20a\x20subsequent\n\x20[ListInstanceConfigs][google.spanner.admi\
    n.instance.v1.InstanceAdmin.ListInstanceConfigs]\x20call\x20to\n\x20fetc\
    h\x20more\x20of\x20the\x20matching\x20instance\x20configurations.\n\n\
    \x0f\n\x05\x04\x03\x02\x01\x04\x12\x06\xcf\x02\x02\xca\x02/\n\r\n\x05\
    \x04\x03\x02\x01\x05\x12\x04\xcf\x02\x02\x08\n\r\n\x05\x04\x03\x02\x01\
    \x01\x12\x04\xcf\x02\t\x18\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xcf\x02\
    \x1b\x1c\n~\n\x02\x04\x04\x12\x06\xd4\x02\0\xd8\x02\x01\x1ap\x20The\x20r\
    equest\x20for\n\x20[GetInstanceConfigRequest][google.spanner.admin.insta\
    nce.v1.InstanceAdmin.GetInstanceConfig].\n\n\x0b\n\x03\x04\x04\x01\x12\
    \x04\xd4\x02\x08\x20\n\x93\x01\n\x04\x04\x04\x02\0\x12\x04\xd7\x02\x02\
    \x12\x1a\x84\x01\x20Required.\x20The\x20name\x20of\x20the\x20requested\
    \x20instance\x20configuration.\x20Values\x20are\x20of\n\x20the\x20form\
    \x20`projects/<project>/instanceConfigs/<config>`.\n\n\x0f\n\x05\x04\x04\
    \x02\0\x04\x12\x06\xd7\x02\x02\xd4\x02\"\n\r\n\x05\x04\x04\x02\0\x05\x12\
    \x04\xd7\x02\x02\x08\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xd7\x02\t\r\n\r\
    \n\x05\x04\x04\x02\0\x03\x12\x04\xd7\x02\x10\x11\nj\n\x02\x04\x05\x12\
    \x06\xdb\x02\0\xdf\x02\x01\x1a\\\x20The\x20request\x20for\x20[GetInstanc\
    e][google.spanner.admin.instance.v1.InstanceAdmin.GetInstance].\n\n\x0b\
    \n\x03\x04\x05\x01\x12\x04\xdb\x02\x08\x1a\n\x80\x01\n\x04\x04\x05\x02\0\
    \x12\x04\xde\x02\x02\x12\x1ar\x20Required.\x20The\x20name\x20of\x20the\
    \x20requested\x20instance.\x20Values\x20are\x20of\x20the\x20form\n\x20`p\
    rojects/<project>/instances/<instance>`.\n\n\x0f\n\x05\x04\x05\x02\0\x04\
    \x12\x06\xde\x02\x02\xdb\x02\x1c\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\xde\
    \x02\x02\x08\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xde\x02\t\r\n\r\n\x05\
    \x04\x05\x02\0\x03\x12\x04\xde\x02\x10\x11\np\n\x02\x04\x06\x12\x06\xe2\
    \x02\0\xef\x02\x01\x1ab\x20The\x20request\x20for\x20[CreateInstance][goo\
    gle.spanner.admin.instance.v1.InstanceAdmin.CreateInstance].\n\n\x0b\n\
    \x03\x04\x06\x01\x12\x04\xe2\x02\x08\x1d\n\x80\x01\n\x04\x04\x06\x02\0\
    \x12\x04\xe5\x02\x02\x14\x1ar\x20Required.\x20The\x20name\x20of\x20the\
    \x20project\x20in\x20which\x20to\x20create\x20the\x20instance.\x20Values\
    \n\x20are\x20of\x20the\x20form\x20`projects/<project>`.\n\n\x0f\n\x05\
    \x04\x06\x02\0\x04\x12\x06\xe5\x02\x02\xe2\x02\x1f\n\r\n\x05\x04\x06\x02\
    \0\x05\x12\x04\xe5\x02\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xe5\
    \x02\t\x0f\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xe5\x02\x12\x13\n\xae\x01\
    \n\x04\x04\x06\x02\x01\x12\x04\xea\x02\x02\x19\x1a\x9f\x01\x20Required.\
    \x20The\x20ID\x20of\x20the\x20instance\x20to\x20create.\x20\x20Valid\x20\
    identifiers\x20are\x20of\x20the\n\x20form\x20`[a-z][-a-z0-9]*[a-z0-9]`\
    \x20and\x20must\x20be\x20between\x206\x20and\x2030\x20characters\x20in\n\
    \x20length.\n\n\x0f\n\x05\x04\x06\x02\x01\x04\x12\x06\xea\x02\x02\xe5\
    \x02\x14\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xea\x02\x02\x08\n\r\n\x05\
    \x04\x06\x02\x01\x01\x12\x04\xea\x02\t\x14\n\r\n\x05\x04\x06\x02\x01\x03\
    \x12\x04\xea\x02\x17\x18\n\x89\x01\n\x04\x04\x06\x02\x02\x12\x04\xee\x02\
    \x02\x18\x1a{\x20Required.\x20The\x20instance\x20to\x20create.\x20\x20Th\
    e\x20name\x20may\x20be\x20omitted,\x20but\x20if\n\x20specified\x20must\
    \x20be\x20`<parent>/instances/<instance_id>`.\n\n\x0f\n\x05\x04\x06\x02\
    \x02\x04\x12\x06\xee\x02\x02\xea\x02\x19\n\r\n\x05\x04\x06\x02\x02\x06\
    \x12\x04\xee\x02\x02\n\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\xee\x02\x0b\
    \x13\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\xee\x02\x16\x17\nn\n\x02\x04\
    \x07\x12\x06\xf2\x02\0\x94\x03\x01\x1a`\x20The\x20request\x20for\x20[Lis\
    tInstances][google.spanner.admin.instance.v1.InstanceAdmin.ListInstances\
    ].\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xf2\x02\x08\x1c\n\x8b\x01\n\x04\x04\
    \x07\x02\0\x12\x04\xf5\x02\x02\x14\x1a}\x20Required.\x20The\x20name\x20o\
    f\x20the\x20project\x20for\x20which\x20a\x20list\x20of\x20instances\x20i\
    s\n\x20requested.\x20Values\x20are\x20of\x20the\x20form\x20`projects/<pr\
    oject>`.\n\n\x0f\n\x05\x04\x07\x02\0\x04\x12\x06\xf5\x02\x02\xf2\x02\x1e\
    \n\r\n\x05\x04\x07\x02\0\x05\x12\x04\xf5\x02\x02\x08\n\r\n\x05\x04\x07\
    \x02\0\x01\x12\x04\xf5\x02\t\x0f\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xf5\
    \x02\x12\x13\n\x86\x01\n\x04\x04\x07\x02\x01\x12\x04\xf9\x02\x02\x16\x1a\
    x\x20Number\x20of\x20instances\x20to\x20be\x20returned\x20in\x20the\x20r\
    esponse.\x20If\x200\x20or\x20less,\x20defaults\n\x20to\x20the\x20server'\
    s\x20maximum\x20allowed\x20page\x20size.\n\n\x0f\n\x05\x04\x07\x02\x01\
    \x04\x12\x06\xf9\x02\x02\xf5\x02\x14\n\r\n\x05\x04\x07\x02\x01\x05\x12\
    \x04\xf9\x02\x02\x07\n\r\n\x05\x04\x07\x02\x01\x01\x12\x04\xf9\x02\x08\
    \x11\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\xf9\x02\x14\x15\n\xf9\x01\n\
    \x04\x04\x07\x02\x02\x12\x04\xfe\x02\x02\x18\x1a\xea\x01\x20If\x20non-em\
    pty,\x20`page_token`\x20should\x20contain\x20a\n\x20[next_page_token][go\
    ogle.spanner.admin.instance.v1.ListInstancesResponse.next_page_token]\
    \x20from\x20a\n\x20previous\x20[ListInstancesResponse][google.spanner.ad\
    min.instance.v1.ListInstancesResponse].\n\n\x0f\n\x05\x04\x07\x02\x02\
    \x04\x12\x06\xfe\x02\x02\xf9\x02\x16\n\r\n\x05\x04\x07\x02\x02\x05\x12\
    \x04\xfe\x02\x02\x08\n\r\n\x05\x04\x07\x02\x02\x01\x12\x04\xfe\x02\t\x13\
    \n\r\n\x05\x04\x07\x02\x02\x03\x12\x04\xfe\x02\x16\x17\n\xdd\x06\n\x04\
    \x04\x07\x02\x03\x12\x04\x93\x03\x02\x14\x1a\xce\x06\x20An\x20expression\
    \x20for\x20filtering\x20the\x20results\x20of\x20the\x20request.\x20Filte\
    r\x20rules\x20are\n\x20case\x20insensitive.\x20The\x20fields\x20eligible\
    \x20for\x20filtering\x20are:\n\n\x20\x20\x20*\x20`name`\n\x20\x20\x20*\
    \x20`display_name`\n\x20\x20\x20*\x20`labels.key`\x20where\x20key\x20is\
    \x20the\x20name\x20of\x20a\x20label\n\n\x20Some\x20examples\x20of\x20usi\
    ng\x20filters\x20are:\n\n\x20\x20\x20*\x20`name:*`\x20-->\x20The\x20inst\
    ance\x20has\x20a\x20name.\n\x20\x20\x20*\x20`name:Howl`\x20-->\x20The\
    \x20instance's\x20name\x20contains\x20the\x20string\x20\"howl\".\n\x20\
    \x20\x20*\x20`name:HOWL`\x20-->\x20Equivalent\x20to\x20above.\n\x20\x20\
    \x20*\x20`NAME:howl`\x20-->\x20Equivalent\x20to\x20above.\n\x20\x20\x20*\
    \x20`labels.env:*`\x20-->\x20The\x20instance\x20has\x20the\x20label\x20\
    \"env\".\n\x20\x20\x20*\x20`labels.env:dev`\x20-->\x20The\x20instance\
    \x20has\x20the\x20label\x20\"env\"\x20and\x20the\x20value\x20of\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20the\x20label\x20contains\x20the\x20string\x20\"dev\"\
    .\n\x20\x20\x20*\x20`name:howl\x20labels.env:dev`\x20-->\x20The\x20insta\
    nce's\x20name\x20contains\x20\"howl\"\x20and\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20it\x20has\x20the\x20label\x20\"e\
    nv\"\x20with\x20its\x20value\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20containing\x20\"dev\".\n\n\x0f\n\x05\x04\x07\x02\
    \x03\x04\x12\x06\x93\x03\x02\xfe\x02\x18\n\r\n\x05\x04\x07\x02\x03\x05\
    \x12\x04\x93\x03\x02\x08\n\r\n\x05\x04\x07\x02\x03\x01\x12\x04\x93\x03\t\
    \x0f\n\r\n\x05\x04\x07\x02\x03\x03\x12\x04\x93\x03\x12\x13\no\n\x02\x04\
    \x08\x12\x06\x97\x03\0\x9f\x03\x01\x1aa\x20The\x20response\x20for\x20[Li\
    stInstances][google.spanner.admin.instance.v1.InstanceAdmin.ListInstance\
    s].\n\n\x0b\n\x03\x04\x08\x01\x12\x04\x97\x03\x08\x1d\n0\n\x04\x04\x08\
    \x02\0\x12\x04\x99\x03\x02\"\x1a\"\x20The\x20list\x20of\x20requested\x20\
    instances.\n\n\r\n\x05\x04\x08\x02\0\x04\x12\x04\x99\x03\x02\n\n\r\n\x05\
    \x04\x08\x02\0\x06\x12\x04\x99\x03\x0b\x13\n\r\n\x05\x04\x08\x02\0\x01\
    \x12\x04\x99\x03\x14\x1d\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\x99\x03\x20\
    !\n\xbc\x01\n\x04\x04\x08\x02\x01\x12\x04\x9e\x03\x02\x1d\x1a\xad\x01\
    \x20`next_page_token`\x20can\x20be\x20sent\x20in\x20a\x20subsequent\n\
    \x20[ListInstances][google.spanner.admin.instance.v1.InstanceAdmin.ListI\
    nstances]\x20call\x20to\x20fetch\x20more\n\x20of\x20the\x20matching\x20i\
    nstances.\n\n\x0f\n\x05\x04\x08\x02\x01\x04\x12\x06\x9e\x03\x02\x99\x03\
    \"\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\x9e\x03\x02\x08\n\r\n\x05\x04\
    \x08\x02\x01\x01\x12\x04\x9e\x03\t\x18\n\r\n\x05\x04\x08\x02\x01\x03\x12\
    \x04\x9e\x03\x1b\x1c\np\n\x02\x04\t\x12\x06\xa2\x03\0\xac\x03\x01\x1ab\
    \x20The\x20request\x20for\x20[UpdateInstance][google.spanner.admin.insta\
    nce.v1.InstanceAdmin.UpdateInstance].\n\n\x0b\n\x03\x04\t\x01\x12\x04\
    \xa2\x03\x08\x1d\n\xdd\x01\n\x04\x04\t\x02\0\x12\x04\xa5\x03\x02\x18\x1a\
    \xce\x01\x20Required.\x20The\x20instance\x20to\x20update,\x20which\x20mu\
    st\x20always\x20include\x20the\x20instance\n\x20name.\x20\x20Otherwise,\
    \x20only\x20fields\x20mentioned\x20in\x20[][google.spanner.admin.instanc\
    e.v1.UpdateInstanceRequest.field_mask]\x20need\x20be\x20included.\n\n\
    \x0f\n\x05\x04\t\x02\0\x04\x12\x06\xa5\x03\x02\xa2\x03\x1f\n\r\n\x05\x04\
    \t\x02\0\x06\x12\x04\xa5\x03\x02\n\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xa5\
    \x03\x0b\x13\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xa5\x03\x16\x17\n\xd7\x02\
    \n\x04\x04\t\x02\x01\x12\x04\xab\x03\x02+\x1a\xc8\x02\x20Required.\x20A\
    \x20mask\x20specifying\x20which\x20fields\x20in\x20[][google.spanner.adm\
    in.instance.v1.UpdateInstanceRequest.instance]\x20should\x20be\x20update\
    d.\n\x20The\x20field\x20mask\x20must\x20always\x20be\x20specified;\x20th\
    is\x20prevents\x20any\x20future\x20fields\x20in\n\x20[][google.spanner.a\
    dmin.instance.v1.Instance]\x20from\x20being\x20erased\x20accidentally\
    \x20by\x20clients\x20that\x20do\x20not\x20know\n\x20about\x20them.\n\n\
    \x0f\n\x05\x04\t\x02\x01\x04\x12\x06\xab\x03\x02\xa5\x03\x18\n\r\n\x05\
    \x04\t\x02\x01\x06\x12\x04\xab\x03\x02\x1b\n\r\n\x05\x04\t\x02\x01\x01\
    \x12\x04\xab\x03\x1c&\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\xab\x03)*\np\n\
    \x02\x04\n\x12\x06\xaf\x03\0\xb3\x03\x01\x1ab\x20The\x20request\x20for\
    \x20[DeleteInstance][google.spanner.admin.instance.v1.InstanceAdmin.Dele\
    teInstance].\n\n\x0b\n\x03\x04\n\x01\x12\x04\xaf\x03\x08\x1d\n\x83\x01\n\
    \x04\x04\n\x02\0\x12\x04\xb2\x03\x02\x12\x1au\x20Required.\x20The\x20nam\
    e\x20of\x20the\x20instance\x20to\x20be\x20deleted.\x20Values\x20are\x20o\
    f\x20the\x20form\n\x20`projects/<project>/instances/<instance>`\n\n\x0f\
    \n\x05\x04\n\x02\0\x04\x12\x06\xb2\x03\x02\xaf\x03\x1f\n\r\n\x05\x04\n\
    \x02\0\x05\x12\x04\xb2\x03\x02\x08\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xb2\
    \x03\t\r\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xb2\x03\x10\x11\n\x8d\x01\n\
    \x02\x04\x0b\x12\x06\xb7\x03\0\xc7\x03\x01\x1a\x7f\x20Metadata\x20type\
    \x20for\x20the\x20operation\x20returned\x20by\n\x20[CreateInstance][goog\
    le.spanner.admin.instance.v1.InstanceAdmin.CreateInstance].\n\n\x0b\n\
    \x03\x04\x0b\x01\x12\x04\xb7\x03\x08\x1e\n+\n\x04\x04\x0b\x02\0\x12\x04\
    \xb9\x03\x02\x18\x1a\x1d\x20The\x20instance\x20being\x20created.\n\n\x0f\
    \n\x05\x04\x0b\x02\0\x04\x12\x06\xb9\x03\x02\xb7\x03\x20\n\r\n\x05\x04\
    \x0b\x02\0\x06\x12\x04\xb9\x03\x02\n\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\
    \xb9\x03\x0b\x13\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xb9\x03\x16\x17\n\
    \x8d\x01\n\x04\x04\x0b\x02\x01\x12\x04\xbe\x03\x02+\x1a\x7f\x20The\x20ti\
    me\x20at\x20which\x20the\n\x20[CreateInstance][google.spanner.admin.inst\
    ance.v1.InstanceAdmin.CreateInstance]\x20request\x20was\n\x20received.\n\
    \n\x0f\n\x05\x04\x0b\x02\x01\x04\x12\x06\xbe\x03\x02\xb9\x03\x18\n\r\n\
    \x05\x04\x0b\x02\x01\x06\x12\x04\xbe\x03\x02\x1b\n\r\n\x05\x04\x0b\x02\
    \x01\x01\x12\x04\xbe\x03\x1c&\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\xbe\
    \x03)*\n\xbd\x01\n\x04\x04\x0b\x02\x02\x12\x04\xc3\x03\x02,\x1a\xae\x01\
    \x20The\x20time\x20at\x20which\x20this\x20operation\x20was\x20cancelled.\
    \x20If\x20set,\x20this\x20operation\x20is\n\x20in\x20the\x20process\x20o\
    f\x20undoing\x20itself\x20(which\x20is\x20guaranteed\x20to\x20succeed)\
    \x20and\n\x20cannot\x20be\x20cancelled\x20again.\n\n\x0f\n\x05\x04\x0b\
    \x02\x02\x04\x12\x06\xc3\x03\x02\xbe\x03+\n\r\n\x05\x04\x0b\x02\x02\x06\
    \x12\x04\xc3\x03\x02\x1b\n\r\n\x05\x04\x0b\x02\x02\x01\x12\x04\xc3\x03\
    \x1c'\n\r\n\x05\x04\x0b\x02\x02\x03\x12\x04\xc3\x03*+\nV\n\x04\x04\x0b\
    \x02\x03\x12\x04\xc6\x03\x02)\x1aH\x20The\x20time\x20at\x20which\x20this\
    \x20operation\x20failed\x20or\x20was\x20completed\x20successfully.\n\n\
    \x0f\n\x05\x04\x0b\x02\x03\x04\x12\x06\xc6\x03\x02\xc3\x03,\n\r\n\x05\
    \x04\x0b\x02\x03\x06\x12\x04\xc6\x03\x02\x1b\n\r\n\x05\x04\x0b\x02\x03\
    \x01\x12\x04\xc6\x03\x1c$\n\r\n\x05\x04\x0b\x02\x03\x03\x12\x04\xc6\x03'\
    (\n\x8d\x01\n\x02\x04\x0c\x12\x06\xcb\x03\0\xda\x03\x01\x1a\x7f\x20Metad\
    ata\x20type\x20for\x20the\x20operation\x20returned\x20by\n\x20[UpdateIns\
    tance][google.spanner.admin.instance.v1.InstanceAdmin.UpdateInstance].\n\
    \n\x0b\n\x03\x04\x0c\x01\x12\x04\xcb\x03\x08\x1e\n4\n\x04\x04\x0c\x02\0\
    \x12\x04\xcd\x03\x02\x18\x1a&\x20The\x20desired\x20end\x20state\x20of\
    \x20the\x20update.\n\n\x0f\n\x05\x04\x0c\x02\0\x04\x12\x06\xcd\x03\x02\
    \xcb\x03\x20\n\r\n\x05\x04\x0c\x02\0\x06\x12\x04\xcd\x03\x02\n\n\r\n\x05\
    \x04\x0c\x02\0\x01\x12\x04\xcd\x03\x0b\x13\n\r\n\x05\x04\x0c\x02\0\x03\
    \x12\x04\xcd\x03\x16\x17\n\x88\x01\n\x04\x04\x0c\x02\x01\x12\x04\xd1\x03\
    \x02+\x1az\x20The\x20time\x20at\x20which\x20[UpdateInstance][google.span\
    ner.admin.instance.v1.InstanceAdmin.UpdateInstance]\n\x20request\x20was\
    \x20received.\n\n\x0f\n\x05\x04\x0c\x02\x01\x04\x12\x06\xd1\x03\x02\xcd\
    \x03\x18\n\r\n\x05\x04\x0c\x02\x01\x06\x12\x04\xd1\x03\x02\x1b\n\r\n\x05\
    \x04\x0c\x02\x01\x01\x12\x04\xd1\x03\x1c&\n\r\n\x05\x04\x0c\x02\x01\x03\
    \x12\x04\xd1\x03)*\n\xbd\x01\n\x04\x04\x0c\x02\x02\x12\x04\xd6\x03\x02,\
    \x1a\xae\x01\x20The\x20time\x20at\x20which\x20this\x20operation\x20was\
    \x20cancelled.\x20If\x20set,\x20this\x20operation\x20is\n\x20in\x20the\
    \x20process\x20of\x20undoing\x20itself\x20(which\x20is\x20guaranteed\x20\
    to\x20succeed)\x20and\n\x20cannot\x20be\x20cancelled\x20again.\n\n\x0f\n\
    \x05\x04\x0c\x02\x02\x04\x12\x06\xd6\x03\x02\xd1\x03+\n\r\n\x05\x04\x0c\
    \x02\x02\x06\x12\x04\xd6\x03\x02\x1b\n\r\n\x05\x04\x0c\x02\x02\x01\x12\
    \x04\xd6\x03\x1c'\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\xd6\x03*+\nV\n\
    \x04\x04\x0c\x02\x03\x12\x04\xd9\x03\x02)\x1aH\x20The\x20time\x20at\x20w\
    hich\x20this\x20operation\x20failed\x20or\x20was\x20completed\x20success\
    fully.\n\n\x0f\n\x05\x04\x0c\x02\x03\x04\x12\x06\xd9\x03\x02\xd6\x03,\n\
    \r\n\x05\x04\x0c\x02\x03\x06\x12\x04\xd9\x03\x02\x1b\n\r\n\x05\x04\x0c\
    \x02\x03\x01\x12\x04\xd9\x03\x1c$\n\r\n\x05\x04\x0c\x02\x03\x03\x12\x04\
    \xd9\x03'(b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
