// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/spanner/admin/database/v1/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct OperationProgress {
    // message fields
    pub progress_percent: i32,
    pub start_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OperationProgress {
    fn default() -> &'a OperationProgress {
        <OperationProgress as ::protobuf::Message>::default_instance()
    }
}

impl OperationProgress {
    pub fn new() -> OperationProgress {
        ::std::default::Default::default()
    }

    // int32 progress_percent = 1;


    pub fn get_progress_percent(&self) -> i32 {
        self.progress_percent
    }
    pub fn clear_progress_percent(&mut self) {
        self.progress_percent = 0;
    }

    // Param is passed by value, moved
    pub fn set_progress_percent(&mut self, v: i32) {
        self.progress_percent = v;
    }

    // .google.protobuf.Timestamp start_time = 2;


    pub fn get_start_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end_time = 3;


    pub fn get_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end_time(&mut self) {
        self.end_time.clear();
    }

    pub fn has_end_time(&self) -> bool {
        self.end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_time.is_none() {
            self.end_time.set_default();
        }
        self.end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for OperationProgress {
    fn is_initialized(&self) -> bool {
        for v in &self.start_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.progress_percent = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.progress_percent != 0 {
            my_size += ::protobuf::rt::value_size(1, self.progress_percent, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.progress_percent != 0 {
            os.write_int32(1, self.progress_percent)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OperationProgress {
        OperationProgress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "progress_percent",
                |m: &OperationProgress| { &m.progress_percent },
                |m: &mut OperationProgress| { &mut m.progress_percent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start_time",
                |m: &OperationProgress| { &m.start_time },
                |m: &mut OperationProgress| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "end_time",
                |m: &OperationProgress| { &m.end_time },
                |m: &mut OperationProgress| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OperationProgress>(
                "OperationProgress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OperationProgress {
        static instance: ::protobuf::rt::LazyV2<OperationProgress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OperationProgress::new)
    }
}

impl ::protobuf::Clear for OperationProgress {
    fn clear(&mut self) {
        self.progress_percent = 0;
        self.start_time.clear();
        self.end_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OperationProgress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OperationProgress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EncryptionConfig {
    // message fields
    pub kms_key_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EncryptionConfig {
    fn default() -> &'a EncryptionConfig {
        <EncryptionConfig as ::protobuf::Message>::default_instance()
    }
}

impl EncryptionConfig {
    pub fn new() -> EncryptionConfig {
        ::std::default::Default::default()
    }

    // string kms_key_name = 2;


    pub fn get_kms_key_name(&self) -> &str {
        &self.kms_key_name
    }
    pub fn clear_kms_key_name(&mut self) {
        self.kms_key_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_kms_key_name(&mut self, v: ::std::string::String) {
        self.kms_key_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kms_key_name(&mut self) -> &mut ::std::string::String {
        &mut self.kms_key_name
    }

    // Take field
    pub fn take_kms_key_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kms_key_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EncryptionConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kms_key_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.kms_key_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.kms_key_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.kms_key_name.is_empty() {
            os.write_string(2, &self.kms_key_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EncryptionConfig {
        EncryptionConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kms_key_name",
                |m: &EncryptionConfig| { &m.kms_key_name },
                |m: &mut EncryptionConfig| { &mut m.kms_key_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EncryptionConfig>(
                "EncryptionConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EncryptionConfig {
        static instance: ::protobuf::rt::LazyV2<EncryptionConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EncryptionConfig::new)
    }
}

impl ::protobuf::Clear for EncryptionConfig {
    fn clear(&mut self) {
        self.kms_key_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EncryptionConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptionConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EncryptionInfo {
    // message fields
    pub encryption_type: EncryptionInfo_Type,
    pub encryption_status: ::protobuf::SingularPtrField<super::status::Status>,
    pub kms_key_version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EncryptionInfo {
    fn default() -> &'a EncryptionInfo {
        <EncryptionInfo as ::protobuf::Message>::default_instance()
    }
}

impl EncryptionInfo {
    pub fn new() -> EncryptionInfo {
        ::std::default::Default::default()
    }

    // .google.spanner.admin.database.v1.EncryptionInfo.Type encryption_type = 3;


    pub fn get_encryption_type(&self) -> EncryptionInfo_Type {
        self.encryption_type
    }
    pub fn clear_encryption_type(&mut self) {
        self.encryption_type = EncryptionInfo_Type::TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_encryption_type(&mut self, v: EncryptionInfo_Type) {
        self.encryption_type = v;
    }

    // .google.rpc.Status encryption_status = 4;


    pub fn get_encryption_status(&self) -> &super::status::Status {
        self.encryption_status.as_ref().unwrap_or_else(|| <super::status::Status as ::protobuf::Message>::default_instance())
    }
    pub fn clear_encryption_status(&mut self) {
        self.encryption_status.clear();
    }

    pub fn has_encryption_status(&self) -> bool {
        self.encryption_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryption_status(&mut self, v: super::status::Status) {
        self.encryption_status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encryption_status(&mut self) -> &mut super::status::Status {
        if self.encryption_status.is_none() {
            self.encryption_status.set_default();
        }
        self.encryption_status.as_mut().unwrap()
    }

    // Take field
    pub fn take_encryption_status(&mut self) -> super::status::Status {
        self.encryption_status.take().unwrap_or_else(|| super::status::Status::new())
    }

    // string kms_key_version = 2;


    pub fn get_kms_key_version(&self) -> &str {
        &self.kms_key_version
    }
    pub fn clear_kms_key_version(&mut self) {
        self.kms_key_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_kms_key_version(&mut self, v: ::std::string::String) {
        self.kms_key_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kms_key_version(&mut self) -> &mut ::std::string::String {
        &mut self.kms_key_version
    }

    // Take field
    pub fn take_kms_key_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kms_key_version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EncryptionInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.encryption_status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.encryption_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.encryption_status)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kms_key_version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.encryption_type != EncryptionInfo_Type::TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.encryption_type);
        }
        if let Some(ref v) = self.encryption_status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.kms_key_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.kms_key_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.encryption_type != EncryptionInfo_Type::TYPE_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.encryption_type))?;
        }
        if let Some(ref v) = self.encryption_status.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.kms_key_version.is_empty() {
            os.write_string(2, &self.kms_key_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EncryptionInfo {
        EncryptionInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EncryptionInfo_Type>>(
                "encryption_type",
                |m: &EncryptionInfo| { &m.encryption_type },
                |m: &mut EncryptionInfo| { &mut m.encryption_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                "encryption_status",
                |m: &EncryptionInfo| { &m.encryption_status },
                |m: &mut EncryptionInfo| { &mut m.encryption_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kms_key_version",
                |m: &EncryptionInfo| { &m.kms_key_version },
                |m: &mut EncryptionInfo| { &mut m.kms_key_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EncryptionInfo>(
                "EncryptionInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EncryptionInfo {
        static instance: ::protobuf::rt::LazyV2<EncryptionInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EncryptionInfo::new)
    }
}

impl ::protobuf::Clear for EncryptionInfo {
    fn clear(&mut self) {
        self.encryption_type = EncryptionInfo_Type::TYPE_UNSPECIFIED;
        self.encryption_status.clear();
        self.kms_key_version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EncryptionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptionInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EncryptionInfo_Type {
    TYPE_UNSPECIFIED = 0,
    GOOGLE_DEFAULT_ENCRYPTION = 1,
    CUSTOMER_MANAGED_ENCRYPTION = 2,
}

impl ::protobuf::ProtobufEnum for EncryptionInfo_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EncryptionInfo_Type> {
        match value {
            0 => ::std::option::Option::Some(EncryptionInfo_Type::TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(EncryptionInfo_Type::GOOGLE_DEFAULT_ENCRYPTION),
            2 => ::std::option::Option::Some(EncryptionInfo_Type::CUSTOMER_MANAGED_ENCRYPTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EncryptionInfo_Type] = &[
            EncryptionInfo_Type::TYPE_UNSPECIFIED,
            EncryptionInfo_Type::GOOGLE_DEFAULT_ENCRYPTION,
            EncryptionInfo_Type::CUSTOMER_MANAGED_ENCRYPTION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EncryptionInfo_Type>("EncryptionInfo.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EncryptionInfo_Type {
}

impl ::std::default::Default for EncryptionInfo_Type {
    fn default() -> Self {
        EncryptionInfo_Type::TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptionInfo_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-google/spanner/admin/database/v1/common.proto\x12\x20google.spanner.a\
    dmin.database.v1\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/ap\
    i/resource.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x17google/rp\
    c/status.proto\"\xb0\x01\n\x11OperationProgress\x12)\n\x10progress_perce\
    nt\x18\x01\x20\x01(\x05R\x0fprogressPercent\x129\n\nstart_time\x18\x02\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tstartTime\x125\n\x08end_t\
    ime\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x07endTime\"\\\
    \n\x10EncryptionConfig\x12H\n\x0ckms_key_name\x18\x02\x20\x01(\tR\nkmsKe\
    yNameB&\xfaA#\n!cloudkms.googleapis.com/CryptoKey\"\xf3\x02\n\x0eEncrypt\
    ionInfo\x12c\n\x0fencryption_type\x18\x03\x20\x01(\x0e25.google.spanner.\
    admin.database.v1.EncryptionInfo.TypeR\x0eencryptionTypeB\x03\xe0A\x03\
    \x12D\n\x11encryption_status\x18\x04\x20\x01(\x0b2\x12.google.rpc.Status\
    R\x10encryptionStatusB\x03\xe0A\x03\x12X\n\x0fkms_key_version\x18\x02\
    \x20\x01(\tR\rkmsKeyVersionB0\xfaA*\n(cloudkms.googleapis.com/CryptoKeyV\
    ersion\xe0A\x03\"\\\n\x04Type\x12\x14\n\x10TYPE_UNSPECIFIED\x10\0\x12\
    \x1d\n\x19GOOGLE_DEFAULT_ENCRYPTION\x10\x01\x12\x1f\n\x1bCUSTOMER_MANAGE\
    D_ENCRYPTION\x10\x02B\xa4\x04\n$com.google.spanner.admin.database.v1B\
    \x0bCommonProtoP\x01ZHgoogle.golang.org/genproto/googleapis/spanner/admi\
    n/database/v1;database\xaa\x02&Google.Cloud.Spanner.Admin.Database.V1\
    \xca\x02&Google\\Cloud\\Spanner\\Admin\\Database\\V1\xea\x02+Google::Clo\
    ud::Spanner::Admin::Database::V1\xeaAx\n!cloudkms.googleapis.com/CryptoK\
    ey\x12Sprojects/{project}/locations/{location}/keyRings/{key_ring}/crypt\
    oKeys/{crypto_key}\xeaA\xa6\x01\n(cloudkms.googleapis.com/CryptoKeyVersi\
    on\x12zprojects/{project}/locations/{location}/keyRings/{key_ring}/crypt\
    oKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}J\x88\x18\n\x06\
    \x12\x04\x0e\0c\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Co\
    pyright\x202021\x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apac\
    he\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20ma\
    y\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\
    \x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\
    \x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/\
    LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\
    \x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\
    \x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20B\
    ASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIN\
    D,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20\
    for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\n\
    \x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\
    \x10\0)\n\t\n\x02\x03\0\x12\x03\x12\0)\n\t\n\x02\x03\x01\x12\x03\x13\0#\
    \n\t\n\x02\x03\x02\x12\x03\x14\0)\n\t\n\x02\x03\x03\x12\x03\x15\0!\n\x08\
    \n\x01\x08\x12\x03\x17\0C\n\t\n\x02\x08%\x12\x03\x17\0C\n\x08\n\x01\x08\
    \x12\x03\x18\0_\n\t\n\x02\x08\x0b\x12\x03\x18\0_\n\x08\n\x01\x08\x12\x03\
    \x19\0\"\n\t\n\x02\x08\n\x12\x03\x19\0\"\n\x08\n\x01\x08\x12\x03\x1a\0,\
    \n\t\n\x02\x08\x08\x12\x03\x1a\0,\n\x08\n\x01\x08\x12\x03\x1b\0=\n\t\n\
    \x02\x08\x01\x12\x03\x1b\0=\n\x08\n\x01\x08\x12\x03\x1c\0E\n\t\n\x02\x08\
    )\x12\x03\x1c\0E\n\x08\n\x01\x08\x12\x03\x1d\0D\n\t\n\x02\x08-\x12\x03\
    \x1d\0D\n\t\n\x01\x08\x12\x04\x1e\0!\x02\n\x0c\n\x04\x08\x9d\x08\0\x12\
    \x04\x1e\0!\x02\n\t\n\x01\x08\x12\x04\"\0%\x02\n\x0c\n\x04\x08\x9d\x08\
    \x01\x12\x04\"\0%\x02\nd\n\x02\x04\0\x12\x04)\04\x01\x1aX\x20Encapsulate\
    s\x20progress\x20related\x20information\x20for\x20a\x20Cloud\x20Spanner\
    \x20long\n\x20running\x20operation.\n\n\n\n\x03\x04\0\x01\x12\x03)\x08\
    \x19\n\\\n\x04\x04\0\x02\0\x12\x03,\x02\x1d\x1aO\x20Percent\x20completio\
    n\x20of\x20the\x20operation.\n\x20Values\x20are\x20between\x200\x20and\
    \x20100\x20inclusive.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04,\x02)\x1b\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03,\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03,\x08\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03,\x1b\x1c\n-\n\x04\
    \x04\0\x02\x01\x12\x03/\x02+\x1a\x20\x20Time\x20the\x20request\x20was\
    \x20received.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04/\x02,\x1d\n\x0c\n\
    \x05\x04\0\x02\x01\x06\x12\x03/\x02\x1b\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03/\x1c&\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03/)*\n^\n\x04\x04\0\
    \x02\x02\x12\x033\x02)\x1aQ\x20If\x20set,\x20the\x20time\x20at\x20which\
    \x20this\x20operation\x20failed\x20or\x20was\x20completed\n\x20successfu\
    lly.\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x043\x02/+\n\x0c\n\x05\x04\0\x02\
    \x02\x06\x12\x033\x02\x1b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x033\x1c$\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x033'(\nD\n\x02\x04\x01\x12\x047\0>\x01\
    \x1a8\x20Encryption\x20configuration\x20for\x20a\x20Cloud\x20Spanner\x20\
    database.\n\n\n\n\x03\x04\x01\x01\x12\x037\x08\x18\n\xcb\x01\n\x04\x04\
    \x01\x02\0\x12\x04;\x02=\x05\x1a\xbc\x01\x20The\x20Cloud\x20KMS\x20key\
    \x20to\x20be\x20used\x20for\x20encrypting\x20and\x20decrypting\n\x20the\
    \x20database.\x20Values\x20are\x20of\x20the\x20form\n\x20`projects/<proj\
    ect>/locations/<location>/keyRings/<key_ring>/cryptoKeys/<kms_key_name>`\
    .\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04;\x027\x1a\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03;\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03;\t\x15\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03;\x18\x19\n\r\n\x05\x04\x01\x02\0\
    \x08\x12\x04;\x1a=\x04\n\x0f\n\x07\x04\x01\x02\0\x08\x9f\x08\x12\x04;\
    \x1b=\x03\nL\n\x02\x04\x02\x12\x04A\0c\x01\x1a@\x20Encryption\x20informa\
    tion\x20for\x20a\x20Cloud\x20Spanner\x20database\x20or\x20backup.\n\n\n\
    \n\x03\x04\x02\x01\x12\x03A\x08\x16\n*\n\x04\x04\x02\x04\0\x12\x04C\x02P\
    \x03\x1a\x1c\x20Possible\x20encryption\x20types.\n\n\x0c\n\x05\x04\x02\
    \x04\0\x01\x12\x03C\x07\x0b\nZ\n\x06\x04\x02\x04\0\x02\0\x12\x03E\x04\
    \x19\x1aK\x20Encryption\x20type\x20was\x20not\x20specified,\x20though\
    \x20data\x20at\x20rest\x20remains\x20encrypted.\n\n\x0e\n\x07\x04\x02\
    \x04\0\x02\0\x01\x12\x03E\x04\x14\n\x0e\n\x07\x04\x02\x04\0\x02\0\x02\
    \x12\x03E\x17\x18\n\xa4\x01\n\x06\x04\x02\x04\0\x02\x01\x12\x03J\x04\"\
    \x1a\x94\x01\x20The\x20data\x20is\x20encrypted\x20at\x20rest\x20with\x20\
    a\x20key\x20that\x20is\n\x20fully\x20managed\x20by\x20Google.\x20No\x20k\
    ey\x20version\x20or\x20status\x20will\x20be\x20populated.\n\x20This\x20i\
    s\x20the\x20default\x20state.\n\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x01\
    \x12\x03J\x04\x1d\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x02\x12\x03J\x20!\n\
    \xcb\x01\n\x06\x04\x02\x04\0\x02\x02\x12\x03O\x04$\x1a\xbb\x01\x20The\
    \x20data\x20is\x20encrypted\x20at\x20rest\x20with\x20a\x20key\x20that\
    \x20is\n\x20managed\x20by\x20the\x20customer.\x20The\x20active\x20versio\
    n\x20of\x20the\x20key.\x20`kms_key_version`\n\x20will\x20be\x20populated\
    ,\x20and\x20`encryption_status`\x20may\x20be\x20populated.\n\n\x0e\n\x07\
    \x04\x02\x04\0\x02\x02\x01\x12\x03O\x04\x1f\n\x0e\n\x07\x04\x02\x04\0\
    \x02\x02\x02\x12\x03O\"#\n3\n\x04\x04\x02\x02\0\x12\x03S\x02G\x1a&\x20Ou\
    tput\x20only.\x20The\x20type\x20of\x20encryption.\n\n\r\n\x05\x04\x02\
    \x02\0\x04\x12\x04S\x02P\x03\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03S\x02\
    \x06\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03S\x07\x16\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03S\x19\x1a\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03S\x1bF\
    \n\x0f\n\x08\x04\x02\x02\0\x08\x9c\x08\0\x12\x03S\x1cE\n\xbf\x01\n\x04\
    \x04\x02\x02\x01\x12\x04X\x02Y2\x1a\xb0\x01\x20Output\x20only.\x20If\x20\
    present,\x20the\x20status\x20of\x20a\x20recent\x20encrypt/decrypt\x20cal\
    l\x20on\n\x20underlying\x20data\x20for\x20this\x20database\x20or\x20back\
    up.\x20Regardless\x20of\x20status,\x20data\x20is\n\x20always\x20encrypte\
    d\x20at\x20rest.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04X\x02SG\n\x0c\n\
    \x05\x04\x02\x02\x01\x06\x12\x03X\x02\x13\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03X\x14%\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03X()\n\x0c\n\
    \x05\x04\x02\x02\x01\x08\x12\x03Y\x061\n\x0f\n\x08\x04\x02\x02\x01\x08\
    \x9c\x08\0\x12\x03Y\x070\nk\n\x04\x04\x02\x02\x02\x12\x04]\x02b\x04\x1a]\
    \x20Output\x20only.\x20A\x20Cloud\x20KMS\x20key\x20version\x20that\x20is\
    \x20being\x20used\x20to\x20protect\x20the\n\x20database\x20or\x20backup.\
    \n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04]\x02Y2\n\x0c\n\x05\x04\x02\x02\
    \x02\x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03]\t\x18\
    \n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03]\x1b\x1c\n\r\n\x05\x04\x02\x02\
    \x02\x08\x12\x04]\x1db\x03\n\x0f\n\x08\x04\x02\x02\x02\x08\x9c\x08\0\x12\
    \x03^\x04-\n\x0f\n\x07\x04\x02\x02\x02\x08\x9f\x08\x12\x04_\x04a\x05b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
