// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/http.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct Http {
    // message fields
    pub rules: ::protobuf::RepeatedField<HttpRule>,
    pub fully_decode_reserved_expansion: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Http {
    fn default() -> &'a Http {
        <Http as ::protobuf::Message>::default_instance()
    }
}

impl Http {
    pub fn new() -> Http {
        ::std::default::Default::default()
    }

    // repeated .google.api.HttpRule rules = 1;


    pub fn get_rules(&self) -> &[HttpRule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<HttpRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<HttpRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<HttpRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }

    // bool fully_decode_reserved_expansion = 2;


    pub fn get_fully_decode_reserved_expansion(&self) -> bool {
        self.fully_decode_reserved_expansion
    }
    pub fn clear_fully_decode_reserved_expansion(&mut self) {
        self.fully_decode_reserved_expansion = false;
    }

    // Param is passed by value, moved
    pub fn set_fully_decode_reserved_expansion(&mut self, v: bool) {
        self.fully_decode_reserved_expansion = v;
    }
}

impl ::protobuf::Message for Http {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fully_decode_reserved_expansion = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.fully_decode_reserved_expansion != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.fully_decode_reserved_expansion != false {
            os.write_bool(2, self.fully_decode_reserved_expansion)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Http {
        Http::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpRule>>(
                "rules",
                |m: &Http| { &m.rules },
                |m: &mut Http| { &mut m.rules },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "fully_decode_reserved_expansion",
                |m: &Http| { &m.fully_decode_reserved_expansion },
                |m: &mut Http| { &mut m.fully_decode_reserved_expansion },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Http>(
                "Http",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Http {
        static instance: ::protobuf::rt::LazyV2<Http> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Http::new)
    }
}

impl ::protobuf::Clear for Http {
    fn clear(&mut self) {
        self.rules.clear();
        self.fully_decode_reserved_expansion = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Http {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpRule {
    // message fields
    pub selector: ::std::string::String,
    pub body: ::std::string::String,
    pub response_body: ::std::string::String,
    pub additional_bindings: ::protobuf::RepeatedField<HttpRule>,
    // message oneof groups
    pub pattern: ::std::option::Option<HttpRule_oneof_pattern>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpRule {
    fn default() -> &'a HttpRule {
        <HttpRule as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HttpRule_oneof_pattern {
    get(::std::string::String),
    put(::std::string::String),
    post(::std::string::String),
    delete(::std::string::String),
    patch(::std::string::String),
    custom(CustomHttpPattern),
}

impl HttpRule {
    pub fn new() -> HttpRule {
        ::std::default::Default::default()
    }

    // string selector = 1;


    pub fn get_selector(&self) -> &str {
        &self.selector
    }
    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: ::std::string::String) {
        self.selector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut ::std::string::String {
        &mut self.selector
    }

    // Take field
    pub fn take_selector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.selector, ::std::string::String::new())
    }

    // string get = 2;


    pub fn get_get(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::get(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_get(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::get(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::get(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> ::std::string::String {
        if self.has_get() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::get(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string put = 3;


    pub fn get_put(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::put(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_put(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_put(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::put(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_put(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::put(v))
    }

    // Mutable pointer to the field.
    pub fn mut_put(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::put(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::put(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::put(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_put(&mut self) -> ::std::string::String {
        if self.has_put() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::put(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string post = 4;


    pub fn get_post(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::post(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_post(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_post(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::post(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_post(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::post(v))
    }

    // Mutable pointer to the field.
    pub fn mut_post(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::post(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::post(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::post(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_post(&mut self) -> ::std::string::String {
        if self.has_post() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::post(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string delete = 5;


    pub fn get_delete(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::delete(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_delete(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::delete(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::delete(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> ::std::string::String {
        if self.has_delete() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::delete(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string patch = 6;


    pub fn get_patch(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::patch(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_patch(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_patch(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::patch(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_patch(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::patch(v))
    }

    // Mutable pointer to the field.
    pub fn mut_patch(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::patch(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::patch(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::patch(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_patch(&mut self) -> ::std::string::String {
        if self.has_patch() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::patch(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.api.CustomHttpPattern custom = 8;


    pub fn get_custom(&self) -> &CustomHttpPattern {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::custom(ref v)) => v,
            _ => <CustomHttpPattern as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_custom(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_custom(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::custom(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom(&mut self, v: CustomHttpPattern) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::custom(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom(&mut self) -> &mut CustomHttpPattern {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::custom(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::custom(CustomHttpPattern::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::custom(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom(&mut self) -> CustomHttpPattern {
        if self.has_custom() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::custom(v)) => v,
                _ => panic!(),
            }
        } else {
            CustomHttpPattern::new()
        }
    }

    // string body = 7;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }

    // string response_body = 12;


    pub fn get_response_body(&self) -> &str {
        &self.response_body
    }
    pub fn clear_response_body(&mut self) {
        self.response_body.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_body(&mut self, v: ::std::string::String) {
        self.response_body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_body(&mut self) -> &mut ::std::string::String {
        &mut self.response_body
    }

    // Take field
    pub fn take_response_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.response_body, ::std::string::String::new())
    }

    // repeated .google.api.HttpRule additional_bindings = 11;


    pub fn get_additional_bindings(&self) -> &[HttpRule] {
        &self.additional_bindings
    }
    pub fn clear_additional_bindings(&mut self) {
        self.additional_bindings.clear();
    }

    // Param is passed by value, moved
    pub fn set_additional_bindings(&mut self, v: ::protobuf::RepeatedField<HttpRule>) {
        self.additional_bindings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_additional_bindings(&mut self) -> &mut ::protobuf::RepeatedField<HttpRule> {
        &mut self.additional_bindings
    }

    // Take field
    pub fn take_additional_bindings(&mut self) -> ::protobuf::RepeatedField<HttpRule> {
        ::std::mem::replace(&mut self.additional_bindings, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HttpRule {
    fn is_initialized(&self) -> bool {
        if let Some(HttpRule_oneof_pattern::custom(ref v)) = self.pattern {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.additional_bindings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.selector)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::get(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::put(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::post(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::delete(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::patch(is.read_string()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::custom(is.read_message()?));
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.response_body)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.additional_bindings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.body);
        }
        if !self.response_body.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.response_body);
        }
        for value in &self.additional_bindings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.pattern {
            match v {
                &HttpRule_oneof_pattern::get(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &HttpRule_oneof_pattern::put(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &HttpRule_oneof_pattern::post(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &HttpRule_oneof_pattern::delete(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &HttpRule_oneof_pattern::patch(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
                &HttpRule_oneof_pattern::custom(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        if !self.body.is_empty() {
            os.write_string(7, &self.body)?;
        }
        if !self.response_body.is_empty() {
            os.write_string(12, &self.response_body)?;
        }
        for v in &self.additional_bindings {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.pattern {
            match v {
                &HttpRule_oneof_pattern::get(ref v) => {
                    os.write_string(2, v)?;
                },
                &HttpRule_oneof_pattern::put(ref v) => {
                    os.write_string(3, v)?;
                },
                &HttpRule_oneof_pattern::post(ref v) => {
                    os.write_string(4, v)?;
                },
                &HttpRule_oneof_pattern::delete(ref v) => {
                    os.write_string(5, v)?;
                },
                &HttpRule_oneof_pattern::patch(ref v) => {
                    os.write_string(6, v)?;
                },
                &HttpRule_oneof_pattern::custom(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpRule {
        HttpRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "selector",
                |m: &HttpRule| { &m.selector },
                |m: &mut HttpRule| { &mut m.selector },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "get",
                HttpRule::has_get,
                HttpRule::get_get,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "put",
                HttpRule::has_put,
                HttpRule::get_put,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "post",
                HttpRule::has_post,
                HttpRule::get_post,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "delete",
                HttpRule::has_delete,
                HttpRule::get_delete,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "patch",
                HttpRule::has_patch,
                HttpRule::get_patch,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CustomHttpPattern>(
                "custom",
                HttpRule::has_custom,
                HttpRule::get_custom,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "body",
                |m: &HttpRule| { &m.body },
                |m: &mut HttpRule| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "response_body",
                |m: &HttpRule| { &m.response_body },
                |m: &mut HttpRule| { &mut m.response_body },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpRule>>(
                "additional_bindings",
                |m: &HttpRule| { &m.additional_bindings },
                |m: &mut HttpRule| { &mut m.additional_bindings },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpRule>(
                "HttpRule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpRule {
        static instance: ::protobuf::rt::LazyV2<HttpRule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpRule::new)
    }
}

impl ::protobuf::Clear for HttpRule {
    fn clear(&mut self) {
        self.selector.clear();
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.body.clear();
        self.response_body.clear();
        self.additional_bindings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpRule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CustomHttpPattern {
    // message fields
    pub kind: ::std::string::String,
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomHttpPattern {
    fn default() -> &'a CustomHttpPattern {
        <CustomHttpPattern as ::protobuf::Message>::default_instance()
    }
}

impl CustomHttpPattern {
    pub fn new() -> CustomHttpPattern {
        ::std::default::Default::default()
    }

    // string kind = 1;


    pub fn get_kind(&self) -> &str {
        &self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind.clear();
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::std::string::String) {
        self.kind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut ::std::string::String {
        &mut self.kind
    }

    // Take field
    pub fn take_kind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kind, ::std::string::String::new())
    }

    // string path = 2;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CustomHttpPattern {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kind)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.kind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.kind);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.kind.is_empty() {
            os.write_string(1, &self.kind)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomHttpPattern {
        CustomHttpPattern::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kind",
                |m: &CustomHttpPattern| { &m.kind },
                |m: &mut CustomHttpPattern| { &mut m.kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &CustomHttpPattern| { &m.path },
                |m: &mut CustomHttpPattern| { &mut m.path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CustomHttpPattern>(
                "CustomHttpPattern",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CustomHttpPattern {
        static instance: ::protobuf::rt::LazyV2<CustomHttpPattern> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomHttpPattern::new)
    }
}

impl ::protobuf::Clear for CustomHttpPattern {
    fn clear(&mut self) {
        self.kind.clear();
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomHttpPattern {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomHttpPattern {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15google/api/http.proto\x12\ngoogle.api\"y\n\x04Http\x12*\n\x05rules\
    \x18\x01\x20\x03(\x0b2\x14.google.api.HttpRuleR\x05rules\x12E\n\x1ffully\
    _decode_reserved_expansion\x18\x02\x20\x01(\x08R\x1cfullyDecodeReservedE\
    xpansion\"\xda\x02\n\x08HttpRule\x12\x1a\n\x08selector\x18\x01\x20\x01(\
    \tR\x08selector\x12\x12\n\x03get\x18\x02\x20\x01(\tH\0R\x03get\x12\x12\n\
    \x03put\x18\x03\x20\x01(\tH\0R\x03put\x12\x14\n\x04post\x18\x04\x20\x01(\
    \tH\0R\x04post\x12\x18\n\x06delete\x18\x05\x20\x01(\tH\0R\x06delete\x12\
    \x16\n\x05patch\x18\x06\x20\x01(\tH\0R\x05patch\x127\n\x06custom\x18\x08\
    \x20\x01(\x0b2\x1d.google.api.CustomHttpPatternH\0R\x06custom\x12\x12\n\
    \x04body\x18\x07\x20\x01(\tR\x04body\x12#\n\rresponse_body\x18\x0c\x20\
    \x01(\tR\x0cresponseBody\x12E\n\x13additional_bindings\x18\x0b\x20\x03(\
    \x0b2\x14.google.api.HttpRuleR\x12additionalBindingsB\t\n\x07pattern\";\
    \n\x11CustomHttpPattern\x12\x12\n\x04kind\x18\x01\x20\x01(\tR\x04kind\
    \x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04pathBj\n\x0ecom.google.apiB\tH\
    ttpProtoP\x01ZAgoogle.golang.org/genproto/googleapis/api/annotations;ann\
    otations\xf8\x01\x01\xa2\x02\x04GAPIJ\x8ct\n\x07\x12\x05\x0e\0\xf6\x02\
    \x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202020\
    \x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x13\n\x08\n\
    \x01\x08\x12\x03\x12\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x12\0\x1f\n\x08\n\
    \x01\x08\x12\x03\x13\0X\n\t\n\x02\x08\x0b\x12\x03\x13\0X\n\x08\n\x01\x08\
    \x12\x03\x14\0\"\n\t\n\x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\
    \x15\0*\n\t\n\x02\x08\x08\x12\x03\x15\0*\n\x08\n\x01\x08\x12\x03\x16\0'\
    \n\t\n\x02\x08\x01\x12\x03\x16\0'\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\
    \x02\x08$\x12\x03\x17\0\"\n\xcd\x01\n\x02\x04\0\x12\x04\x1c\0)\x01\x1a\
    \xc0\x01\x20Defines\x20the\x20HTTP\x20configuration\x20for\x20an\x20API\
    \x20service.\x20It\x20contains\x20a\x20list\x20of\n\x20[HttpRule][google\
    .api.HttpRule],\x20each\x20specifying\x20the\x20mapping\x20of\x20an\x20R\
    PC\x20method\n\x20to\x20one\x20or\x20more\x20HTTP\x20REST\x20API\x20meth\
    ods.\n\n\n\n\x03\x04\0\x01\x12\x03\x1c\x08\x0c\n\xa2\x01\n\x04\x04\0\x02\
    \0\x12\x03\x20\x02\x1e\x1a\x94\x01\x20A\x20list\x20of\x20HTTP\x20configu\
    ration\x20rules\x20that\x20apply\x20to\x20individual\x20API\x20methods.\
    \n\n\x20**NOTE:**\x20All\x20service\x20configuration\x20rules\x20follow\
    \x20\"last\x20one\x20wins\"\x20order.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\
    \x03\x20\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x20\x0b\x13\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x20\x14\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x20\x1c\x1d\n\x94\x02\n\x04\x04\0\x02\x01\x12\x03(\x02+\x1a\x86\x02\
    \x20When\x20set\x20to\x20true,\x20URL\x20path\x20parameters\x20will\x20b\
    e\x20fully\x20URI-decoded\x20except\x20in\n\x20cases\x20of\x20single\x20\
    segment\x20matches\x20in\x20reserved\x20expansion,\x20where\x20\"%2F\"\
    \x20will\x20be\n\x20left\x20encoded.\n\n\x20The\x20default\x20behavior\
    \x20is\x20to\x20not\x20decode\x20RFC\x206570\x20reserved\x20characters\
    \x20in\x20multi\n\x20segment\x20matches.\n\n\r\n\x05\x04\0\x02\x01\x04\
    \x12\x04(\x02\x20\x1e\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03(\x02\x06\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03(\x07&\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03()*\n\xb3S\n\x02\x04\x01\x12\x06\xb8\x02\0\xed\x02\x01\x1a\xa4S\
    \x20#\x20gRPC\x20Transcoding\n\n\x20gRPC\x20Transcoding\x20is\x20a\x20fe\
    ature\x20for\x20mapping\x20between\x20a\x20gRPC\x20method\x20and\x20one\
    \x20or\n\x20more\x20HTTP\x20REST\x20endpoints.\x20It\x20allows\x20develo\
    pers\x20to\x20build\x20a\x20single\x20API\x20service\n\x20that\x20suppor\
    ts\x20both\x20gRPC\x20APIs\x20and\x20REST\x20APIs.\x20Many\x20systems,\
    \x20including\x20[Google\n\x20APIs](https://github.com/googleapis/google\
    apis),\n\x20[Cloud\x20Endpoints](https://cloud.google.com/endpoints),\
    \x20[gRPC\n\x20Gateway](https://github.com/grpc-ecosystem/grpc-gateway),\
    \n\x20and\x20[Envoy](https://github.com/envoyproxy/envoy)\x20proxy\x20su\
    pport\x20this\x20feature\n\x20and\x20use\x20it\x20for\x20large\x20scale\
    \x20production\x20services.\n\n\x20`HttpRule`\x20defines\x20the\x20schem\
    a\x20of\x20the\x20gRPC/REST\x20mapping.\x20The\x20mapping\x20specifies\n\
    \x20how\x20different\x20portions\x20of\x20the\x20gRPC\x20request\x20mess\
    age\x20are\x20mapped\x20to\x20the\x20URL\n\x20path,\x20URL\x20query\x20p\
    arameters,\x20and\x20HTTP\x20request\x20body.\x20It\x20also\x20controls\
    \x20how\x20the\n\x20gRPC\x20response\x20message\x20is\x20mapped\x20to\
    \x20the\x20HTTP\x20response\x20body.\x20`HttpRule`\x20is\n\x20typically\
    \x20specified\x20as\x20an\x20`google.api.http`\x20annotation\x20on\x20th\
    e\x20gRPC\x20method.\n\n\x20Each\x20mapping\x20specifies\x20a\x20URL\x20\
    path\x20template\x20and\x20an\x20HTTP\x20method.\x20The\x20path\n\x20tem\
    plate\x20may\x20refer\x20to\x20one\x20or\x20more\x20fields\x20in\x20the\
    \x20gRPC\x20request\x20message,\x20as\x20long\n\x20as\x20each\x20field\
    \x20is\x20a\x20non-repeated\x20field\x20with\x20a\x20primitive\x20(non-m\
    essage)\x20type.\n\x20The\x20path\x20template\x20controls\x20how\x20fiel\
    ds\x20of\x20the\x20request\x20message\x20are\x20mapped\x20to\n\x20the\
    \x20URL\x20path.\n\n\x20Example:\n\n\x20\x20\x20\x20\x20service\x20Messa\
    ging\x20{\n\x20\x20\x20\x20\x20\x20\x20rpc\x20GetMessage(GetMessageReque\
    st)\x20returns\x20(Message)\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20op\
    tion\x20(google.api.http)\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20get:\x20\"/v1/{name=messages/*}\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20};\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\
    \x20}\n\x20\x20\x20\x20\x20message\x20GetMessageRequest\x20{\n\x20\x20\
    \x20\x20\x20\x20\x20string\x20name\x20=\x201;\x20//\x20Mapped\x20to\x20U\
    RL\x20path.\n\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20message\x20Messa\
    ge\x20{\n\x20\x20\x20\x20\x20\x20\x20string\x20text\x20=\x201;\x20//\x20\
    The\x20resource\x20content.\n\x20\x20\x20\x20\x20}\n\n\x20This\x20enable\
    s\x20an\x20HTTP\x20REST\x20to\x20gRPC\x20mapping\x20as\x20below:\n\n\x20\
    HTTP\x20|\x20gRPC\n\x20-----|-----\n\x20`GET\x20/v1/messages/123456`\x20\
    \x20|\x20`GetMessage(name:\x20\"messages/123456\")`\n\n\x20Any\x20fields\
    \x20in\x20the\x20request\x20message\x20which\x20are\x20not\x20bound\x20b\
    y\x20the\x20path\x20template\n\x20automatically\x20become\x20HTTP\x20que\
    ry\x20parameters\x20if\x20there\x20is\x20no\x20HTTP\x20request\x20body.\
    \n\x20For\x20example:\n\n\x20\x20\x20\x20\x20service\x20Messaging\x20{\n\
    \x20\x20\x20\x20\x20\x20\x20rpc\x20GetMessage(GetMessageRequest)\x20retu\
    rns\x20(Message)\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20option\x20(go\
    ogle.api.http)\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20get:\"/v1/messages/{message_id}\"\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20};\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\x20\
    \x20\x20\x20\x20message\x20GetMessageRequest\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20message\x20SubMessage\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    string\x20subfield\x20=\x201;\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\
    \x20\x20\x20\x20\x20string\x20message_id\x20=\x201;\x20//\x20Mapped\x20t\
    o\x20URL\x20path.\n\x20\x20\x20\x20\x20\x20\x20int64\x20revision\x20=\
    \x202;\x20\x20\x20\x20//\x20Mapped\x20to\x20URL\x20query\x20parameter\
    \x20`revision`.\n\x20\x20\x20\x20\x20\x20\x20SubMessage\x20sub\x20=\x203\
    ;\x20\x20\x20\x20//\x20Mapped\x20to\x20URL\x20query\x20parameter\x20`sub\
    .subfield`.\n\x20\x20\x20\x20\x20}\n\n\x20This\x20enables\x20a\x20HTTP\
    \x20JSON\x20to\x20RPC\x20mapping\x20as\x20below:\n\n\x20HTTP\x20|\x20gRP\
    C\n\x20-----|-----\n\x20`GET\x20/v1/messages/123456?revision=2&sub.subfi\
    eld=foo`\x20|\n\x20`GetMessage(message_id:\x20\"123456\"\x20revision:\
    \x202\x20sub:\x20SubMessage(subfield:\n\x20\"foo\"))`\n\n\x20Note\x20tha\
    t\x20fields\x20which\x20are\x20mapped\x20to\x20URL\x20query\x20parameter\
    s\x20must\x20have\x20a\n\x20primitive\x20type\x20or\x20a\x20repeated\x20\
    primitive\x20type\x20or\x20a\x20non-repeated\x20message\x20type.\n\x20In\
    \x20the\x20case\x20of\x20a\x20repeated\x20type,\x20the\x20parameter\x20c\
    an\x20be\x20repeated\x20in\x20the\x20URL\n\x20as\x20`...?param=A&param=B\
    `.\x20In\x20the\x20case\x20of\x20a\x20message\x20type,\x20each\x20field\
    \x20of\x20the\n\x20message\x20is\x20mapped\x20to\x20a\x20separate\x20par\
    ameter,\x20such\x20as\n\x20`...?foo.a=A&foo.b=B&foo.c=C`.\n\n\x20For\x20\
    HTTP\x20methods\x20that\x20allow\x20a\x20request\x20body,\x20the\x20`bod\
    y`\x20field\n\x20specifies\x20the\x20mapping.\x20Consider\x20a\x20REST\
    \x20update\x20method\x20on\x20the\n\x20message\x20resource\x20collection\
    :\n\n\x20\x20\x20\x20\x20service\x20Messaging\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20rpc\x20UpdateMessage(UpdateMessageRequest)\x20returns\x20(Messag\
    e)\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20option\x20(google.api.http)\
    \x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20patch:\x20\"/v1/\
    messages/{message_id}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20bod\
    y:\x20\"message\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20};\n\x20\x20\x20\
    \x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20message\
    \x20UpdateMessageRequest\x20{\n\x20\x20\x20\x20\x20\x20\x20string\x20mes\
    sage_id\x20=\x201;\x20//\x20mapped\x20to\x20the\x20URL\n\x20\x20\x20\x20\
    \x20\x20\x20Message\x20message\x20=\x202;\x20\x20\x20//\x20mapped\x20to\
    \x20the\x20body\n\x20\x20\x20\x20\x20}\n\n\x20The\x20following\x20HTTP\
    \x20JSON\x20to\x20RPC\x20mapping\x20is\x20enabled,\x20where\x20the\n\x20\
    representation\x20of\x20the\x20JSON\x20in\x20the\x20request\x20body\x20i\
    s\x20determined\x20by\n\x20protos\x20JSON\x20encoding:\n\n\x20HTTP\x20|\
    \x20gRPC\n\x20-----|-----\n\x20`PATCH\x20/v1/messages/123456\x20{\x20\"t\
    ext\":\x20\"Hi!\"\x20}`\x20|\x20`UpdateMessage(message_id:\n\x20\"123456\
    \"\x20message\x20{\x20text:\x20\"Hi!\"\x20})`\n\n\x20The\x20special\x20n\
    ame\x20`*`\x20can\x20be\x20used\x20in\x20the\x20body\x20mapping\x20to\
    \x20define\x20that\n\x20every\x20field\x20not\x20bound\x20by\x20the\x20p\
    ath\x20template\x20should\x20be\x20mapped\x20to\x20the\n\x20request\x20b\
    ody.\x20\x20This\x20enables\x20the\x20following\x20alternative\x20defini\
    tion\x20of\n\x20the\x20update\x20method:\n\n\x20\x20\x20\x20\x20service\
    \x20Messaging\x20{\n\x20\x20\x20\x20\x20\x20\x20rpc\x20UpdateMessage(Mes\
    sage)\x20returns\x20(Message)\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    option\x20(google.api.http)\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20patch:\x20\"/v1/messages/{message_id}\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20body:\x20\"*\"\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20};\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\x20\
    \x20\x20\x20\x20message\x20Message\x20{\n\x20\x20\x20\x20\x20\x20\x20str\
    ing\x20message_id\x20=\x201;\n\x20\x20\x20\x20\x20\x20\x20string\x20text\
    \x20=\x202;\n\x20\x20\x20\x20\x20}\n\n\n\x20The\x20following\x20HTTP\x20\
    JSON\x20to\x20RPC\x20mapping\x20is\x20enabled:\n\n\x20HTTP\x20|\x20gRPC\
    \n\x20-----|-----\n\x20`PATCH\x20/v1/messages/123456\x20{\x20\"text\":\
    \x20\"Hi!\"\x20}`\x20|\x20`UpdateMessage(message_id:\n\x20\"123456\"\x20\
    text:\x20\"Hi!\")`\n\n\x20Note\x20that\x20when\x20using\x20`*`\x20in\x20\
    the\x20body\x20mapping,\x20it\x20is\x20not\x20possible\x20to\n\x20have\
    \x20HTTP\x20parameters,\x20as\x20all\x20fields\x20not\x20bound\x20by\x20\
    the\x20path\x20end\x20in\n\x20the\x20body.\x20This\x20makes\x20this\x20o\
    ption\x20more\x20rarely\x20used\x20in\x20practice\x20when\n\x20defining\
    \x20REST\x20APIs.\x20The\x20common\x20usage\x20of\x20`*`\x20is\x20in\x20\
    custom\x20methods\n\x20which\x20don't\x20use\x20the\x20URL\x20at\x20all\
    \x20for\x20transferring\x20data.\n\n\x20It\x20is\x20possible\x20to\x20de\
    fine\x20multiple\x20HTTP\x20methods\x20for\x20one\x20RPC\x20by\x20using\
    \n\x20the\x20`additional_bindings`\x20option.\x20Example:\n\n\x20\x20\
    \x20\x20\x20service\x20Messaging\x20{\n\x20\x20\x20\x20\x20\x20\x20rpc\
    \x20GetMessage(GetMessageRequest)\x20returns\x20(Message)\x20{\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20option\x20(google.api.http)\x20=\x20{\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20get:\x20\"/v1/messages/{message_\
    id}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20additional_bindings\
    \x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20get:\x20\"/v1\
    /users/{user_id}/messages/{message_id}\"\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20\x20\x20};\n\x20\x20\x20\
    \x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20message\
    \x20GetMessageRequest\x20{\n\x20\x20\x20\x20\x20\x20\x20string\x20messag\
    e_id\x20=\x201;\n\x20\x20\x20\x20\x20\x20\x20string\x20user_id\x20=\x202\
    ;\n\x20\x20\x20\x20\x20}\n\n\x20This\x20enables\x20the\x20following\x20t\
    wo\x20alternative\x20HTTP\x20JSON\x20to\x20RPC\x20mappings:\n\n\x20HTTP\
    \x20|\x20gRPC\n\x20-----|-----\n\x20`GET\x20/v1/messages/123456`\x20|\
    \x20`GetMessage(message_id:\x20\"123456\")`\n\x20`GET\x20/v1/users/me/me\
    ssages/123456`\x20|\x20`GetMessage(user_id:\x20\"me\"\x20message_id:\n\
    \x20\"123456\")`\n\n\x20##\x20Rules\x20for\x20HTTP\x20mapping\n\n\x201.\
    \x20Leaf\x20request\x20fields\x20(recursive\x20expansion\x20nested\x20me\
    ssages\x20in\x20the\x20request\n\x20\x20\x20\x20message)\x20are\x20class\
    ified\x20into\x20three\x20categories:\n\x20\x20\x20\x20-\x20Fields\x20re\
    ferred\x20by\x20the\x20path\x20template.\x20They\x20are\x20passed\x20via\
    \x20the\x20URL\x20path.\n\x20\x20\x20\x20-\x20Fields\x20referred\x20by\
    \x20the\x20[HttpRule.body][google.api.HttpRule.body].\x20They\x20are\x20\
    passed\x20via\x20the\x20HTTP\n\x20\x20\x20\x20\x20\x20request\x20body.\n\
    \x20\x20\x20\x20-\x20All\x20other\x20fields\x20are\x20passed\x20via\x20t\
    he\x20URL\x20query\x20parameters,\x20and\x20the\n\x20\x20\x20\x20\x20\
    \x20parameter\x20name\x20is\x20the\x20field\x20path\x20in\x20the\x20requ\
    est\x20message.\x20A\x20repeated\n\x20\x20\x20\x20\x20\x20field\x20can\
    \x20be\x20represented\x20as\x20multiple\x20query\x20parameters\x20under\
    \x20the\x20same\n\x20\x20\x20\x20\x20\x20name.\n\x20\x202.\x20If\x20[Htt\
    pRule.body][google.api.HttpRule.body]\x20is\x20\"*\",\x20there\x20is\x20\
    no\x20URL\x20query\x20parameter,\x20all\x20fields\n\x20\x20\x20\x20\x20a\
    re\x20passed\x20via\x20URL\x20path\x20and\x20HTTP\x20request\x20body.\n\
    \x20\x203.\x20If\x20[HttpRule.body][google.api.HttpRule.body]\x20is\x20o\
    mitted,\x20there\x20is\x20no\x20HTTP\x20request\x20body,\x20all\n\x20\
    \x20\x20\x20\x20fields\x20are\x20passed\x20via\x20URL\x20path\x20and\x20\
    URL\x20query\x20parameters.\n\n\x20###\x20Path\x20template\x20syntax\n\n\
    \x20\x20\x20\x20\x20Template\x20=\x20\"/\"\x20Segments\x20[\x20Verb\x20]\
    \x20;\n\x20\x20\x20\x20\x20Segments\x20=\x20Segment\x20{\x20\"/\"\x20Seg\
    ment\x20}\x20;\n\x20\x20\x20\x20\x20Segment\x20\x20=\x20\"*\"\x20|\x20\"\
    **\"\x20|\x20LITERAL\x20|\x20Variable\x20;\n\x20\x20\x20\x20\x20Variable\
    \x20=\x20\"{\"\x20FieldPath\x20[\x20\"=\"\x20Segments\x20]\x20\"}\"\x20;\
    \n\x20\x20\x20\x20\x20FieldPath\x20=\x20IDENT\x20{\x20\".\"\x20IDENT\x20\
    }\x20;\n\x20\x20\x20\x20\x20Verb\x20\x20\x20\x20\x20=\x20\":\"\x20LITERA\
    L\x20;\n\n\x20The\x20syntax\x20`*`\x20matches\x20a\x20single\x20URL\x20p\
    ath\x20segment.\x20The\x20syntax\x20`**`\x20matches\n\x20zero\x20or\x20m\
    ore\x20URL\x20path\x20segments,\x20which\x20must\x20be\x20the\x20last\
    \x20part\x20of\x20the\x20URL\x20path\n\x20except\x20the\x20`Verb`.\n\n\
    \x20The\x20syntax\x20`Variable`\x20matches\x20part\x20of\x20the\x20URL\
    \x20path\x20as\x20specified\x20by\x20its\n\x20template.\x20A\x20variable\
    \x20template\x20must\x20not\x20contain\x20other\x20variables.\x20If\x20a\
    \x20variable\n\x20matches\x20a\x20single\x20path\x20segment,\x20its\x20t\
    emplate\x20may\x20be\x20omitted,\x20e.g.\x20`{var}`\n\x20is\x20equivalen\
    t\x20to\x20`{var=*}`.\n\n\x20The\x20syntax\x20`LITERAL`\x20matches\x20li\
    teral\x20text\x20in\x20the\x20URL\x20path.\x20If\x20the\x20`LITERAL`\n\
    \x20contains\x20any\x20reserved\x20character,\x20such\x20characters\x20s\
    hould\x20be\x20percent-encoded\n\x20before\x20the\x20matching.\n\n\x20If\
    \x20a\x20variable\x20contains\x20exactly\x20one\x20path\x20segment,\x20s\
    uch\x20as\x20`\"{var}\"`\x20or\n\x20`\"{var=*}\"`,\x20when\x20such\x20a\
    \x20variable\x20is\x20expanded\x20into\x20a\x20URL\x20path\x20on\x20the\
    \x20client\n\x20side,\x20all\x20characters\x20except\x20`[-_.~0-9a-zA-Z]\
    `\x20are\x20percent-encoded.\x20The\n\x20server\x20side\x20does\x20the\
    \x20reverse\x20decoding.\x20Such\x20variables\x20show\x20up\x20in\x20the\
    \n\x20[Discovery\n\x20Document](https://developers.google.com/discovery/\
    v1/reference/apis)\x20as\n\x20`{var}`.\n\n\x20If\x20a\x20variable\x20con\
    tains\x20multiple\x20path\x20segments,\x20such\x20as\x20`\"{var=foo/*}\"\
    `\n\x20or\x20`\"{var=**}\"`,\x20when\x20such\x20a\x20variable\x20is\x20e\
    xpanded\x20into\x20a\x20URL\x20path\x20on\x20the\n\x20client\x20side,\
    \x20all\x20characters\x20except\x20`[-_.~/0-9a-zA-Z]`\x20are\x20percent-\
    encoded.\n\x20The\x20server\x20side\x20does\x20the\x20reverse\x20decodin\
    g,\x20except\x20\"%2F\"\x20and\x20\"%2f\"\x20are\x20left\n\x20unchanged.\
    \x20Such\x20variables\x20show\x20up\x20in\x20the\n\x20[Discovery\n\x20Do\
    cument](https://developers.google.com/discovery/v1/reference/apis)\x20as\
    \n\x20`{+var}`.\n\n\x20##\x20Using\x20gRPC\x20API\x20Service\x20Configur\
    ation\n\n\x20gRPC\x20API\x20Service\x20Configuration\x20(service\x20conf\
    ig)\x20is\x20a\x20configuration\x20language\n\x20for\x20configuring\x20a\
    \x20gRPC\x20service\x20to\x20become\x20a\x20user-facing\x20product.\x20T\
    he\n\x20service\x20config\x20is\x20simply\x20the\x20YAML\x20representati\
    on\x20of\x20the\x20`google.api.Service`\n\x20proto\x20message.\n\n\x20As\
    \x20an\x20alternative\x20to\x20annotating\x20your\x20proto\x20file,\x20y\
    ou\x20can\x20configure\x20gRPC\n\x20transcoding\x20in\x20your\x20service\
    \x20config\x20YAML\x20files.\x20You\x20do\x20this\x20by\x20specifying\
    \x20a\n\x20`HttpRule`\x20that\x20maps\x20the\x20gRPC\x20method\x20to\x20\
    a\x20REST\x20endpoint,\x20achieving\x20the\x20same\n\x20effect\x20as\x20\
    the\x20proto\x20annotation.\x20This\x20can\x20be\x20particularly\x20usef\
    ul\x20if\x20you\n\x20have\x20a\x20proto\x20that\x20is\x20reused\x20in\
    \x20multiple\x20services.\x20Note\x20that\x20any\x20transcoding\n\x20spe\
    cified\x20in\x20the\x20service\x20config\x20will\x20override\x20any\x20m\
    atching\x20transcoding\n\x20configuration\x20in\x20the\x20proto.\n\n\x20\
    Example:\n\n\x20\x20\x20\x20\x20http:\n\x20\x20\x20\x20\x20\x20\x20rules\
    :\n\x20\x20\x20\x20\x20\x20\x20\x20\x20#\x20Selects\x20a\x20gRPC\x20meth\
    od\x20and\x20applies\x20HttpRule\x20to\x20it.\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20-\x20selector:\x20example.v1.Messaging.GetMessage\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20get:\x20/v1/messages/{message_id}/{s\
    ub.subfield}\n\n\x20##\x20Special\x20notes\n\n\x20When\x20gRPC\x20Transc\
    oding\x20is\x20used\x20to\x20map\x20a\x20gRPC\x20to\x20JSON\x20REST\x20e\
    ndpoints,\x20the\n\x20proto\x20to\x20JSON\x20conversion\x20must\x20follo\
    w\x20the\x20[proto3\n\x20specification](https://developers.google.com/pr\
    otocol-buffers/docs/proto3#json).\n\n\x20While\x20the\x20single\x20segme\
    nt\x20variable\x20follows\x20the\x20semantics\x20of\n\x20[RFC\x206570](h\
    ttps://tools.ietf.org/html/rfc6570)\x20Section\x203.2.2\x20Simple\x20Str\
    ing\n\x20Expansion,\x20the\x20multi\x20segment\x20variable\x20**does\x20\
    not**\x20follow\x20RFC\x206570\x20Section\n\x203.2.3\x20Reserved\x20Expa\
    nsion.\x20The\x20reason\x20is\x20that\x20the\x20Reserved\x20Expansion\n\
    \x20does\x20not\x20expand\x20special\x20characters\x20like\x20`?`\x20and\
    \x20`#`,\x20which\x20would\x20lead\n\x20to\x20invalid\x20URLs.\x20As\x20\
    the\x20result,\x20gRPC\x20Transcoding\x20uses\x20a\x20custom\x20encoding\
    \n\x20for\x20multi\x20segment\x20variables.\n\n\x20The\x20path\x20variab\
    les\x20**must\x20not**\x20refer\x20to\x20any\x20repeated\x20or\x20mapped\
    \x20field,\n\x20because\x20client\x20libraries\x20are\x20not\x20capable\
    \x20of\x20handling\x20such\x20variable\x20expansion.\n\n\x20The\x20path\
    \x20variables\x20**must\x20not**\x20capture\x20the\x20leading\x20\"/\"\
    \x20character.\x20The\x20reason\n\x20is\x20that\x20the\x20most\x20common\
    \x20use\x20case\x20\"{var}\"\x20does\x20not\x20capture\x20the\x20leading\
    \x20\"/\"\n\x20character.\x20For\x20consistency,\x20all\x20path\x20varia\
    bles\x20must\x20share\x20the\x20same\x20behavior.\n\n\x20Repeated\x20mes\
    sage\x20fields\x20must\x20not\x20be\x20mapped\x20to\x20URL\x20query\x20p\
    arameters,\x20because\n\x20no\x20client\x20library\x20can\x20support\x20\
    such\x20complicated\x20mapping.\n\n\x20If\x20an\x20API\x20needs\x20to\
    \x20use\x20a\x20JSON\x20array\x20for\x20request\x20or\x20response\x20bod\
    y,\x20it\x20can\x20map\n\x20the\x20request\x20or\x20response\x20body\x20\
    to\x20a\x20repeated\x20field.\x20However,\x20some\x20gRPC\n\x20Transcodi\
    ng\x20implementations\x20may\x20not\x20support\x20this\x20feature.\n\n\
    \x0b\n\x03\x04\x01\x01\x12\x04\xb8\x02\x08\x10\n\x8d\x01\n\x04\x04\x01\
    \x02\0\x12\x04\xbc\x02\x02\x16\x1a\x7f\x20Selects\x20a\x20method\x20to\
    \x20which\x20this\x20rule\x20applies.\n\n\x20Refer\x20to\x20[selector][g\
    oogle.api.DocumentationRule.selector]\x20for\x20syntax\x20details.\n\n\
    \x0f\n\x05\x04\x01\x02\0\x04\x12\x06\xbc\x02\x02\xb8\x02\x12\n\r\n\x05\
    \x04\x01\x02\0\x05\x12\x04\xbc\x02\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\
    \x12\x04\xbc\x02\t\x11\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xbc\x02\x14\
    \x15\n\xd0\x01\n\x04\x04\x01\x08\0\x12\x06\xc1\x02\x02\xd7\x02\x03\x1a\
    \xbf\x01\x20Determines\x20the\x20URL\x20pattern\x20is\x20matched\x20by\
    \x20this\x20rules.\x20This\x20pattern\x20can\x20be\n\x20used\x20with\x20\
    any\x20of\x20the\x20{get|put|post|delete|patch}\x20methods.\x20A\x20cust\
    om\x20method\n\x20can\x20be\x20defined\x20using\x20the\x20'custom'\x20fi\
    eld.\n\n\r\n\x05\x04\x01\x08\0\x01\x12\x04\xc1\x02\x08\x0f\n\\\n\x04\x04\
    \x01\x02\x01\x12\x04\xc4\x02\x04\x13\x1aN\x20Maps\x20to\x20HTTP\x20GET.\
    \x20Used\x20for\x20listing\x20and\x20getting\x20information\x20about\n\
    \x20resources.\n\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\xc4\x02\x04\n\n\r\
    \n\x05\x04\x01\x02\x01\x01\x12\x04\xc4\x02\x0b\x0e\n\r\n\x05\x04\x01\x02\
    \x01\x03\x12\x04\xc4\x02\x11\x12\n@\n\x04\x04\x01\x02\x02\x12\x04\xc7\
    \x02\x04\x13\x1a2\x20Maps\x20to\x20HTTP\x20PUT.\x20Used\x20for\x20replac\
    ing\x20a\x20resource.\n\n\r\n\x05\x04\x01\x02\x02\x05\x12\x04\xc7\x02\
    \x04\n\n\r\n\x05\x04\x01\x02\x02\x01\x12\x04\xc7\x02\x0b\x0e\n\r\n\x05\
    \x04\x01\x02\x02\x03\x12\x04\xc7\x02\x11\x12\nX\n\x04\x04\x01\x02\x03\
    \x12\x04\xca\x02\x04\x14\x1aJ\x20Maps\x20to\x20HTTP\x20POST.\x20Used\x20\
    for\x20creating\x20a\x20resource\x20or\x20performing\x20an\x20action.\n\
    \n\r\n\x05\x04\x01\x02\x03\x05\x12\x04\xca\x02\x04\n\n\r\n\x05\x04\x01\
    \x02\x03\x01\x12\x04\xca\x02\x0b\x0f\n\r\n\x05\x04\x01\x02\x03\x03\x12\
    \x04\xca\x02\x12\x13\nB\n\x04\x04\x01\x02\x04\x12\x04\xcd\x02\x04\x16\
    \x1a4\x20Maps\x20to\x20HTTP\x20DELETE.\x20Used\x20for\x20deleting\x20a\
    \x20resource.\n\n\r\n\x05\x04\x01\x02\x04\x05\x12\x04\xcd\x02\x04\n\n\r\
    \n\x05\x04\x01\x02\x04\x01\x12\x04\xcd\x02\x0b\x11\n\r\n\x05\x04\x01\x02\
    \x04\x03\x12\x04\xcd\x02\x14\x15\nA\n\x04\x04\x01\x02\x05\x12\x04\xd0\
    \x02\x04\x15\x1a3\x20Maps\x20to\x20HTTP\x20PATCH.\x20Used\x20for\x20upda\
    ting\x20a\x20resource.\n\n\r\n\x05\x04\x01\x02\x05\x05\x12\x04\xd0\x02\
    \x04\n\n\r\n\x05\x04\x01\x02\x05\x01\x12\x04\xd0\x02\x0b\x10\n\r\n\x05\
    \x04\x01\x02\x05\x03\x12\x04\xd0\x02\x13\x14\n\x98\x02\n\x04\x04\x01\x02\
    \x06\x12\x04\xd6\x02\x04!\x1a\x89\x02\x20The\x20custom\x20pattern\x20is\
    \x20used\x20for\x20specifying\x20an\x20HTTP\x20method\x20that\x20is\x20n\
    ot\n\x20included\x20in\x20the\x20`pattern`\x20field,\x20such\x20as\x20HE\
    AD,\x20or\x20\"*\"\x20to\x20leave\x20the\n\x20HTTP\x20method\x20unspecif\
    ied\x20for\x20this\x20rule.\x20The\x20wild-card\x20rule\x20is\x20useful\
    \n\x20for\x20services\x20that\x20provide\x20content\x20to\x20Web\x20(HTM\
    L)\x20clients.\n\n\r\n\x05\x04\x01\x02\x06\x06\x12\x04\xd6\x02\x04\x15\n\
    \r\n\x05\x04\x01\x02\x06\x01\x12\x04\xd6\x02\x16\x1c\n\r\n\x05\x04\x01\
    \x02\x06\x03\x12\x04\xd6\x02\x1f\x20\n\xc4\x02\n\x04\x04\x01\x02\x07\x12\
    \x04\xdf\x02\x02\x12\x1a\xb5\x02\x20The\x20name\x20of\x20the\x20request\
    \x20field\x20whose\x20value\x20is\x20mapped\x20to\x20the\x20HTTP\x20requ\
    est\n\x20body,\x20or\x20`*`\x20for\x20mapping\x20all\x20request\x20field\
    s\x20not\x20captured\x20by\x20the\x20path\n\x20pattern\x20to\x20the\x20H\
    TTP\x20body,\x20or\x20omitted\x20for\x20not\x20having\x20any\x20HTTP\x20\
    request\x20body.\n\n\x20NOTE:\x20the\x20referred\x20field\x20must\x20be\
    \x20present\x20at\x20the\x20top-level\x20of\x20the\x20request\n\x20messa\
    ge\x20type.\n\n\x0f\n\x05\x04\x01\x02\x07\x04\x12\x06\xdf\x02\x02\xd7\
    \x02\x03\n\r\n\x05\x04\x01\x02\x07\x05\x12\x04\xdf\x02\x02\x08\n\r\n\x05\
    \x04\x01\x02\x07\x01\x12\x04\xdf\x02\t\r\n\r\n\x05\x04\x01\x02\x07\x03\
    \x12\x04\xdf\x02\x10\x11\n\x99\x02\n\x04\x04\x01\x02\x08\x12\x04\xe7\x02\
    \x02\x1c\x1a\x8a\x02\x20Optional.\x20The\x20name\x20of\x20the\x20respons\
    e\x20field\x20whose\x20value\x20is\x20mapped\x20to\x20the\x20HTTP\n\x20r\
    esponse\x20body.\x20When\x20omitted,\x20the\x20entire\x20response\x20mes\
    sage\x20will\x20be\x20used\n\x20as\x20the\x20HTTP\x20response\x20body.\n\
    \n\x20NOTE:\x20The\x20referred\x20field\x20must\x20be\x20present\x20at\
    \x20the\x20top-level\x20of\x20the\x20response\n\x20message\x20type.\n\n\
    \x0f\n\x05\x04\x01\x02\x08\x04\x12\x06\xe7\x02\x02\xdf\x02\x12\n\r\n\x05\
    \x04\x01\x02\x08\x05\x12\x04\xe7\x02\x02\x08\n\r\n\x05\x04\x01\x02\x08\
    \x01\x12\x04\xe7\x02\t\x16\n\r\n\x05\x04\x01\x02\x08\x03\x12\x04\xe7\x02\
    \x19\x1b\n\xbb\x01\n\x04\x04\x01\x02\t\x12\x04\xec\x02\x02-\x1a\xac\x01\
    \x20Additional\x20HTTP\x20bindings\x20for\x20the\x20selector.\x20Nested\
    \x20bindings\x20must\n\x20not\x20contain\x20an\x20`additional_bindings`\
    \x20field\x20themselves\x20(that\x20is,\n\x20the\x20nesting\x20may\x20on\
    ly\x20be\x20one\x20level\x20deep).\n\n\r\n\x05\x04\x01\x02\t\x04\x12\x04\
    \xec\x02\x02\n\n\r\n\x05\x04\x01\x02\t\x06\x12\x04\xec\x02\x0b\x13\n\r\n\
    \x05\x04\x01\x02\t\x01\x12\x04\xec\x02\x14'\n\r\n\x05\x04\x01\x02\t\x03\
    \x12\x04\xec\x02*,\nG\n\x02\x04\x02\x12\x06\xf0\x02\0\xf6\x02\x01\x1a9\
    \x20A\x20custom\x20pattern\x20is\x20used\x20for\x20defining\x20custom\
    \x20HTTP\x20verb.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xf0\x02\x08\x19\n2\n\
    \x04\x04\x02\x02\0\x12\x04\xf2\x02\x02\x12\x1a$\x20The\x20name\x20of\x20\
    this\x20custom\x20HTTP\x20verb.\n\n\x0f\n\x05\x04\x02\x02\0\x04\x12\x06\
    \xf2\x02\x02\xf0\x02\x1b\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\xf2\x02\x02\
    \x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xf2\x02\t\r\n\r\n\x05\x04\x02\
    \x02\0\x03\x12\x04\xf2\x02\x10\x11\n5\n\x04\x04\x02\x02\x01\x12\x04\xf5\
    \x02\x02\x12\x1a'\x20The\x20path\x20matched\x20by\x20this\x20custom\x20v\
    erb.\n\n\x0f\n\x05\x04\x02\x02\x01\x04\x12\x06\xf5\x02\x02\xf2\x02\x12\n\
    \r\n\x05\x04\x02\x02\x01\x05\x12\x04\xf5\x02\x02\x08\n\r\n\x05\x04\x02\
    \x02\x01\x01\x12\x04\xf5\x02\t\r\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\
    \xf5\x02\x10\x11b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
