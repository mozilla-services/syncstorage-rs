// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/documentation.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct Documentation {
    // message fields
    pub summary: ::std::string::String,
    pub pages: ::protobuf::RepeatedField<Page>,
    pub rules: ::protobuf::RepeatedField<DocumentationRule>,
    pub documentation_root_url: ::std::string::String,
    pub service_root_url: ::std::string::String,
    pub overview: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Documentation {
    fn default() -> &'a Documentation {
        <Documentation as ::protobuf::Message>::default_instance()
    }
}

impl Documentation {
    pub fn new() -> Documentation {
        ::std::default::Default::default()
    }

    // string summary = 1;


    pub fn get_summary(&self) -> &str {
        &self.summary
    }
    pub fn clear_summary(&mut self) {
        self.summary.clear();
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: ::std::string::String) {
        self.summary = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_summary(&mut self) -> &mut ::std::string::String {
        &mut self.summary
    }

    // Take field
    pub fn take_summary(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.summary, ::std::string::String::new())
    }

    // repeated .google.api.Page pages = 5;


    pub fn get_pages(&self) -> &[Page] {
        &self.pages
    }
    pub fn clear_pages(&mut self) {
        self.pages.clear();
    }

    // Param is passed by value, moved
    pub fn set_pages(&mut self, v: ::protobuf::RepeatedField<Page>) {
        self.pages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pages(&mut self) -> &mut ::protobuf::RepeatedField<Page> {
        &mut self.pages
    }

    // Take field
    pub fn take_pages(&mut self) -> ::protobuf::RepeatedField<Page> {
        ::std::mem::replace(&mut self.pages, ::protobuf::RepeatedField::new())
    }

    // repeated .google.api.DocumentationRule rules = 3;


    pub fn get_rules(&self) -> &[DocumentationRule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<DocumentationRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<DocumentationRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<DocumentationRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }

    // string documentation_root_url = 4;


    pub fn get_documentation_root_url(&self) -> &str {
        &self.documentation_root_url
    }
    pub fn clear_documentation_root_url(&mut self) {
        self.documentation_root_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_documentation_root_url(&mut self, v: ::std::string::String) {
        self.documentation_root_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_documentation_root_url(&mut self) -> &mut ::std::string::String {
        &mut self.documentation_root_url
    }

    // Take field
    pub fn take_documentation_root_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.documentation_root_url, ::std::string::String::new())
    }

    // string service_root_url = 6;


    pub fn get_service_root_url(&self) -> &str {
        &self.service_root_url
    }
    pub fn clear_service_root_url(&mut self) {
        self.service_root_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_root_url(&mut self, v: ::std::string::String) {
        self.service_root_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_root_url(&mut self) -> &mut ::std::string::String {
        &mut self.service_root_url
    }

    // Take field
    pub fn take_service_root_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_root_url, ::std::string::String::new())
    }

    // string overview = 2;


    pub fn get_overview(&self) -> &str {
        &self.overview
    }
    pub fn clear_overview(&mut self) {
        self.overview.clear();
    }

    // Param is passed by value, moved
    pub fn set_overview(&mut self, v: ::std::string::String) {
        self.overview = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_overview(&mut self) -> &mut ::std::string::String {
        &mut self.overview
    }

    // Take field
    pub fn take_overview(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.overview, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Documentation {
    fn is_initialized(&self) -> bool {
        for v in &self.pages {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.summary)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pages)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.documentation_root_url)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_root_url)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.overview)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.summary.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.summary);
        }
        for value in &self.pages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.documentation_root_url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.documentation_root_url);
        }
        if !self.service_root_url.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.service_root_url);
        }
        if !self.overview.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.overview);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.summary.is_empty() {
            os.write_string(1, &self.summary)?;
        }
        for v in &self.pages {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.rules {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.documentation_root_url.is_empty() {
            os.write_string(4, &self.documentation_root_url)?;
        }
        if !self.service_root_url.is_empty() {
            os.write_string(6, &self.service_root_url)?;
        }
        if !self.overview.is_empty() {
            os.write_string(2, &self.overview)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Documentation {
        Documentation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "summary",
                |m: &Documentation| { &m.summary },
                |m: &mut Documentation| { &mut m.summary },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Page>>(
                "pages",
                |m: &Documentation| { &m.pages },
                |m: &mut Documentation| { &mut m.pages },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DocumentationRule>>(
                "rules",
                |m: &Documentation| { &m.rules },
                |m: &mut Documentation| { &mut m.rules },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "documentation_root_url",
                |m: &Documentation| { &m.documentation_root_url },
                |m: &mut Documentation| { &mut m.documentation_root_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_root_url",
                |m: &Documentation| { &m.service_root_url },
                |m: &mut Documentation| { &mut m.service_root_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "overview",
                |m: &Documentation| { &m.overview },
                |m: &mut Documentation| { &mut m.overview },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Documentation>(
                "Documentation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Documentation {
        static instance: ::protobuf::rt::LazyV2<Documentation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Documentation::new)
    }
}

impl ::protobuf::Clear for Documentation {
    fn clear(&mut self) {
        self.summary.clear();
        self.pages.clear();
        self.rules.clear();
        self.documentation_root_url.clear();
        self.service_root_url.clear();
        self.overview.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Documentation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Documentation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DocumentationRule {
    // message fields
    pub selector: ::std::string::String,
    pub description: ::std::string::String,
    pub deprecation_description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DocumentationRule {
    fn default() -> &'a DocumentationRule {
        <DocumentationRule as ::protobuf::Message>::default_instance()
    }
}

impl DocumentationRule {
    pub fn new() -> DocumentationRule {
        ::std::default::Default::default()
    }

    // string selector = 1;


    pub fn get_selector(&self) -> &str {
        &self.selector
    }
    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: ::std::string::String) {
        self.selector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut ::std::string::String {
        &mut self.selector
    }

    // Take field
    pub fn take_selector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.selector, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string deprecation_description = 3;


    pub fn get_deprecation_description(&self) -> &str {
        &self.deprecation_description
    }
    pub fn clear_deprecation_description(&mut self) {
        self.deprecation_description.clear();
    }

    // Param is passed by value, moved
    pub fn set_deprecation_description(&mut self, v: ::std::string::String) {
        self.deprecation_description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deprecation_description(&mut self) -> &mut ::std::string::String {
        &mut self.deprecation_description
    }

    // Take field
    pub fn take_deprecation_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deprecation_description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DocumentationRule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.selector)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deprecation_description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.deprecation_description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.deprecation_description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.deprecation_description.is_empty() {
            os.write_string(3, &self.deprecation_description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DocumentationRule {
        DocumentationRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "selector",
                |m: &DocumentationRule| { &m.selector },
                |m: &mut DocumentationRule| { &mut m.selector },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &DocumentationRule| { &m.description },
                |m: &mut DocumentationRule| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "deprecation_description",
                |m: &DocumentationRule| { &m.deprecation_description },
                |m: &mut DocumentationRule| { &mut m.deprecation_description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DocumentationRule>(
                "DocumentationRule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DocumentationRule {
        static instance: ::protobuf::rt::LazyV2<DocumentationRule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DocumentationRule::new)
    }
}

impl ::protobuf::Clear for DocumentationRule {
    fn clear(&mut self) {
        self.selector.clear();
        self.description.clear();
        self.deprecation_description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DocumentationRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DocumentationRule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Page {
    // message fields
    pub name: ::std::string::String,
    pub content: ::std::string::String,
    pub subpages: ::protobuf::RepeatedField<Page>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Page {
    fn default() -> &'a Page {
        <Page as ::protobuf::Message>::default_instance()
    }
}

impl Page {
    pub fn new() -> Page {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string content = 2;


    pub fn get_content(&self) -> &str {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::string::String) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::string::String {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.content, ::std::string::String::new())
    }

    // repeated .google.api.Page subpages = 3;


    pub fn get_subpages(&self) -> &[Page] {
        &self.subpages
    }
    pub fn clear_subpages(&mut self) {
        self.subpages.clear();
    }

    // Param is passed by value, moved
    pub fn set_subpages(&mut self, v: ::protobuf::RepeatedField<Page>) {
        self.subpages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_subpages(&mut self) -> &mut ::protobuf::RepeatedField<Page> {
        &mut self.subpages
    }

    // Take field
    pub fn take_subpages(&mut self) -> ::protobuf::RepeatedField<Page> {
        ::std::mem::replace(&mut self.subpages, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Page {
    fn is_initialized(&self) -> bool {
        for v in &self.subpages {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.content)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.subpages)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.content);
        }
        for value in &self.subpages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.content.is_empty() {
            os.write_string(2, &self.content)?;
        }
        for v in &self.subpages {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Page {
        Page::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Page| { &m.name },
                |m: &mut Page| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "content",
                |m: &Page| { &m.content },
                |m: &mut Page| { &mut m.content },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Page>>(
                "subpages",
                |m: &Page| { &m.subpages },
                |m: &mut Page| { &mut m.subpages },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Page>(
                "Page",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Page {
        static instance: ::protobuf::rt::LazyV2<Page> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Page::new)
    }
}

impl ::protobuf::Clear for Page {
    fn clear(&mut self) {
        self.name.clear();
        self.content.clear();
        self.subpages.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Page {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Page {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1egoogle/api/documentation.proto\x12\ngoogle.api\"\x82\x02\n\rDocume\
    ntation\x12\x18\n\x07summary\x18\x01\x20\x01(\tR\x07summary\x12&\n\x05pa\
    ges\x18\x05\x20\x03(\x0b2\x10.google.api.PageR\x05pages\x123\n\x05rules\
    \x18\x03\x20\x03(\x0b2\x1d.google.api.DocumentationRuleR\x05rules\x124\n\
    \x16documentation_root_url\x18\x04\x20\x01(\tR\x14documentationRootUrl\
    \x12(\n\x10service_root_url\x18\x06\x20\x01(\tR\x0eserviceRootUrl\x12\
    \x1a\n\x08overview\x18\x02\x20\x01(\tR\x08overview\"\x8a\x01\n\x11Docume\
    ntationRule\x12\x1a\n\x08selector\x18\x01\x20\x01(\tR\x08selector\x12\
    \x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\x127\n\x17depre\
    cation_description\x18\x03\x20\x01(\tR\x16deprecationDescription\"b\n\
    \x04Page\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\x07cont\
    ent\x18\x02\x20\x01(\tR\x07content\x12,\n\x08subpages\x18\x03\x20\x03(\
    \x0b2\x10.google.api.PageR\x08subpagesBt\n\x0ecom.google.apiB\x12Documen\
    tationProtoP\x01ZEgoogle.golang.org/genproto/googleapis/api/serviceconfi\
    g;serviceconfig\xa2\x02\x04GAPIJ\xf22\n\x07\x12\x05\x0e\0\xa1\x01\x01\n\
    \xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202020\x20Go\
    ogle\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Ver\
    sion\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20th\
    is\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\
    \x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\
    \x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Un\
    less\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\
    \x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\x20\
    is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20\
    WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20expres\
    s\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x13\n\x08\n\x01\x08\
    \x12\x03\x12\0\\\n\t\n\x02\x08\x0b\x12\x03\x12\0\\\n\x08\n\x01\x08\x12\
    \x03\x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\0\"\n\x08\n\x01\x08\x12\x03\x14\
    \03\n\t\n\x02\x08\x08\x12\x03\x14\03\n\x08\n\x01\x08\x12\x03\x15\0'\n\t\
    \n\x02\x08\x01\x12\x03\x15\0'\n\x08\n\x01\x08\x12\x03\x16\0\"\n\t\n\x02\
    \x08$\x12\x03\x16\0\"\n\xf3\x11\n\x02\x04\0\x12\x04O\0s\x01\x1a\xe6\x11\
    \x20`Documentation`\x20provides\x20the\x20information\x20for\x20describi\
    ng\x20a\x20service.\n\n\x20Example:\n\x20<pre><code>documentation:\n\x20\
    \x20\x20summary:\x20>\n\x20\x20\x20\x20\x20The\x20Google\x20Calendar\x20\
    API\x20gives\x20access\n\x20\x20\x20\x20\x20to\x20most\x20calendar\x20fe\
    atures.\n\x20\x20\x20pages:\n\x20\x20\x20-\x20name:\x20Overview\n\x20\
    \x20\x20\x20\x20content:\x20&#40;==\x20include\x20google/foo/overview.md\
    \x20==&#41;\n\x20\x20\x20-\x20name:\x20Tutorial\n\x20\x20\x20\x20\x20con\
    tent:\x20&#40;==\x20include\x20google/foo/tutorial.md\x20==&#41;\n\x20\
    \x20\x20\x20\x20subpages;\n\x20\x20\x20\x20\x20-\x20name:\x20Java\n\x20\
    \x20\x20\x20\x20\x20\x20content:\x20&#40;==\x20include\x20google/foo/tut\
    orial_java.md\x20==&#41;\n\x20\x20\x20rules:\n\x20\x20\x20-\x20selector:\
    \x20google.calendar.Calendar.Get\n\x20\x20\x20\x20\x20description:\x20>\
    \n\x20\x20\x20\x20\x20\x20\x20...\n\x20\x20\x20-\x20selector:\x20google.\
    calendar.Calendar.Put\n\x20\x20\x20\x20\x20description:\x20>\n\x20\x20\
    \x20\x20\x20\x20\x20...\n\x20</code></pre>\n\x20Documentation\x20is\x20p\
    rovided\x20in\x20markdown\x20syntax.\x20In\x20addition\x20to\n\x20standa\
    rd\x20markdown\x20features,\x20definition\x20lists,\x20tables\x20and\x20\
    fenced\n\x20code\x20blocks\x20are\x20supported.\x20Section\x20headers\
    \x20can\x20be\x20provided\x20and\x20are\n\x20interpreted\x20relative\x20\
    to\x20the\x20section\x20nesting\x20of\x20the\x20context\x20where\n\x20a\
    \x20documentation\x20fragment\x20is\x20embedded.\n\n\x20Documentation\
    \x20from\x20the\x20IDL\x20is\x20merged\x20with\x20documentation\x20defin\
    ed\n\x20via\x20the\x20config\x20at\x20normalization\x20time,\x20where\
    \x20documentation\x20provided\n\x20by\x20config\x20rules\x20overrides\
    \x20IDL\x20provided.\n\n\x20A\x20number\x20of\x20constructs\x20specific\
    \x20to\x20the\x20API\x20platform\x20are\x20supported\n\x20in\x20document\
    ation\x20text.\n\n\x20In\x20order\x20to\x20reference\x20a\x20proto\x20el\
    ement,\x20the\x20following\n\x20notation\x20can\x20be\x20used:\n\x20<pre\
    ><code>&#91;fully.qualified.proto.name]&#91;]</code></pre>\n\x20To\x20ov\
    erride\x20the\x20display\x20text\x20used\x20for\x20the\x20link,\x20this\
    \x20can\x20be\x20used:\n\x20<pre><code>&#91;display\x20text]&#91;fully.q\
    ualified.proto.name]</code></pre>\n\x20Text\x20can\x20be\x20excluded\x20\
    from\x20doc\x20using\x20the\x20following\x20notation:\n\x20<pre><code>&#\
    40;--\x20internal\x20comment\x20--&#41;</code></pre>\n\n\x20A\x20few\x20\
    directives\x20are\x20available\x20in\x20documentation.\x20Note\x20that\n\
    \x20directives\x20must\x20appear\x20on\x20a\x20single\x20line\x20to\x20b\
    e\x20properly\n\x20identified.\x20The\x20`include`\x20directive\x20inclu\
    des\x20a\x20markdown\x20file\x20from\n\x20an\x20external\x20source:\n\
    \x20<pre><code>&#40;==\x20include\x20path/to/file\x20==&#41;</code></pre\
    >\n\x20The\x20`resource_for`\x20directive\x20marks\x20a\x20message\x20to\
    \x20be\x20the\x20resource\x20of\n\x20a\x20collection\x20in\x20REST\x20vi\
    ew.\x20If\x20it\x20is\x20not\x20specified,\x20tools\x20attempt\n\x20to\
    \x20infer\x20the\x20resource\x20from\x20the\x20operations\x20in\x20a\x20\
    collection:\n\x20<pre><code>&#40;==\x20resource_for\x20v1.shelves.books\
    \x20==&#41;</code></pre>\n\x20The\x20directive\x20`suppress_warning`\x20\
    does\x20not\x20directly\x20affect\x20documentation\n\x20and\x20is\x20doc\
    umented\x20together\x20with\x20service\x20config\x20validation.\n\n\n\n\
    \x03\x04\0\x01\x12\x03O\x08\x15\n]\n\x04\x04\0\x02\0\x12\x03R\x02\x15\
    \x1aP\x20A\x20short\x20summary\x20of\x20what\x20the\x20service\x20does.\
    \x20Can\x20only\x20be\x20provided\x20by\n\x20plain\x20text.\n\n\r\n\x05\
    \x04\0\x02\0\x04\x12\x04R\x02O\x17\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03R\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03R\t\x10\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03R\x13\x14\n=\n\x04\x04\0\x02\x01\x12\x03U\x02\x1a\x1a0\
    \x20The\x20top\x20level\x20pages\x20for\x20the\x20documentation\x20set.\
    \n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03U\x02\n\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03U\x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03U\x10\x15\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03U\x18\x19\n\x9e\x01\n\x04\x04\0\
    \x02\x02\x12\x03Z\x02'\x1a\x90\x01\x20A\x20list\x20of\x20documentation\
    \x20rules\x20that\x20apply\x20to\x20individual\x20API\x20elements.\n\n\
    \x20**NOTE:**\x20All\x20service\x20configuration\x20rules\x20follow\x20\
    \"last\x20one\x20wins\"\x20order.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03Z\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03Z\x0b\x1c\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03Z\x1d\"\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03Z\
    %&\n4\n\x04\x04\0\x02\x03\x12\x03]\x02$\x1a'\x20The\x20URL\x20to\x20the\
    \x20root\x20of\x20documentation.\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04]\
    \x02Z'\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03]\t\x1f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03]\"#\n\
    \xf6\x01\n\x04\x04\0\x02\x04\x12\x03c\x02\x1e\x1a\xe8\x01\x20Specifies\
    \x20the\x20service\x20root\x20url\x20if\x20the\x20default\x20one\x20(the\
    \x20service\x20name\n\x20from\x20the\x20yaml\x20file)\x20is\x20not\x20su\
    itable.\x20This\x20can\x20be\x20seen\x20in\x20any\x20fully\n\x20specifie\
    d\x20service\x20urls\x20as\x20well\x20as\x20sections\x20that\x20show\x20\
    a\x20base\x20that\x20other\n\x20urls\x20are\x20relative\x20to.\n\n\r\n\
    \x05\x04\0\x02\x04\x04\x12\x04c\x02]$\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03c\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03c\t\x19\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03c\x1c\x1d\n\xbc\x03\n\x04\x04\0\x02\x05\x12\
    \x03r\x02\x16\x1a\xae\x03\x20Declares\x20a\x20single\x20overview\x20page\
    .\x20For\x20example:\n\x20<pre><code>documentation:\n\x20\x20\x20summary\
    :\x20...\n\x20\x20\x20overview:\x20&#40;==\x20include\x20overview.md\x20\
    ==&#41;\n\x20</code></pre>\n\x20This\x20is\x20a\x20shortcut\x20for\x20th\
    e\x20following\x20declaration\x20(using\x20pages\x20style):\n\x20<pre><c\
    ode>documentation:\n\x20\x20\x20summary:\x20...\n\x20\x20\x20pages:\n\
    \x20\x20\x20-\x20name:\x20Overview\n\x20\x20\x20\x20\x20content:\x20&#40\
    ;==\x20include\x20overview.md\x20==&#41;\n\x20</code></pre>\n\x20Note:\
    \x20you\x20cannot\x20specify\x20both\x20`overview`\x20field\x20and\x20`p\
    ages`\x20field.\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x04r\x02c\x1e\n\x0c\n\
    \x05\x04\0\x02\x05\x05\x12\x03r\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03r\t\x11\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03r\x14\x15\nW\n\x02\
    \x04\x01\x12\x05v\0\x85\x01\x01\x1aJ\x20A\x20documentation\x20rule\x20pr\
    ovides\x20information\x20about\x20individual\x20API\x20elements.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03v\x08\x19\n\xb0\x03\n\x04\x04\x01\x02\0\x12\x03}\
    \x02\x16\x1a\xa2\x03\x20The\x20selector\x20is\x20a\x20comma-separated\
    \x20list\x20of\x20patterns.\x20Each\x20pattern\x20is\x20a\n\x20qualified\
    \x20name\x20of\x20the\x20element\x20which\x20may\x20end\x20in\x20\"*\",\
    \x20indicating\x20a\x20wildcard.\n\x20Wildcards\x20are\x20only\x20allowe\
    d\x20at\x20the\x20end\x20and\x20for\x20a\x20whole\x20component\x20of\x20\
    the\n\x20qualified\x20name,\x20i.e.\x20\"foo.*\"\x20is\x20ok,\x20but\x20\
    not\x20\"foo.b*\"\x20or\x20\"foo.*.bar\".\x20A\n\x20wildcard\x20will\x20\
    match\x20one\x20or\x20more\x20components.\x20To\x20specify\x20a\x20defau\
    lt\x20for\x20all\n\x20applicable\x20elements,\x20the\x20whole\x20pattern\
    \x20\"*\"\x20is\x20used.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04}\x02v\x1b\
    \n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03}\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03}\t\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03}\x14\x15\n3\
    \n\x04\x04\x01\x02\x01\x12\x04\x80\x01\x02\x19\x1a%\x20Description\x20of\
    \x20the\x20selected\x20API(s).\n\n\x0e\n\x05\x04\x01\x02\x01\x04\x12\x05\
    \x80\x01\x02}\x16\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\x80\x01\x02\x08\
    \n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\x80\x01\t\x14\n\r\n\x05\x04\x01\
    \x02\x01\x03\x12\x04\x80\x01\x17\x18\n\x80\x01\n\x04\x04\x01\x02\x02\x12\
    \x04\x84\x01\x02%\x1ar\x20Deprecation\x20description\x20of\x20the\x20sel\
    ected\x20element(s).\x20It\x20can\x20be\x20provided\x20if\n\x20an\x20ele\
    ment\x20is\x20marked\x20as\x20`deprecated`.\n\n\x0f\n\x05\x04\x01\x02\
    \x02\x04\x12\x06\x84\x01\x02\x80\x01\x19\n\r\n\x05\x04\x01\x02\x02\x05\
    \x12\x04\x84\x01\x02\x08\n\r\n\x05\x04\x01\x02\x02\x01\x12\x04\x84\x01\t\
    \x20\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\x84\x01#$\n~\n\x02\x04\x02\
    \x12\x06\x89\x01\0\xa1\x01\x01\x1ap\x20Represents\x20a\x20documentation\
    \x20page.\x20A\x20page\x20can\x20contain\x20subpages\x20to\x20represent\
    \n\x20nested\x20documentation\x20set\x20structure.\n\n\x0b\n\x03\x04\x02\
    \x01\x12\x04\x89\x01\x08\x0c\n\xda\x04\n\x04\x04\x02\x02\0\x12\x04\x98\
    \x01\x02\x12\x1a\xcb\x04\x20The\x20name\x20of\x20the\x20page.\x20It\x20w\
    ill\x20be\x20used\x20as\x20an\x20identity\x20of\x20the\x20page\x20to\n\
    \x20generate\x20URI\x20of\x20the\x20page,\x20text\x20of\x20the\x20link\
    \x20to\x20this\x20page\x20in\x20navigation,\n\x20etc.\x20The\x20full\x20\
    page\x20name\x20(start\x20from\x20the\x20root\x20page\x20name\x20to\x20t\
    his\x20page\n\x20concatenated\x20with\x20`.`)\x20can\x20be\x20used\x20as\
    \x20reference\x20to\x20the\x20page\x20in\x20your\n\x20documentation.\x20\
    For\x20example:\n\x20<pre><code>pages:\n\x20-\x20name:\x20Tutorial\n\x20\
    \x20\x20content:\x20&#40;==\x20include\x20tutorial.md\x20==&#41;\n\x20\
    \x20\x20subpages:\n\x20\x20\x20-\x20name:\x20Java\n\x20\x20\x20\x20\x20c\
    ontent:\x20&#40;==\x20include\x20tutorial_java.md\x20==&#41;\n\x20</code\
    ></pre>\n\x20You\x20can\x20reference\x20`Java`\x20page\x20using\x20Markd\
    own\x20reference\x20link\x20syntax:\n\x20`[Java][Tutorial.Java]`.\n\n\
    \x0f\n\x05\x04\x02\x02\0\x04\x12\x06\x98\x01\x02\x89\x01\x0e\n\r\n\x05\
    \x04\x02\x02\0\x05\x12\x04\x98\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\
    \x12\x04\x98\x01\t\r\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\x98\x01\x10\x11\
    \n\x94\x01\n\x04\x04\x02\x02\x01\x12\x04\x9c\x01\x02\x15\x1a\x85\x01\x20\
    The\x20Markdown\x20content\x20of\x20the\x20page.\x20You\x20can\x20use\
    \x20<code>&#40;==\x20include\x20{path}\n\x20==&#41;</code>\x20to\x20incl\
    ude\x20content\x20from\x20a\x20Markdown\x20file.\n\n\x0f\n\x05\x04\x02\
    \x02\x01\x04\x12\x06\x9c\x01\x02\x98\x01\x12\n\r\n\x05\x04\x02\x02\x01\
    \x05\x12\x04\x9c\x01\x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x9c\
    \x01\t\x10\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\x9c\x01\x13\x14\nu\n\
    \x04\x04\x02\x02\x02\x12\x04\xa0\x01\x02\x1d\x1ag\x20Subpages\x20of\x20t\
    his\x20page.\x20The\x20order\x20of\x20subpages\x20specified\x20here\x20w\
    ill\x20be\n\x20honored\x20in\x20the\x20generated\x20docset.\n\n\r\n\x05\
    \x04\x02\x02\x02\x04\x12\x04\xa0\x01\x02\n\n\r\n\x05\x04\x02\x02\x02\x06\
    \x12\x04\xa0\x01\x0b\x0f\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\xa0\x01\
    \x10\x18\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\xa0\x01\x1b\x1cb\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
