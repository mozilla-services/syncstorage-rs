// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/servicecontrol/v1/log_entry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct LogEntry {
    // message fields
    pub name: ::std::string::String,
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub severity: super::log_severity::LogSeverity,
    pub http_request: ::protobuf::SingularPtrField<super::http_request::HttpRequest>,
    pub trace: ::std::string::String,
    pub insert_id: ::std::string::String,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub operation: ::protobuf::SingularPtrField<LogEntryOperation>,
    pub source_location: ::protobuf::SingularPtrField<LogEntrySourceLocation>,
    // message oneof groups
    pub payload: ::std::option::Option<LogEntry_oneof_payload>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogEntry {
    fn default() -> &'a LogEntry {
        <LogEntry as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LogEntry_oneof_payload {
    proto_payload(::protobuf::well_known_types::Any),
    text_payload(::std::string::String),
    struct_payload(::protobuf::well_known_types::Struct),
}

impl LogEntry {
    pub fn new() -> LogEntry {
        ::std::default::Default::default()
    }

    // string name = 10;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp timestamp = 11;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.logging.type.LogSeverity severity = 12;


    pub fn get_severity(&self) -> super::log_severity::LogSeverity {
        self.severity
    }
    pub fn clear_severity(&mut self) {
        self.severity = super::log_severity::LogSeverity::DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_severity(&mut self, v: super::log_severity::LogSeverity) {
        self.severity = v;
    }

    // .google.api.servicecontrol.v1.HttpRequest http_request = 14;


    pub fn get_http_request(&self) -> &super::http_request::HttpRequest {
        self.http_request.as_ref().unwrap_or_else(|| <super::http_request::HttpRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http_request(&mut self) {
        self.http_request.clear();
    }

    pub fn has_http_request(&self) -> bool {
        self.http_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_request(&mut self, v: super::http_request::HttpRequest) {
        self.http_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_request(&mut self) -> &mut super::http_request::HttpRequest {
        if self.http_request.is_none() {
            self.http_request.set_default();
        }
        self.http_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_request(&mut self) -> super::http_request::HttpRequest {
        self.http_request.take().unwrap_or_else(|| super::http_request::HttpRequest::new())
    }

    // string trace = 15;


    pub fn get_trace(&self) -> &str {
        &self.trace
    }
    pub fn clear_trace(&mut self) {
        self.trace.clear();
    }

    // Param is passed by value, moved
    pub fn set_trace(&mut self, v: ::std::string::String) {
        self.trace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trace(&mut self) -> &mut ::std::string::String {
        &mut self.trace
    }

    // Take field
    pub fn take_trace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trace, ::std::string::String::new())
    }

    // string insert_id = 4;


    pub fn get_insert_id(&self) -> &str {
        &self.insert_id
    }
    pub fn clear_insert_id(&mut self) {
        self.insert_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_insert_id(&mut self, v: ::std::string::String) {
        self.insert_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_insert_id(&mut self) -> &mut ::std::string::String {
        &mut self.insert_id
    }

    // Take field
    pub fn take_insert_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.insert_id, ::std::string::String::new())
    }

    // repeated .google.api.servicecontrol.v1.LogEntry.LabelsEntry labels = 13;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // .google.protobuf.Any proto_payload = 2;


    pub fn get_proto_payload(&self) -> &::protobuf::well_known_types::Any {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_proto_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_proto_payload(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proto_payload(&mut self, v: ::protobuf::well_known_types::Any) {
        self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proto_payload(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(::protobuf::well_known_types::Any::new()));
        }
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proto_payload(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_proto_payload() {
            match self.payload.take() {
                ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }

    // string text_payload = 3;


    pub fn get_text_payload(&self) -> &str {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_text_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_text_payload(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text_payload(&mut self, v: ::std::string::String) {
        self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text_payload(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(::std::string::String::new()));
        }
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text_payload(&mut self) -> ::std::string::String {
        if self.has_text_payload() {
            match self.payload.take() {
                ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.protobuf.Struct struct_payload = 6;


    pub fn get_struct_payload(&self) -> &::protobuf::well_known_types::Struct {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::struct_payload(ref v)) => v,
            _ => <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_struct_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_struct_payload(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::struct_payload(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_struct_payload(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::struct_payload(v))
    }

    // Mutable pointer to the field.
    pub fn mut_struct_payload(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if let ::std::option::Option::Some(LogEntry_oneof_payload::struct_payload(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::struct_payload(::protobuf::well_known_types::Struct::new()));
        }
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::struct_payload(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_struct_payload(&mut self) -> ::protobuf::well_known_types::Struct {
        if self.has_struct_payload() {
            match self.payload.take() {
                ::std::option::Option::Some(LogEntry_oneof_payload::struct_payload(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Struct::new()
        }
    }

    // .google.api.servicecontrol.v1.LogEntryOperation operation = 16;


    pub fn get_operation(&self) -> &LogEntryOperation {
        self.operation.as_ref().unwrap_or_else(|| <LogEntryOperation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_operation(&mut self) {
        self.operation.clear();
    }

    pub fn has_operation(&self) -> bool {
        self.operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: LogEntryOperation) {
        self.operation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operation(&mut self) -> &mut LogEntryOperation {
        if self.operation.is_none() {
            self.operation.set_default();
        }
        self.operation.as_mut().unwrap()
    }

    // Take field
    pub fn take_operation(&mut self) -> LogEntryOperation {
        self.operation.take().unwrap_or_else(|| LogEntryOperation::new())
    }

    // .google.api.servicecontrol.v1.LogEntrySourceLocation source_location = 17;


    pub fn get_source_location(&self) -> &LogEntrySourceLocation {
        self.source_location.as_ref().unwrap_or_else(|| <LogEntrySourceLocation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_source_location(&mut self) {
        self.source_location.clear();
    }

    pub fn has_source_location(&self) -> bool {
        self.source_location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_location(&mut self, v: LogEntrySourceLocation) {
        self.source_location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_location(&mut self) -> &mut LogEntrySourceLocation {
        if self.source_location.is_none() {
            self.source_location.set_default();
        }
        self.source_location.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_location(&mut self) -> LogEntrySourceLocation {
        self.source_location.take().unwrap_or_else(|| LogEntrySourceLocation::new())
    }
}

impl ::protobuf::Message for LogEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.http_request {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(LogEntry_oneof_payload::proto_payload(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(LogEntry_oneof_payload::struct_payload(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.operation {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.source_location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                12 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.severity, 12, &mut self.unknown_fields)?
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http_request)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trace)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.insert_id)?;
                },
                13 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::struct_payload(is.read_message()?));
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operation)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source_location)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.name);
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.severity != super::log_severity::LogSeverity::DEFAULT {
            my_size += ::protobuf::rt::enum_size(12, self.severity);
        }
        if let Some(ref v) = self.http_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.trace.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.trace);
        }
        if !self.insert_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.insert_id);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(13, &self.labels);
        if let Some(ref v) = self.operation.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.source_location.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &LogEntry_oneof_payload::proto_payload(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &LogEntry_oneof_payload::text_payload(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &LogEntry_oneof_payload::struct_payload(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(10, &self.name)?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.severity != super::log_severity::LogSeverity::DEFAULT {
            os.write_enum(12, ::protobuf::ProtobufEnum::value(&self.severity))?;
        }
        if let Some(ref v) = self.http_request.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.trace.is_empty() {
            os.write_string(15, &self.trace)?;
        }
        if !self.insert_id.is_empty() {
            os.write_string(4, &self.insert_id)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(13, &self.labels, os)?;
        if let Some(ref v) = self.operation.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.source_location.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &LogEntry_oneof_payload::proto_payload(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &LogEntry_oneof_payload::text_payload(ref v) => {
                    os.write_string(3, v)?;
                },
                &LogEntry_oneof_payload::struct_payload(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogEntry {
        LogEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &LogEntry| { &m.name },
                |m: &mut LogEntry| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &LogEntry| { &m.timestamp },
                |m: &mut LogEntry| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::log_severity::LogSeverity>>(
                "severity",
                |m: &LogEntry| { &m.severity },
                |m: &mut LogEntry| { &mut m.severity },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::http_request::HttpRequest>>(
                "http_request",
                |m: &LogEntry| { &m.http_request },
                |m: &mut LogEntry| { &mut m.http_request },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trace",
                |m: &LogEntry| { &m.trace },
                |m: &mut LogEntry| { &mut m.trace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "insert_id",
                |m: &LogEntry| { &m.insert_id },
                |m: &mut LogEntry| { &mut m.insert_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &LogEntry| { &m.labels },
                |m: &mut LogEntry| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "proto_payload",
                LogEntry::has_proto_payload,
                LogEntry::get_proto_payload,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "text_payload",
                LogEntry::has_text_payload,
                LogEntry::get_text_payload,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Struct>(
                "struct_payload",
                LogEntry::has_struct_payload,
                LogEntry::get_struct_payload,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogEntryOperation>>(
                "operation",
                |m: &LogEntry| { &m.operation },
                |m: &mut LogEntry| { &mut m.operation },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogEntrySourceLocation>>(
                "source_location",
                |m: &LogEntry| { &m.source_location },
                |m: &mut LogEntry| { &mut m.source_location },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogEntry>(
                "LogEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogEntry {
        static instance: ::protobuf::rt::LazyV2<LogEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogEntry::new)
    }
}

impl ::protobuf::Clear for LogEntry {
    fn clear(&mut self) {
        self.name.clear();
        self.timestamp.clear();
        self.severity = super::log_severity::LogSeverity::DEFAULT;
        self.http_request.clear();
        self.trace.clear();
        self.insert_id.clear();
        self.labels.clear();
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.operation.clear();
        self.source_location.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogEntryOperation {
    // message fields
    pub id: ::std::string::String,
    pub producer: ::std::string::String,
    pub first: bool,
    pub last: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogEntryOperation {
    fn default() -> &'a LogEntryOperation {
        <LogEntryOperation as ::protobuf::Message>::default_instance()
    }
}

impl LogEntryOperation {
    pub fn new() -> LogEntryOperation {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string producer = 2;


    pub fn get_producer(&self) -> &str {
        &self.producer
    }
    pub fn clear_producer(&mut self) {
        self.producer.clear();
    }

    // Param is passed by value, moved
    pub fn set_producer(&mut self, v: ::std::string::String) {
        self.producer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_producer(&mut self) -> &mut ::std::string::String {
        &mut self.producer
    }

    // Take field
    pub fn take_producer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.producer, ::std::string::String::new())
    }

    // bool first = 3;


    pub fn get_first(&self) -> bool {
        self.first
    }
    pub fn clear_first(&mut self) {
        self.first = false;
    }

    // Param is passed by value, moved
    pub fn set_first(&mut self, v: bool) {
        self.first = v;
    }

    // bool last = 4;


    pub fn get_last(&self) -> bool {
        self.last
    }
    pub fn clear_last(&mut self) {
        self.last = false;
    }

    // Param is passed by value, moved
    pub fn set_last(&mut self, v: bool) {
        self.last = v;
    }
}

impl ::protobuf::Message for LogEntryOperation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.producer)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.first = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.last = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.producer.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.producer);
        }
        if self.first != false {
            my_size += 2;
        }
        if self.last != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.producer.is_empty() {
            os.write_string(2, &self.producer)?;
        }
        if self.first != false {
            os.write_bool(3, self.first)?;
        }
        if self.last != false {
            os.write_bool(4, self.last)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogEntryOperation {
        LogEntryOperation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &LogEntryOperation| { &m.id },
                |m: &mut LogEntryOperation| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "producer",
                |m: &LogEntryOperation| { &m.producer },
                |m: &mut LogEntryOperation| { &mut m.producer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "first",
                |m: &LogEntryOperation| { &m.first },
                |m: &mut LogEntryOperation| { &mut m.first },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "last",
                |m: &LogEntryOperation| { &m.last },
                |m: &mut LogEntryOperation| { &mut m.last },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogEntryOperation>(
                "LogEntryOperation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogEntryOperation {
        static instance: ::protobuf::rt::LazyV2<LogEntryOperation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogEntryOperation::new)
    }
}

impl ::protobuf::Clear for LogEntryOperation {
    fn clear(&mut self) {
        self.id.clear();
        self.producer.clear();
        self.first = false;
        self.last = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogEntryOperation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogEntryOperation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogEntrySourceLocation {
    // message fields
    pub file: ::std::string::String,
    pub line: i64,
    pub function: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogEntrySourceLocation {
    fn default() -> &'a LogEntrySourceLocation {
        <LogEntrySourceLocation as ::protobuf::Message>::default_instance()
    }
}

impl LogEntrySourceLocation {
    pub fn new() -> LogEntrySourceLocation {
        ::std::default::Default::default()
    }

    // string file = 1;


    pub fn get_file(&self) -> &str {
        &self.file
    }
    pub fn clear_file(&mut self) {
        self.file.clear();
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: ::std::string::String) {
        self.file = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file(&mut self) -> &mut ::std::string::String {
        &mut self.file
    }

    // Take field
    pub fn take_file(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.file, ::std::string::String::new())
    }

    // int64 line = 2;


    pub fn get_line(&self) -> i64 {
        self.line
    }
    pub fn clear_line(&mut self) {
        self.line = 0;
    }

    // Param is passed by value, moved
    pub fn set_line(&mut self, v: i64) {
        self.line = v;
    }

    // string function = 3;


    pub fn get_function(&self) -> &str {
        &self.function
    }
    pub fn clear_function(&mut self) {
        self.function.clear();
    }

    // Param is passed by value, moved
    pub fn set_function(&mut self, v: ::std::string::String) {
        self.function = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_function(&mut self) -> &mut ::std::string::String {
        &mut self.function
    }

    // Take field
    pub fn take_function(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.function, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LogEntrySourceLocation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.file)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.line = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.function)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.file.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.file);
        }
        if self.line != 0 {
            my_size += ::protobuf::rt::value_size(2, self.line, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.function.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.function);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.file.is_empty() {
            os.write_string(1, &self.file)?;
        }
        if self.line != 0 {
            os.write_int64(2, self.line)?;
        }
        if !self.function.is_empty() {
            os.write_string(3, &self.function)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogEntrySourceLocation {
        LogEntrySourceLocation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "file",
                |m: &LogEntrySourceLocation| { &m.file },
                |m: &mut LogEntrySourceLocation| { &mut m.file },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "line",
                |m: &LogEntrySourceLocation| { &m.line },
                |m: &mut LogEntrySourceLocation| { &mut m.line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "function",
                |m: &LogEntrySourceLocation| { &m.function },
                |m: &mut LogEntrySourceLocation| { &mut m.function },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogEntrySourceLocation>(
                "LogEntrySourceLocation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogEntrySourceLocation {
        static instance: ::protobuf::rt::LazyV2<LogEntrySourceLocation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogEntrySourceLocation::new)
    }
}

impl ::protobuf::Clear for LogEntrySourceLocation {
    fn clear(&mut self) {
        self.file.clear();
        self.line = 0;
        self.function.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogEntrySourceLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogEntrySourceLocation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,google/api/servicecontrol/v1/log_entry.proto\x12\x1cgoogle.api.servic\
    econtrol.v1\x1a/google/api/servicecontrol/v1/http_request.proto\x1a&goog\
    le/logging/type/log_severity.proto\x1a\x19google/protobuf/any.proto\x1a\
    \x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\
    \"\xfb\x05\n\x08LogEntry\x12\x12\n\x04name\x18\n\x20\x01(\tR\x04name\x12\
    8\n\ttimestamp\x18\x0b\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttim\
    estamp\x12<\n\x08severity\x18\x0c\x20\x01(\x0e2\x20.google.logging.type.\
    LogSeverityR\x08severity\x12L\n\x0chttp_request\x18\x0e\x20\x01(\x0b2).g\
    oogle.api.servicecontrol.v1.HttpRequestR\x0bhttpRequest\x12\x14\n\x05tra\
    ce\x18\x0f\x20\x01(\tR\x05trace\x12\x1b\n\tinsert_id\x18\x04\x20\x01(\tR\
    \x08insertId\x12J\n\x06labels\x18\r\x20\x03(\x0b22.google.api.servicecon\
    trol.v1.LogEntry.LabelsEntryR\x06labels\x12;\n\rproto_payload\x18\x02\
    \x20\x01(\x0b2\x14.google.protobuf.AnyH\0R\x0cprotoPayload\x12#\n\x0ctex\
    t_payload\x18\x03\x20\x01(\tH\0R\x0btextPayload\x12@\n\x0estruct_payload\
    \x18\x06\x20\x01(\x0b2\x17.google.protobuf.StructH\0R\rstructPayload\x12\
    M\n\toperation\x18\x10\x20\x01(\x0b2/.google.api.servicecontrol.v1.LogEn\
    tryOperationR\toperation\x12]\n\x0fsource_location\x18\x11\x20\x01(\x0b2\
    4.google.api.servicecontrol.v1.LogEntrySourceLocationR\x0esourceLocation\
    \x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01B\t\n\x07payload\"\
    i\n\x11LogEntryOperation\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\
    \x1a\n\x08producer\x18\x02\x20\x01(\tR\x08producer\x12\x14\n\x05first\
    \x18\x03\x20\x01(\x08R\x05first\x12\x12\n\x04last\x18\x04\x20\x01(\x08R\
    \x04last\"\\\n\x16LogEntrySourceLocation\x12\x12\n\x04file\x18\x01\x20\
    \x01(\tR\x04file\x12\x12\n\x04line\x18\x02\x20\x01(\x03R\x04line\x12\x1a\
    \n\x08function\x18\x03\x20\x01(\tR\x08functionB\xe5\x01\n\x20com.google.\
    api.servicecontrol.v1B\rLogEntryProtoP\x01ZJgoogle.golang.org/genproto/g\
    oogleapis/api/servicecontrol/v1;servicecontrol\xaa\x02\x1eGoogle.Cloud.S\
    erviceControl.V1\xca\x02\x1eGoogle\\Cloud\\ServiceControl\\V1\xea\x02!Go\
    ogle::Cloud::ServiceControl::V1J\xdc&\n\x06\x12\x04\x0e\0}\x01\n\xbc\x04\
    \n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202020\x20Google\x20\
    LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x20\
    2.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20fi\
    le\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20\
    may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0%\n\t\n\x02\x03\0\x12\x03\
    \x12\09\n\t\n\x02\x03\x01\x12\x03\x13\00\n\t\n\x02\x03\x02\x12\x03\x14\0\
    #\n\t\n\x02\x03\x03\x12\x03\x15\0&\n\t\n\x02\x03\x04\x12\x03\x16\0)\n\
    \x08\n\x01\x08\x12\x03\x18\0;\n\t\n\x02\x08%\x12\x03\x18\0;\n\x08\n\x01\
    \x08\x12\x03\x19\0a\n\t\n\x02\x08\x0b\x12\x03\x19\0a\n\x08\n\x01\x08\x12\
    \x03\x1a\0\"\n\t\n\x02\x08\n\x12\x03\x1a\0\"\n\x08\n\x01\x08\x12\x03\x1b\
    \0.\n\t\n\x02\x08\x08\x12\x03\x1b\0.\n\x08\n\x01\x08\x12\x03\x1c\09\n\t\
    \n\x02\x08\x01\x12\x03\x1c\09\n\x08\n\x01\x08\x12\x03\x1d\0;\n\t\n\x02\
    \x08)\x12\x03\x1d\0;\n\x08\n\x01\x08\x12\x03\x1e\0:\n\t\n\x02\x08-\x12\
    \x03\x1e\0:\n&\n\x02\x04\0\x12\x04!\0V\x01\x1a\x1a\x20An\x20individual\
    \x20log\x20entry.\n\n\n\n\x03\x04\0\x01\x12\x03!\x08\x10\nf\n\x04\x04\0\
    \x02\0\x12\x03$\x02\x13\x1aY\x20Required.\x20The\x20log\x20to\x20which\
    \x20this\x20log\x20entry\x20belongs.\x20Examples:\x20`\"syslog\"`,\n\x20\
    `\"book_log\"`.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04$\x02!\x12\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03$\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03$\x10\x12\nu\n\x04\x04\0\
    \x02\x01\x12\x03(\x02+\x1ah\x20The\x20time\x20the\x20event\x20described\
    \x20by\x20the\x20log\x20entry\x20occurred.\x20If\n\x20omitted,\x20defaul\
    ts\x20to\x20operation\x20start\x20time.\n\n\r\n\x05\x04\0\x02\x01\x04\
    \x12\x04(\x02$\x13\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03(\x02\x1b\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03(\x1c%\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03((*\nZ\n\x04\x04\0\x02\x02\x12\x03,\x020\x1aM\x20The\x20severity\x20\
    of\x20the\x20log\x20entry.\x20The\x20default\x20value\x20is\n\x20`LogSev\
    erity.DEFAULT`.\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04,\x02(+\n\x0c\n\x05\
    \x04\0\x02\x02\x06\x12\x03,\x02!\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03,\
    \"*\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03,-/\nk\n\x04\x04\0\x02\x03\x12\
    \x030\x02\x20\x1a^\x20Optional.\x20Information\x20about\x20the\x20HTTP\
    \x20request\x20associated\x20with\x20this\n\x20log\x20entry,\x20if\x20ap\
    plicable.\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x040\x02,0\n\x0c\n\x05\x04\0\
    \x02\x03\x06\x12\x030\x02\r\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x030\x0e\
    \x1a\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x030\x1d\x1f\n\x9b\x02\n\x04\x04\
    \0\x02\x04\x12\x036\x02\x14\x1a\x8d\x02\x20Optional.\x20Resource\x20name\
    \x20of\x20the\x20trace\x20associated\x20with\x20the\x20log\x20entry,\x20\
    if\x20any.\n\x20If\x20this\x20field\x20contains\x20a\x20relative\x20reso\
    urce\x20name,\x20you\x20can\x20assume\x20the\x20name\x20is\n\x20relative\
    \x20to\x20`//tracing.googleapis.com`.\x20Example:\n\x20`projects/my-proj\
    ectid/traces/06796866738c859f2f19b7cfb3214824`\n\n\r\n\x05\x04\0\x02\x04\
    \x04\x12\x046\x020\x20\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x036\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x04\x01\x12\x036\t\x0e\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x036\x11\x13\n\x8e\x01\n\x04\x04\0\x02\x05\x12\x03:\x02\x17\x1a\
    \x80\x01\x20A\x20unique\x20ID\x20for\x20the\x20log\x20entry\x20used\x20f\
    or\x20deduplication.\x20If\x20omitted,\n\x20the\x20implementation\x20wil\
    l\x20generate\x20one\x20based\x20on\x20operation_id.\n\n\r\n\x05\x04\0\
    \x02\x05\x04\x12\x04:\x026\x14\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03:\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03:\t\x12\n\x0c\n\x05\x04\0\
    \x02\x05\x03\x12\x03:\x15\x16\nq\n\x04\x04\0\x02\x06\x12\x03>\x02\"\x1ad\
    \x20A\x20set\x20of\x20user-defined\x20(key,\x20value)\x20data\x20that\
    \x20provides\x20additional\n\x20information\x20about\x20the\x20log\x20en\
    try.\n\n\r\n\x05\x04\0\x02\x06\x04\x12\x04>\x02:\x17\n\x0c\n\x05\x04\0\
    \x02\x06\x06\x12\x03>\x02\x15\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03>\x16\
    \x1c\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03>\x1f!\nJ\n\x04\x04\0\x08\0\
    \x12\x04A\x02M\x03\x1a<\x20The\x20log\x20entry\x20payload,\x20which\x20c\
    an\x20be\x20one\x20of\x20multiple\x20types.\n\n\x0c\n\x05\x04\0\x08\0\
    \x01\x12\x03A\x08\x0f\n\xba\x01\n\x04\x04\0\x02\x07\x12\x03E\x04*\x1a\
    \xac\x01\x20The\x20log\x20entry\x20payload,\x20represented\x20as\x20a\
    \x20protocol\x20buffer\x20that\x20is\n\x20expressed\x20as\x20a\x20JSON\
    \x20object.\x20The\x20only\x20accepted\x20type\x20currently\x20is\n\x20[\
    AuditLog][google.cloud.audit.AuditLog].\n\n\x0c\n\x05\x04\0\x02\x07\x06\
    \x12\x03E\x04\x17\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03E\x18%\n\x0c\n\
    \x05\x04\0\x02\x07\x03\x12\x03E()\nN\n\x04\x04\0\x02\x08\x12\x03H\x04\
    \x1c\x1aA\x20The\x20log\x20entry\x20payload,\x20represented\x20as\x20a\
    \x20Unicode\x20string\x20(UTF-8).\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\
    \x03H\x04\n\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03H\x0b\x17\n\x0c\n\x05\
    \x04\0\x02\x08\x03\x12\x03H\x1a\x1b\ne\n\x04\x04\0\x02\t\x12\x03L\x04.\
    \x1aX\x20The\x20log\x20entry\x20payload,\x20represented\x20as\x20a\x20st\
    ructure\x20that\n\x20is\x20expressed\x20as\x20a\x20JSON\x20object.\n\n\
    \x0c\n\x05\x04\0\x02\t\x06\x12\x03L\x04\x1a\n\x0c\n\x05\x04\0\x02\t\x01\
    \x12\x03L\x1b)\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03L,-\nf\n\x04\x04\0\x02\
    \n\x12\x03Q\x02#\x1aY\x20Optional.\x20Information\x20about\x20an\x20oper\
    ation\x20associated\x20with\x20the\x20log\x20entry,\x20if\n\x20applicabl\
    e.\n\n\r\n\x05\x04\0\x02\n\x04\x12\x04Q\x02M\x03\n\x0c\n\x05\x04\0\x02\n\
    \x06\x12\x03Q\x02\x13\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03Q\x14\x1d\n\x0c\
    \n\x05\x04\0\x02\n\x03\x12\x03Q\x20\"\na\n\x04\x04\0\x02\x0b\x12\x03U\
    \x02.\x1aT\x20Optional.\x20Source\x20code\x20location\x20information\x20\
    associated\x20with\x20the\x20log\x20entry,\n\x20if\x20any.\n\n\r\n\x05\
    \x04\0\x02\x0b\x04\x12\x04U\x02Q#\n\x0c\n\x05\x04\0\x02\x0b\x06\x12\x03U\
    \x02\x18\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03U\x19(\n\x0c\n\x05\x04\0\
    \x02\x0b\x03\x12\x03U+-\nv\n\x02\x04\x01\x12\x04Z\0i\x01\x1aj\x20Additio\
    nal\x20information\x20about\x20a\x20potentially\x20long-running\x20opera\
    tion\x20with\x20which\n\x20a\x20log\x20entry\x20is\x20associated.\n\n\n\
    \n\x03\x04\x01\x01\x12\x03Z\x08\x19\n\x90\x01\n\x04\x04\x01\x02\0\x12\
    \x03]\x02\x10\x1a\x82\x01\x20Optional.\x20An\x20arbitrary\x20operation\
    \x20identifier.\x20Log\x20entries\x20with\x20the\n\x20same\x20identifier\
    \x20are\x20assumed\x20to\x20be\x20part\x20of\x20the\x20same\x20operation\
    .\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04]\x02Z\x1b\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03]\t\x0b\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03]\x0e\x0f\n\xe0\x01\n\x04\x04\x01\
    \x02\x01\x12\x03b\x02\x16\x1a\xd2\x01\x20Optional.\x20An\x20arbitrary\
    \x20producer\x20identifier.\x20The\x20combination\x20of\n\x20`id`\x20and\
    \x20`producer`\x20must\x20be\x20globally\x20unique.\x20\x20Examples\x20f\
    or\x20`producer`:\n\x20`\"MyDivision.MyBigCompany.com\"`,\x20`\"github.c\
    om/MyProject/MyApplication\"`.\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04b\
    \x02]\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03b\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03b\t\x11\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03b\x14\x15\nZ\n\x04\x04\x01\x02\x02\x12\x03e\x02\x11\x1aM\x20Optional\
    .\x20Set\x20this\x20to\x20True\x20if\x20this\x20is\x20the\x20first\x20lo\
    g\x20entry\x20in\x20the\x20operation.\n\n\r\n\x05\x04\x01\x02\x02\x04\
    \x12\x04e\x02b\x16\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03e\x02\x06\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03e\x07\x0c\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03e\x0f\x10\nY\n\x04\x04\x01\x02\x03\x12\x03h\x02\x10\x1aL\
    \x20Optional.\x20Set\x20this\x20to\x20True\x20if\x20this\x20is\x20the\
    \x20last\x20log\x20entry\x20in\x20the\x20operation.\n\n\r\n\x05\x04\x01\
    \x02\x03\x04\x12\x04h\x02e\x11\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03h\
    \x02\x06\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03h\x07\x0b\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03h\x0e\x0f\na\n\x02\x04\x02\x12\x04m\0}\x01\
    \x1aU\x20Additional\x20information\x20about\x20the\x20source\x20code\x20\
    location\x20that\x20produced\x20the\x20log\n\x20entry.\n\n\n\n\x03\x04\
    \x02\x01\x12\x03m\x08\x1e\n\x88\x01\n\x04\x04\x02\x02\0\x12\x03p\x02\x12\
    \x1a{\x20Optional.\x20Source\x20file\x20name.\x20Depending\x20on\x20the\
    \x20runtime\x20environment,\x20this\n\x20might\x20be\x20a\x20simple\x20n\
    ame\x20or\x20a\x20fully-qualified\x20name.\n\n\r\n\x05\x04\x02\x02\0\x04\
    \x12\x04p\x02m\x20\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03p\x02\x08\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03p\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03p\x10\x11\ne\n\x04\x04\x02\x02\x01\x12\x03t\x02\x11\x1aX\x20Optional\
    .\x20Line\x20within\x20the\x20source\x20file.\x201-based;\x200\x20indica\
    tes\x20no\x20line\x20number\n\x20available.\n\n\r\n\x05\x04\x02\x02\x01\
    \x04\x12\x04t\x02p\x12\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03t\x02\x07\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03t\x08\x0c\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03t\x0f\x10\n\x87\x03\n\x04\x04\x02\x02\x02\x12\x03|\
    \x02\x16\x1a\xf9\x02\x20Optional.\x20Human-readable\x20name\x20of\x20the\
    \x20function\x20or\x20method\x20being\x20invoked,\x20with\n\x20optional\
    \x20context\x20such\x20as\x20the\x20class\x20or\x20package\x20name.\x20T\
    his\x20information\x20may\x20be\n\x20used\x20in\x20contexts\x20such\x20a\
    s\x20the\x20logs\x20viewer,\x20where\x20a\x20file\x20and\x20line\x20numb\
    er\x20are\n\x20less\x20meaningful.\x20The\x20format\x20can\x20vary\x20by\
    \x20language.\x20For\x20example:\n\x20`qual.if.ied.Class.method`\x20(Jav\
    a),\x20`dir/package.func`\x20(Go),\x20`function`\n\x20(Python).\n\n\r\n\
    \x05\x04\x02\x02\x02\x04\x12\x04|\x02t\x11\n\x0c\n\x05\x04\x02\x02\x02\
    \x05\x12\x03|\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03|\t\x11\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03|\x14\x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
