// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/servicecontrol/v1/check_error.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct CheckError {
    // message fields
    pub code: CheckError_Code,
    pub detail: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckError {
    fn default() -> &'a CheckError {
        <CheckError as ::protobuf::Message>::default_instance()
    }
}

impl CheckError {
    pub fn new() -> CheckError {
        ::std::default::Default::default()
    }

    // .google.api.servicecontrol.v1.CheckError.Code code = 1;


    pub fn get_code(&self) -> CheckError_Code {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = CheckError_Code::ERROR_CODE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: CheckError_Code) {
        self.code = v;
    }

    // string detail = 2;


    pub fn get_detail(&self) -> &str {
        &self.detail
    }
    pub fn clear_detail(&mut self) {
        self.detail.clear();
    }

    // Param is passed by value, moved
    pub fn set_detail(&mut self, v: ::std::string::String) {
        self.detail = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_detail(&mut self) -> &mut ::std::string::String {
        &mut self.detail
    }

    // Take field
    pub fn take_detail(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.detail, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CheckError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.code, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.detail)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != CheckError_Code::ERROR_CODE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.code);
        }
        if !self.detail.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.detail);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != CheckError_Code::ERROR_CODE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.code))?;
        }
        if !self.detail.is_empty() {
            os.write_string(2, &self.detail)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckError {
        CheckError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CheckError_Code>>(
                "code",
                |m: &CheckError| { &m.code },
                |m: &mut CheckError| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "detail",
                |m: &CheckError| { &m.detail },
                |m: &mut CheckError| { &mut m.detail },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckError>(
                "CheckError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckError {
        static instance: ::protobuf::rt::LazyV2<CheckError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckError::new)
    }
}

impl ::protobuf::Clear for CheckError {
    fn clear(&mut self) {
        self.code = CheckError_Code::ERROR_CODE_UNSPECIFIED;
        self.detail.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CheckError_Code {
    ERROR_CODE_UNSPECIFIED = 0,
    NOT_FOUND = 5,
    PERMISSION_DENIED = 7,
    RESOURCE_EXHAUSTED = 8,
    ABUSER_DETECTED = 103,
    SERVICE_NOT_ACTIVATED = 104,
    BILLING_DISABLED = 107,
    PROJECT_DELETED = 108,
    PROJECT_INVALID = 114,
    IP_ADDRESS_BLOCKED = 109,
    REFERER_BLOCKED = 110,
    CLIENT_APP_BLOCKED = 111,
    API_TARGET_BLOCKED = 122,
    API_KEY_INVALID = 105,
    API_KEY_EXPIRED = 112,
    API_KEY_NOT_FOUND = 113,
    SECURITY_POLICY_VIOLATED = 121,
    INVALID_CREDENTIAL = 123,
    LOCATION_POLICY_VIOLATED = 124,
    CONSUMER_INVALID = 125,
    NAMESPACE_LOOKUP_UNAVAILABLE = 300,
    SERVICE_STATUS_UNAVAILABLE = 301,
    BILLING_STATUS_UNAVAILABLE = 302,
    QUOTA_CHECK_UNAVAILABLE = 303,
    CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE = 305,
    SECURITY_POLICY_BACKEND_UNAVAILABLE = 306,
    LOCATION_POLICY_BACKEND_UNAVAILABLE = 307,
}

impl ::protobuf::ProtobufEnum for CheckError_Code {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CheckError_Code> {
        match value {
            0 => ::std::option::Option::Some(CheckError_Code::ERROR_CODE_UNSPECIFIED),
            5 => ::std::option::Option::Some(CheckError_Code::NOT_FOUND),
            7 => ::std::option::Option::Some(CheckError_Code::PERMISSION_DENIED),
            8 => ::std::option::Option::Some(CheckError_Code::RESOURCE_EXHAUSTED),
            103 => ::std::option::Option::Some(CheckError_Code::ABUSER_DETECTED),
            104 => ::std::option::Option::Some(CheckError_Code::SERVICE_NOT_ACTIVATED),
            107 => ::std::option::Option::Some(CheckError_Code::BILLING_DISABLED),
            108 => ::std::option::Option::Some(CheckError_Code::PROJECT_DELETED),
            114 => ::std::option::Option::Some(CheckError_Code::PROJECT_INVALID),
            109 => ::std::option::Option::Some(CheckError_Code::IP_ADDRESS_BLOCKED),
            110 => ::std::option::Option::Some(CheckError_Code::REFERER_BLOCKED),
            111 => ::std::option::Option::Some(CheckError_Code::CLIENT_APP_BLOCKED),
            122 => ::std::option::Option::Some(CheckError_Code::API_TARGET_BLOCKED),
            105 => ::std::option::Option::Some(CheckError_Code::API_KEY_INVALID),
            112 => ::std::option::Option::Some(CheckError_Code::API_KEY_EXPIRED),
            113 => ::std::option::Option::Some(CheckError_Code::API_KEY_NOT_FOUND),
            121 => ::std::option::Option::Some(CheckError_Code::SECURITY_POLICY_VIOLATED),
            123 => ::std::option::Option::Some(CheckError_Code::INVALID_CREDENTIAL),
            124 => ::std::option::Option::Some(CheckError_Code::LOCATION_POLICY_VIOLATED),
            125 => ::std::option::Option::Some(CheckError_Code::CONSUMER_INVALID),
            300 => ::std::option::Option::Some(CheckError_Code::NAMESPACE_LOOKUP_UNAVAILABLE),
            301 => ::std::option::Option::Some(CheckError_Code::SERVICE_STATUS_UNAVAILABLE),
            302 => ::std::option::Option::Some(CheckError_Code::BILLING_STATUS_UNAVAILABLE),
            303 => ::std::option::Option::Some(CheckError_Code::QUOTA_CHECK_UNAVAILABLE),
            305 => ::std::option::Option::Some(CheckError_Code::CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE),
            306 => ::std::option::Option::Some(CheckError_Code::SECURITY_POLICY_BACKEND_UNAVAILABLE),
            307 => ::std::option::Option::Some(CheckError_Code::LOCATION_POLICY_BACKEND_UNAVAILABLE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CheckError_Code] = &[
            CheckError_Code::ERROR_CODE_UNSPECIFIED,
            CheckError_Code::NOT_FOUND,
            CheckError_Code::PERMISSION_DENIED,
            CheckError_Code::RESOURCE_EXHAUSTED,
            CheckError_Code::ABUSER_DETECTED,
            CheckError_Code::SERVICE_NOT_ACTIVATED,
            CheckError_Code::BILLING_DISABLED,
            CheckError_Code::PROJECT_DELETED,
            CheckError_Code::PROJECT_INVALID,
            CheckError_Code::IP_ADDRESS_BLOCKED,
            CheckError_Code::REFERER_BLOCKED,
            CheckError_Code::CLIENT_APP_BLOCKED,
            CheckError_Code::API_TARGET_BLOCKED,
            CheckError_Code::API_KEY_INVALID,
            CheckError_Code::API_KEY_EXPIRED,
            CheckError_Code::API_KEY_NOT_FOUND,
            CheckError_Code::SECURITY_POLICY_VIOLATED,
            CheckError_Code::INVALID_CREDENTIAL,
            CheckError_Code::LOCATION_POLICY_VIOLATED,
            CheckError_Code::CONSUMER_INVALID,
            CheckError_Code::NAMESPACE_LOOKUP_UNAVAILABLE,
            CheckError_Code::SERVICE_STATUS_UNAVAILABLE,
            CheckError_Code::BILLING_STATUS_UNAVAILABLE,
            CheckError_Code::QUOTA_CHECK_UNAVAILABLE,
            CheckError_Code::CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE,
            CheckError_Code::SECURITY_POLICY_BACKEND_UNAVAILABLE,
            CheckError_Code::LOCATION_POLICY_BACKEND_UNAVAILABLE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CheckError_Code>("CheckError.Code", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CheckError_Code {
}

impl ::std::default::Default for CheckError_Code {
    fn default() -> Self {
        CheckError_Code::ERROR_CODE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckError_Code {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n.google/api/servicecontrol/v1/check_error.proto\x12\x1cgoogle.api.serv\
    icecontrol.v1\x1a\x1cgoogle/api/annotations.proto\"\xca\x06\n\nCheckErro\
    r\x12A\n\x04code\x18\x01\x20\x01(\x0e2-.google.api.servicecontrol.v1.Che\
    ckError.CodeR\x04code\x12\x16\n\x06detail\x18\x02\x20\x01(\tR\x06detail\
    \"\xe0\x05\n\x04Code\x12\x1a\n\x16ERROR_CODE_UNSPECIFIED\x10\0\x12\r\n\t\
    NOT_FOUND\x10\x05\x12\x15\n\x11PERMISSION_DENIED\x10\x07\x12\x16\n\x12RE\
    SOURCE_EXHAUSTED\x10\x08\x12\x13\n\x0fABUSER_DETECTED\x10g\x12\x19\n\x15\
    SERVICE_NOT_ACTIVATED\x10h\x12\x14\n\x10BILLING_DISABLED\x10k\x12\x13\n\
    \x0fPROJECT_DELETED\x10l\x12\x13\n\x0fPROJECT_INVALID\x10r\x12\x16\n\x12\
    IP_ADDRESS_BLOCKED\x10m\x12\x13\n\x0fREFERER_BLOCKED\x10n\x12\x16\n\x12C\
    LIENT_APP_BLOCKED\x10o\x12\x16\n\x12API_TARGET_BLOCKED\x10z\x12\x13\n\
    \x0fAPI_KEY_INVALID\x10i\x12\x13\n\x0fAPI_KEY_EXPIRED\x10p\x12\x15\n\x11\
    API_KEY_NOT_FOUND\x10q\x12\x1c\n\x18SECURITY_POLICY_VIOLATED\x10y\x12\
    \x16\n\x12INVALID_CREDENTIAL\x10{\x12\x1c\n\x18LOCATION_POLICY_VIOLATED\
    \x10|\x12\x14\n\x10CONSUMER_INVALID\x10}\x12!\n\x1cNAMESPACE_LOOKUP_UNAV\
    AILABLE\x10\xac\x02\x12\x1f\n\x1aSERVICE_STATUS_UNAVAILABLE\x10\xad\x02\
    \x12\x1f\n\x1aBILLING_STATUS_UNAVAILABLE\x10\xae\x02\x12\x1c\n\x17QUOTA_\
    CHECK_UNAVAILABLE\x10\xaf\x02\x12/\n*CLOUD_RESOURCE_MANAGER_BACKEND_UNAV\
    AILABLE\x10\xb1\x02\x12(\n#SECURITY_POLICY_BACKEND_UNAVAILABLE\x10\xb2\
    \x02\x12(\n#LOCATION_POLICY_BACKEND_UNAVAILABLE\x10\xb3\x02B\x84\x01\n\
    \x20com.google.api.servicecontrol.v1B\x0fCheckErrorProtoP\x01ZJgoogle.go\
    lang.org/genproto/googleapis/api/servicecontrol/v1;servicecontrol\xf8\
    \x01\x01J\x9d$\n\x07\x12\x05\x0e\0\x84\x01\x01\n\xbd\x04\n\x01\x0c\x12\
    \x03\x0e\0\x122\xb2\x04\x20Copyright\x202017\x20Google\x20Inc.\n\n\x20Li\
    censed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\x08\n\x01\x02\x12\x03\x10\0%\n\t\n\x02\x03\0\x12\x03\x12\0&\n\x08\n\
    \x01\x08\x12\x03\x14\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x14\0\x1f\n\x08\n\
    \x01\x08\x12\x03\x15\0a\n\t\n\x02\x08\x0b\x12\x03\x15\0a\n\x08\n\x01\x08\
    \x12\x03\x16\0\"\n\t\n\x02\x08\n\x12\x03\x16\0\"\n\x08\n\x01\x08\x12\x03\
    \x17\00\n\t\n\x02\x08\x08\x12\x03\x17\00\n\x08\n\x01\x08\x12\x03\x18\09\
    \n\t\n\x02\x08\x01\x12\x03\x18\09\n\xa9\x01\n\x02\x04\0\x12\x05\x1c\0\
    \x84\x01\x01\x1a\x9b\x01\x20Defines\x20the\x20errors\x20to\x20be\x20retu\
    rned\x20in\n\x20[google.api.servicecontrol.v1.CheckResponse.check_errors\
    ][google.api.servicecontrol.v1.CheckResponse.check_errors].\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x1c\x08\x12\n0\n\x04\x04\0\x04\0\x12\x04\x1e\x02}\x03\
    \x1a\"\x20Error\x20codes\x20for\x20Check\x20responses.\n\n\x0c\n\x05\x04\
    \0\x04\0\x01\x12\x03\x1e\x07\x0b\n7\n\x06\x04\0\x04\0\x02\0\x12\x03\x20\
    \x04\x1f\x1a(\x20This\x20is\x20never\x20used\x20in\x20`CheckResponse`.\n\
    \n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x20\x04\x1a\n\x0e\n\x07\x04\0\
    \x04\0\x02\0\x02\x12\x03\x20\x1d\x1e\n\x8b\x01\n\x06\x04\0\x04\0\x02\x01\
    \x12\x03$\x04\x12\x1a|\x20The\x20consumer's\x20project\x20id,\x20network\
    \x20container,\x20or\x20resource\x20container\x20was\n\x20not\x20found.\
    \x20Same\x20as\x20[google.rpc.Code.NOT_FOUND][].\n\n\x0e\n\x07\x04\0\x04\
    \0\x02\x01\x01\x12\x03$\x04\r\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\
    \x03$\x10\x11\n|\n\x06\x04\0\x04\0\x02\x02\x12\x03(\x04\x1a\x1am\x20The\
    \x20consumer\x20doesn't\x20have\x20access\x20to\x20the\x20specified\x20r\
    esource.\n\x20Same\x20as\x20[google.rpc.Code.PERMISSION_DENIED][].\n\n\
    \x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03(\x04\x15\n\x0e\n\x07\x04\0\
    \x04\0\x02\x02\x02\x12\x03(\x18\x19\nT\n\x06\x04\0\x04\0\x02\x03\x12\x03\
    +\x04\x1b\x1aE\x20Quota\x20check\x20failed.\x20Same\x20as\x20[google.rpc\
    .Code.RESOURCE_EXHAUSTED][].\n\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\
    \x03+\x04\x16\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03+\x19\x1a\n<\n\
    \x06\x04\0\x04\0\x02\x04\x12\x03.\x04\x1a\x1a-\x20The\x20consumer\x20has\
    \x20been\x20flagged\x20as\x20an\x20abuser.\n\n\x0e\n\x07\x04\0\x04\0\x02\
    \x04\x01\x12\x03.\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\x04\x02\x12\x03.\
    \x16\x19\n;\n\x06\x04\0\x04\0\x02\x05\x12\x031\x04\x20\x1a,\x20The\x20co\
    nsumer\x20hasn't\x20activated\x20the\x20service.\n\n\x0e\n\x07\x04\0\x04\
    \0\x02\x05\x01\x12\x031\x04\x19\n\x0e\n\x07\x04\0\x04\0\x02\x05\x02\x12\
    \x031\x1c\x1f\nT\n\x06\x04\0\x04\0\x02\x06\x12\x034\x04\x1b\x1aE\x20The\
    \x20consumer\x20cannot\x20access\x20the\x20service\x20because\x20billing\
    \x20is\x20disabled.\n\n\x0e\n\x07\x04\0\x04\0\x02\x06\x01\x12\x034\x04\
    \x14\n\x0e\n\x07\x04\0\x04\0\x02\x06\x02\x12\x034\x17\x1a\nS\n\x06\x04\0\
    \x04\0\x02\x07\x12\x037\x04\x1a\x1aD\x20The\x20consumer's\x20project\x20\
    has\x20been\x20marked\x20as\x20deleted\x20(soft\x20deletion).\n\n\x0e\n\
    \x07\x04\0\x04\0\x02\x07\x01\x12\x037\x04\x13\n\x0e\n\x07\x04\0\x04\0\
    \x02\x07\x02\x12\x037\x16\x19\nX\n\x06\x04\0\x04\0\x02\x08\x12\x03:\x04\
    \x1a\x1aI\x20The\x20consumer's\x20project\x20number\x20or\x20id\x20does\
    \x20not\x20represent\x20a\x20valid\x20project.\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x08\x01\x12\x03:\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\x08\x02\x12\
    \x03:\x16\x19\n^\n\x06\x04\0\x04\0\x02\t\x12\x03>\x04\x1d\x1aO\x20The\
    \x20IP\x20address\x20of\x20the\x20consumer\x20is\x20invalid\x20for\x20th\
    e\x20specific\x20consumer\n\x20project.\n\n\x0e\n\x07\x04\0\x04\0\x02\t\
    \x01\x12\x03>\x04\x16\n\x0e\n\x07\x04\0\x04\0\x02\t\x02\x12\x03>\x19\x1c\
    \nk\n\x06\x04\0\x04\0\x02\n\x12\x03B\x04\x1a\x1a\\\x20The\x20referer\x20\
    address\x20of\x20the\x20consumer\x20request\x20is\x20invalid\x20for\x20t\
    he\x20specific\n\x20consumer\x20project.\n\n\x0e\n\x07\x04\0\x04\0\x02\n\
    \x01\x12\x03B\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\n\x02\x12\x03B\x16\x19\
    \nn\n\x06\x04\0\x04\0\x02\x0b\x12\x03F\x04\x1d\x1a_\x20The\x20client\x20\
    application\x20of\x20the\x20consumer\x20request\x20is\x20invalid\x20for\
    \x20the\n\x20specific\x20consumer\x20project.\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x0b\x01\x12\x03F\x04\x16\n\x0e\n\x07\x04\0\x04\0\x02\x0b\x02\x12\
    \x03F\x19\x1c\na\n\x06\x04\0\x04\0\x02\x0c\x12\x03J\x04\x1d\x1aR\x20The\
    \x20API\x20targeted\x20by\x20this\x20request\x20is\x20invalid\x20for\x20\
    the\x20specified\x20consumer\n\x20project.\n\n\x0e\n\x07\x04\0\x04\0\x02\
    \x0c\x01\x12\x03J\x04\x16\n\x0e\n\x07\x04\0\x04\0\x02\x0c\x02\x12\x03J\
    \x19\x1c\n3\n\x06\x04\0\x04\0\x02\r\x12\x03M\x04\x1a\x1a$\x20The\x20cons\
    umer's\x20API\x20key\x20is\x20invalid.\n\n\x0e\n\x07\x04\0\x04\0\x02\r\
    \x01\x12\x03M\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\r\x02\x12\x03M\x16\x19\
    \n4\n\x06\x04\0\x04\0\x02\x0e\x12\x03P\x04\x1a\x1a%\x20The\x20consumer's\
    \x20API\x20Key\x20has\x20expired.\n\n\x0e\n\x07\x04\0\x04\0\x02\x0e\x01\
    \x12\x03P\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\x0e\x02\x12\x03P\x16\x19\n\
    G\n\x06\x04\0\x04\0\x02\x0f\x12\x03S\x04\x1c\x1a8\x20The\x20consumer's\
    \x20API\x20Key\x20was\x20not\x20found\x20in\x20config\x20record.\n\n\x0e\
    \n\x07\x04\0\x04\0\x02\x0f\x01\x12\x03S\x04\x15\n\x0e\n\x07\x04\0\x04\0\
    \x02\x0f\x02\x12\x03S\x18\x1b\nW\n\x06\x04\0\x04\0\x02\x10\x12\x03V\x04#\
    \x1aH\x20Request\x20is\x20not\x20allowed\x20as\x20per\x20security\x20pol\
    icies\x20defined\x20in\x20Org\x20Policy.\n\n\x0e\n\x07\x04\0\x04\0\x02\
    \x10\x01\x12\x03V\x04\x1c\n\x0e\n\x07\x04\0\x04\0\x02\x10\x02\x12\x03V\
    \x1f\"\nC\n\x06\x04\0\x04\0\x02\x11\x12\x03Y\x04\x1d\x1a4\x20The\x20cred\
    ential\x20in\x20the\x20request\x20can\x20not\x20be\x20verified.\n\n\x0e\
    \n\x07\x04\0\x04\0\x02\x11\x01\x12\x03Y\x04\x16\n\x0e\n\x07\x04\0\x04\0\
    \x02\x11\x02\x12\x03Y\x19\x1c\nW\n\x06\x04\0\x04\0\x02\x12\x12\x03\\\x04\
    #\x1aH\x20Request\x20is\x20not\x20allowed\x20as\x20per\x20location\x20po\
    licies\x20defined\x20in\x20Org\x20Policy.\n\n\x0e\n\x07\x04\0\x04\0\x02\
    \x12\x01\x12\x03\\\x04\x1c\n\x0e\n\x07\x04\0\x04\0\x02\x12\x02\x12\x03\\\
    \x1f\"\ne\n\x06\x04\0\x04\0\x02\x13\x12\x03`\x04\x1b\x1aV\x20The\x20inpu\
    t\x20consumer\x20info\x20does\x20not\x20represent\x20a\x20valid\x20consu\
    mer\x20folder\x20or\n\x20organization.\n\n\x0e\n\x07\x04\0\x04\0\x02\x13\
    \x01\x12\x03`\x04\x14\n\x0e\n\x07\x04\0\x04\0\x02\x13\x02\x12\x03`\x17\
    \x1a\n\xe6\x02\n\x06\x04\0\x04\0\x02\x14\x12\x03j\x04'\x1aE\x20The\x20ba\
    ckend\x20server\x20for\x20looking\x20up\x20project\x20id/number\x20is\
    \x20unavailable.\n2Z\x20NOTE:\x20By\x20convention,\x20all\x20*_UNAVAILAB\
    LE\x20codes\x20are\x20required\x20to\x20be\x20in\x20the\n\x20300\x20-\
    \x20399\x20range.\n2\xb3\x01\x20NOTE:\x20Unless\x20there\x20are\x20very\
    \x20special\x20business\x20requirements,\x20service\n\x20producer\x20sho\
    uld\x20ignore\x20the\x20following\x20errors.\x20These\x20errors\x20shoul\
    d\x20not\n\x20cause\x20the\x20rejection\x20of\x20client\x20requests.\n\n\
    \x0e\n\x07\x04\0\x04\0\x02\x14\x01\x12\x03j\x04\x20\n\x0e\n\x07\x04\0\
    \x04\0\x02\x14\x02\x12\x03j#&\nO\n\x06\x04\0\x04\0\x02\x15\x12\x03m\x04%\
    \x1a@\x20The\x20backend\x20server\x20for\x20checking\x20service\x20statu\
    s\x20is\x20unavailable.\n\n\x0e\n\x07\x04\0\x04\0\x02\x15\x01\x12\x03m\
    \x04\x1e\n\x0e\n\x07\x04\0\x04\0\x02\x15\x02\x12\x03m!$\nO\n\x06\x04\0\
    \x04\0\x02\x16\x12\x03p\x04%\x1a@\x20The\x20backend\x20server\x20for\x20\
    checking\x20billing\x20status\x20is\x20unavailable.\n\n\x0e\n\x07\x04\0\
    \x04\0\x02\x16\x01\x12\x03p\x04\x1e\n\x0e\n\x07\x04\0\x04\0\x02\x16\x02\
    \x12\x03p!$\nM\n\x06\x04\0\x04\0\x02\x17\x12\x03s\x04\"\x1a>\x20The\x20b\
    ackend\x20server\x20for\x20checking\x20quota\x20limits\x20is\x20unavaila\
    ble.\n\n\x0e\n\x07\x04\0\x04\0\x02\x17\x01\x12\x03s\x04\x1b\n\x0e\n\x07\
    \x04\0\x04\0\x02\x17\x02\x12\x03s\x1e!\nF\n\x06\x04\0\x04\0\x02\x18\x12\
    \x03v\x045\x1a7\x20Cloud\x20Resource\x20Manager\x20backend\x20server\x20\
    is\x20unavailable.\n\n\x0e\n\x07\x04\0\x04\0\x02\x18\x01\x12\x03v\x04.\n\
    \x0e\n\x07\x04\0\x04\0\x02\x18\x02\x12\x03v14\nN\n\x06\x04\0\x04\0\x02\
    \x19\x12\x03y\x04.\x1a?\x20Backend\x20server\x20for\x20evaluating\x20sec\
    urity\x20policy\x20is\x20unavailable.\n\n\x0e\n\x07\x04\0\x04\0\x02\x19\
    \x01\x12\x03y\x04'\n\x0e\n\x07\x04\0\x04\0\x02\x19\x02\x12\x03y*-\nN\n\
    \x06\x04\0\x04\0\x02\x1a\x12\x03|\x04.\x1a?\x20Backend\x20server\x20for\
    \x20evaluating\x20location\x20policy\x20is\x20unavailable.\n\n\x0e\n\x07\
    \x04\0\x04\0\x02\x1a\x01\x12\x03|\x04'\n\x0e\n\x07\x04\0\x04\0\x02\x1a\
    \x02\x12\x03|*-\n\x1f\n\x04\x04\0\x02\0\x12\x04\x80\x01\x02\x10\x1a\x11\
    \x20The\x20error\x20code.\n\n\x0e\n\x05\x04\0\x02\0\x04\x12\x05\x80\x01\
    \x02}\x03\n\r\n\x05\x04\0\x02\0\x06\x12\x04\x80\x01\x02\x06\n\r\n\x05\
    \x04\0\x02\0\x01\x12\x04\x80\x01\x07\x0b\n\r\n\x05\x04\0\x02\0\x03\x12\
    \x04\x80\x01\x0e\x0f\nQ\n\x04\x04\0\x02\x01\x12\x04\x83\x01\x02\x14\x1aC\
    \x20Free-form\x20text\x20providing\x20details\x20on\x20the\x20error\x20c\
    ause\x20of\x20the\x20error.\n\n\x0f\n\x05\x04\0\x02\x01\x04\x12\x06\x83\
    \x01\x02\x80\x01\x10\n\r\n\x05\x04\0\x02\x01\x05\x12\x04\x83\x01\x02\x08\
    \n\r\n\x05\x04\0\x02\x01\x01\x12\x04\x83\x01\t\x0f\n\r\n\x05\x04\0\x02\
    \x01\x03\x12\x04\x83\x01\x12\x13b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
