// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/backend.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct Backend {
    // message fields
    pub rules: ::protobuf::RepeatedField<BackendRule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Backend {
    fn default() -> &'a Backend {
        <Backend as ::protobuf::Message>::default_instance()
    }
}

impl Backend {
    pub fn new() -> Backend {
        ::std::default::Default::default()
    }

    // repeated .google.api.BackendRule rules = 1;


    pub fn get_rules(&self) -> &[BackendRule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<BackendRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<BackendRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<BackendRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Backend {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Backend {
        Backend::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BackendRule>>(
                "rules",
                |m: &Backend| { &m.rules },
                |m: &mut Backend| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Backend>(
                "Backend",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Backend {
        static instance: ::protobuf::rt::LazyV2<Backend> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Backend::new)
    }
}

impl ::protobuf::Clear for Backend {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Backend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Backend {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackendRule {
    // message fields
    pub selector: ::std::string::String,
    pub address: ::std::string::String,
    pub deadline: f64,
    pub min_deadline: f64,
    pub operation_deadline: f64,
    pub path_translation: BackendRule_PathTranslation,
    pub protocol: ::std::string::String,
    // message oneof groups
    pub authentication: ::std::option::Option<BackendRule_oneof_authentication>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BackendRule {
    fn default() -> &'a BackendRule {
        <BackendRule as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum BackendRule_oneof_authentication {
    jwt_audience(::std::string::String),
    disable_auth(bool),
}

impl BackendRule {
    pub fn new() -> BackendRule {
        ::std::default::Default::default()
    }

    // string selector = 1;


    pub fn get_selector(&self) -> &str {
        &self.selector
    }
    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: ::std::string::String) {
        self.selector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut ::std::string::String {
        &mut self.selector
    }

    // Take field
    pub fn take_selector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.selector, ::std::string::String::new())
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // double deadline = 3;


    pub fn get_deadline(&self) -> f64 {
        self.deadline
    }
    pub fn clear_deadline(&mut self) {
        self.deadline = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deadline(&mut self, v: f64) {
        self.deadline = v;
    }

    // double min_deadline = 4;


    pub fn get_min_deadline(&self) -> f64 {
        self.min_deadline
    }
    pub fn clear_min_deadline(&mut self) {
        self.min_deadline = 0.;
    }

    // Param is passed by value, moved
    pub fn set_min_deadline(&mut self, v: f64) {
        self.min_deadline = v;
    }

    // double operation_deadline = 5;


    pub fn get_operation_deadline(&self) -> f64 {
        self.operation_deadline
    }
    pub fn clear_operation_deadline(&mut self) {
        self.operation_deadline = 0.;
    }

    // Param is passed by value, moved
    pub fn set_operation_deadline(&mut self, v: f64) {
        self.operation_deadline = v;
    }

    // .google.api.BackendRule.PathTranslation path_translation = 6;


    pub fn get_path_translation(&self) -> BackendRule_PathTranslation {
        self.path_translation
    }
    pub fn clear_path_translation(&mut self) {
        self.path_translation = BackendRule_PathTranslation::PATH_TRANSLATION_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_path_translation(&mut self, v: BackendRule_PathTranslation) {
        self.path_translation = v;
    }

    // string jwt_audience = 7;


    pub fn get_jwt_audience(&self) -> &str {
        match self.authentication {
            ::std::option::Option::Some(BackendRule_oneof_authentication::jwt_audience(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_jwt_audience(&mut self) {
        self.authentication = ::std::option::Option::None;
    }

    pub fn has_jwt_audience(&self) -> bool {
        match self.authentication {
            ::std::option::Option::Some(BackendRule_oneof_authentication::jwt_audience(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_jwt_audience(&mut self, v: ::std::string::String) {
        self.authentication = ::std::option::Option::Some(BackendRule_oneof_authentication::jwt_audience(v))
    }

    // Mutable pointer to the field.
    pub fn mut_jwt_audience(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(BackendRule_oneof_authentication::jwt_audience(_)) = self.authentication {
        } else {
            self.authentication = ::std::option::Option::Some(BackendRule_oneof_authentication::jwt_audience(::std::string::String::new()));
        }
        match self.authentication {
            ::std::option::Option::Some(BackendRule_oneof_authentication::jwt_audience(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_jwt_audience(&mut self) -> ::std::string::String {
        if self.has_jwt_audience() {
            match self.authentication.take() {
                ::std::option::Option::Some(BackendRule_oneof_authentication::jwt_audience(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bool disable_auth = 8;


    pub fn get_disable_auth(&self) -> bool {
        match self.authentication {
            ::std::option::Option::Some(BackendRule_oneof_authentication::disable_auth(v)) => v,
            _ => false,
        }
    }
    pub fn clear_disable_auth(&mut self) {
        self.authentication = ::std::option::Option::None;
    }

    pub fn has_disable_auth(&self) -> bool {
        match self.authentication {
            ::std::option::Option::Some(BackendRule_oneof_authentication::disable_auth(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_disable_auth(&mut self, v: bool) {
        self.authentication = ::std::option::Option::Some(BackendRule_oneof_authentication::disable_auth(v))
    }

    // string protocol = 9;


    pub fn get_protocol(&self) -> &str {
        &self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        &mut self.protocol
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.protocol, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BackendRule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.selector)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deadline = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.min_deadline = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.operation_deadline = tmp;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.path_translation, 6, &mut self.unknown_fields)?
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.authentication = ::std::option::Option::Some(BackendRule_oneof_authentication::jwt_audience(is.read_string()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.authentication = ::std::option::Option::Some(BackendRule_oneof_authentication::disable_auth(is.read_bool()?));
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.protocol)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if self.deadline != 0. {
            my_size += 9;
        }
        if self.min_deadline != 0. {
            my_size += 9;
        }
        if self.operation_deadline != 0. {
            my_size += 9;
        }
        if self.path_translation != BackendRule_PathTranslation::PATH_TRANSLATION_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(6, self.path_translation);
        }
        if !self.protocol.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.protocol);
        }
        if let ::std::option::Option::Some(ref v) = self.authentication {
            match v {
                &BackendRule_oneof_authentication::jwt_audience(ref v) => {
                    my_size += ::protobuf::rt::string_size(7, &v);
                },
                &BackendRule_oneof_authentication::disable_auth(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if self.deadline != 0. {
            os.write_double(3, self.deadline)?;
        }
        if self.min_deadline != 0. {
            os.write_double(4, self.min_deadline)?;
        }
        if self.operation_deadline != 0. {
            os.write_double(5, self.operation_deadline)?;
        }
        if self.path_translation != BackendRule_PathTranslation::PATH_TRANSLATION_UNSPECIFIED {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.path_translation))?;
        }
        if !self.protocol.is_empty() {
            os.write_string(9, &self.protocol)?;
        }
        if let ::std::option::Option::Some(ref v) = self.authentication {
            match v {
                &BackendRule_oneof_authentication::jwt_audience(ref v) => {
                    os.write_string(7, v)?;
                },
                &BackendRule_oneof_authentication::disable_auth(v) => {
                    os.write_bool(8, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackendRule {
        BackendRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "selector",
                |m: &BackendRule| { &m.selector },
                |m: &mut BackendRule| { &mut m.selector },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &BackendRule| { &m.address },
                |m: &mut BackendRule| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "deadline",
                |m: &BackendRule| { &m.deadline },
                |m: &mut BackendRule| { &mut m.deadline },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "min_deadline",
                |m: &BackendRule| { &m.min_deadline },
                |m: &mut BackendRule| { &mut m.min_deadline },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "operation_deadline",
                |m: &BackendRule| { &m.operation_deadline },
                |m: &mut BackendRule| { &mut m.operation_deadline },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BackendRule_PathTranslation>>(
                "path_translation",
                |m: &BackendRule| { &m.path_translation },
                |m: &mut BackendRule| { &mut m.path_translation },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "jwt_audience",
                BackendRule::has_jwt_audience,
                BackendRule::get_jwt_audience,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "disable_auth",
                BackendRule::has_disable_auth,
                BackendRule::get_disable_auth,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol",
                |m: &BackendRule| { &m.protocol },
                |m: &mut BackendRule| { &mut m.protocol },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BackendRule>(
                "BackendRule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BackendRule {
        static instance: ::protobuf::rt::LazyV2<BackendRule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BackendRule::new)
    }
}

impl ::protobuf::Clear for BackendRule {
    fn clear(&mut self) {
        self.selector.clear();
        self.address.clear();
        self.deadline = 0.;
        self.min_deadline = 0.;
        self.operation_deadline = 0.;
        self.path_translation = BackendRule_PathTranslation::PATH_TRANSLATION_UNSPECIFIED;
        self.authentication = ::std::option::Option::None;
        self.authentication = ::std::option::Option::None;
        self.protocol.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BackendRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackendRule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BackendRule_PathTranslation {
    PATH_TRANSLATION_UNSPECIFIED = 0,
    CONSTANT_ADDRESS = 1,
    APPEND_PATH_TO_ADDRESS = 2,
}

impl ::protobuf::ProtobufEnum for BackendRule_PathTranslation {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BackendRule_PathTranslation> {
        match value {
            0 => ::std::option::Option::Some(BackendRule_PathTranslation::PATH_TRANSLATION_UNSPECIFIED),
            1 => ::std::option::Option::Some(BackendRule_PathTranslation::CONSTANT_ADDRESS),
            2 => ::std::option::Option::Some(BackendRule_PathTranslation::APPEND_PATH_TO_ADDRESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BackendRule_PathTranslation] = &[
            BackendRule_PathTranslation::PATH_TRANSLATION_UNSPECIFIED,
            BackendRule_PathTranslation::CONSTANT_ADDRESS,
            BackendRule_PathTranslation::APPEND_PATH_TO_ADDRESS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BackendRule_PathTranslation>("BackendRule.PathTranslation", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BackendRule_PathTranslation {
}

impl ::std::default::Default for BackendRule_PathTranslation {
    fn default() -> Self {
        BackendRule_PathTranslation::PATH_TRANSLATION_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for BackendRule_PathTranslation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/backend.proto\x12\ngoogle.api\"8\n\x07Backend\x12-\n\
    \x05rules\x18\x01\x20\x03(\x0b2\x17.google.api.BackendRuleR\x05rules\"\
    \xe4\x03\n\x0bBackendRule\x12\x1a\n\x08selector\x18\x01\x20\x01(\tR\x08s\
    elector\x12\x18\n\x07address\x18\x02\x20\x01(\tR\x07address\x12\x1a\n\
    \x08deadline\x18\x03\x20\x01(\x01R\x08deadline\x12!\n\x0cmin_deadline\
    \x18\x04\x20\x01(\x01R\x0bminDeadline\x12-\n\x12operation_deadline\x18\
    \x05\x20\x01(\x01R\x11operationDeadline\x12R\n\x10path_translation\x18\
    \x06\x20\x01(\x0e2'.google.api.BackendRule.PathTranslationR\x0fpathTrans\
    lation\x12#\n\x0cjwt_audience\x18\x07\x20\x01(\tH\0R\x0bjwtAudience\x12#\
    \n\x0cdisable_auth\x18\x08\x20\x01(\x08H\0R\x0bdisableAuth\x12\x1a\n\x08\
    protocol\x18\t\x20\x01(\tR\x08protocol\"e\n\x0fPathTranslation\x12\x20\n\
    \x1cPATH_TRANSLATION_UNSPECIFIED\x10\0\x12\x14\n\x10CONSTANT_ADDRESS\x10\
    \x01\x12\x1a\n\x16APPEND_PATH_TO_ADDRESS\x10\x02B\x10\n\x0eauthenticatio\
    nBn\n\x0ecom.google.apiB\x0cBackendProtoP\x01ZEgoogle.golang.org/genprot\
    o/googleapis/api/serviceconfig;serviceconfig\xa2\x02\x04GAPIJ\xa04\n\x07\
    \x12\x05\x0e\0\xb5\x01\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\
    \x04\x20Copyright\x202020\x20Google\x20LLC\n\n\x20Licensed\x20under\x20t\
    he\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\
    \x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20complian\
    ce\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20\
    of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/\
    licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20la\
    w\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\
    \x12\x03\x10\0\x13\n\x08\n\x01\x08\x12\x03\x12\0\\\n\t\n\x02\x08\x0b\x12\
    \x03\x12\0\\\n\x08\n\x01\x08\x12\x03\x13\0\"\n\t\n\x02\x08\n\x12\x03\x13\
    \0\"\n\x08\n\x01\x08\x12\x03\x14\0-\n\t\n\x02\x08\x08\x12\x03\x14\0-\n\
    \x08\n\x01\x08\x12\x03\x15\0'\n\t\n\x02\x08\x01\x12\x03\x15\0'\n\x08\n\
    \x01\x08\x12\x03\x16\0\"\n\t\n\x02\x08$\x12\x03\x16\0\"\nH\n\x02\x04\0\
    \x12\x04\x19\0\x1e\x01\x1a<\x20`Backend`\x20defines\x20the\x20backend\
    \x20configuration\x20for\x20a\x20service.\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x19\x08\x0f\n\x9b\x01\n\x04\x04\0\x02\0\x12\x03\x1d\x02!\x1a\x8d\x01\
    \x20A\x20list\x20of\x20API\x20backend\x20rules\x20that\x20apply\x20to\
    \x20individual\x20API\x20methods.\n\n\x20**NOTE:**\x20All\x20service\x20\
    configuration\x20rules\x20follow\x20\"last\x20one\x20wins\"\x20order.\n\
    \n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x1d\x02\n\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\x1d\x0b\x16\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1d\x17\x1c\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1d\x1f\x20\nS\n\x02\x04\x01\x12\
    \x05!\0\xb5\x01\x01\x1aF\x20A\x20backend\x20rule\x20provides\x20configur\
    ation\x20for\x20an\x20individual\x20API\x20element.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03!\x08\x13\n\xcd\x02\n\x04\x04\x01\x04\0\x12\x04)\x02Y\x03\
    \x1a\xbe\x02\x20Path\x20Translation\x20specifies\x20how\x20to\x20combine\
    \x20the\x20backend\x20address\x20with\x20the\n\x20request\x20path\x20in\
    \x20order\x20to\x20produce\x20the\x20appropriate\x20forwarding\x20URL\
    \x20for\x20the\n\x20request.\n\n\x20Path\x20Translation\x20is\x20applica\
    ble\x20only\x20to\x20HTTP-based\x20backends.\x20Backends\x20which\n\x20d\
    o\x20not\x20accept\x20requests\x20over\x20HTTP/HTTPS\x20should\x20leave\
    \x20`path_translation`\n\x20unspecified.\n\n\x0c\n\x05\x04\x01\x04\0\x01\
    \x12\x03)\x07\x16\n\r\n\x06\x04\x01\x04\0\x02\0\x12\x03*\x04%\n\x0e\n\
    \x07\x04\x01\x04\0\x02\0\x01\x12\x03*\x04\x20\n\x0e\n\x07\x04\x01\x04\0\
    \x02\0\x02\x12\x03*#$\n\x95\x07\n\x06\x04\x01\x04\0\x02\x01\x12\x03C\x04\
    \x19\x1a\x85\x07\x20Use\x20the\x20backend\x20address\x20as-is,\x20with\
    \x20no\x20modification\x20to\x20the\x20path.\x20If\x20the\n\x20URL\x20pa\
    ttern\x20contains\x20variables,\x20the\x20variable\x20names\x20and\x20va\
    lues\x20will\x20be\n\x20appended\x20to\x20the\x20query\x20string.\x20If\
    \x20a\x20query\x20string\x20parameter\x20and\x20a\x20URL\n\x20pattern\
    \x20variable\x20have\x20the\x20same\x20name,\x20this\x20may\x20result\
    \x20in\x20duplicate\x20keys\x20in\n\x20the\x20query\x20string.\n\n\x20#\
    \x20Examples\n\n\x20Given\x20the\x20following\x20operation\x20config:\n\
    \n\x20\x20\x20\x20\x20Method\x20path:\x20\x20\x20\x20\x20\x20\x20\x20/ap\
    i/company/{cid}/user/{uid}\n\x20\x20\x20\x20\x20Backend\x20address:\x20\
    \x20\x20\x20https://example.cloudfunctions.net/getUser\n\n\x20Requests\
    \x20to\x20the\x20following\x20request\x20paths\x20will\x20call\x20the\
    \x20backend\x20at\x20the\n\x20translated\x20path:\n\n\x20\x20\x20\x20\
    \x20Request\x20path:\x20/api/company/widgetworks/user/johndoe\n\x20\x20\
    \x20\x20\x20Translated:\n\x20\x20\x20\x20\x20https://example.cloudfuncti\
    ons.net/getUser?cid=widgetworks&uid=johndoe\n\n\x20\x20\x20\x20\x20Reque\
    st\x20path:\x20/api/company/widgetworks/user/johndoe?timezone=EST\n\x20\
    \x20\x20\x20\x20Translated:\n\x20\x20\x20\x20\x20https://example.cloudfu\
    nctions.net/getUser?timezone=EST&cid=widgetworks&uid=johndoe\n\n\x0e\n\
    \x07\x04\x01\x04\0\x02\x01\x01\x12\x03C\x04\x14\n\x0e\n\x07\x04\x01\x04\
    \0\x02\x01\x02\x12\x03C\x17\x18\n\x82\x05\n\x06\x04\x01\x04\0\x02\x02\
    \x12\x03X\x04\x1f\x1a\xf2\x04\x20The\x20request\x20path\x20will\x20be\
    \x20appended\x20to\x20the\x20backend\x20address.\n\n\x20#\x20Examples\n\
    \n\x20Given\x20the\x20following\x20operation\x20config:\n\n\x20\x20\x20\
    \x20\x20Method\x20path:\x20\x20\x20\x20\x20\x20\x20\x20/api/company/{cid\
    }/user/{uid}\n\x20\x20\x20\x20\x20Backend\x20address:\x20\x20\x20\x20htt\
    ps://example.appspot.com\n\n\x20Requests\x20to\x20the\x20following\x20re\
    quest\x20paths\x20will\x20call\x20the\x20backend\x20at\x20the\n\x20trans\
    lated\x20path:\n\n\x20\x20\x20\x20\x20Request\x20path:\x20/api/company/w\
    idgetworks/user/johndoe\n\x20\x20\x20\x20\x20Translated:\n\x20\x20\x20\
    \x20\x20https://example.appspot.com/api/company/widgetworks/user/johndoe\
    \n\n\x20\x20\x20\x20\x20Request\x20path:\x20/api/company/widgetworks/use\
    r/johndoe?timezone=EST\n\x20\x20\x20\x20\x20Translated:\n\x20\x20\x20\
    \x20\x20https://example.appspot.com/api/company/widgetworks/user/johndoe\
    ?timezone=EST\n\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x03X\x04\x1a\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x02\x02\x12\x03X\x1d\x1e\n\x90\x01\n\x04\
    \x04\x01\x02\0\x12\x03^\x02\x16\x1a\x82\x01\x20Selects\x20the\x20methods\
    \x20to\x20which\x20this\x20rule\x20applies.\n\n\x20Refer\x20to\x20[selec\
    tor][google.api.DocumentationRule.selector]\x20for\x20syntax\x20details.\
    \n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04^\x02Y\x03\n\x0c\n\x05\x04\x01\x02\
    \0\x05\x12\x03^\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03^\t\x11\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03^\x14\x15\n\x99\x05\n\x04\x04\x01\
    \x02\x01\x12\x03t\x02\x15\x1a\x8b\x05\x20The\x20address\x20of\x20the\x20\
    API\x20backend.\n\n\x20The\x20scheme\x20is\x20used\x20to\x20determine\
    \x20the\x20backend\x20protocol\x20and\x20security.\n\x20The\x20following\
    \x20schemes\x20are\x20accepted:\n\n\x20\x20\x20\x20SCHEME\x20\x20\x20\
    \x20\x20\x20\x20\x20PROTOCOL\x20\x20\x20\x20SECURITY\n\x20\x20\x20\x20ht\
    tp://\x20\x20\x20\x20\x20\x20\x20HTTP\x20\x20\x20\x20\x20\x20\x20\x20Non\
    e\n\x20\x20\x20\x20https://\x20\x20\x20\x20\x20\x20HTTP\x20\x20\x20\x20\
    \x20\x20\x20\x20TLS\n\x20\x20\x20\x20grpc://\x20\x20\x20\x20\x20\x20\x20\
    gRPC\x20\x20\x20\x20\x20\x20\x20\x20None\n\x20\x20\x20\x20grpcs://\x20\
    \x20\x20\x20\x20\x20gRPC\x20\x20\x20\x20\x20\x20\x20\x20TLS\n\n\x20It\
    \x20is\x20recommended\x20to\x20explicitly\x20include\x20a\x20scheme.\x20\
    Leaving\x20out\x20the\x20scheme\n\x20may\x20cause\x20constrasting\x20beh\
    aviors\x20across\x20platforms.\n\n\x20If\x20the\x20port\x20is\x20unspeci\
    fied,\x20the\x20default\x20is:\n\x20-\x2080\x20for\x20schemes\x20without\
    \x20TLS\n\x20-\x20443\x20for\x20schemes\x20with\x20TLS\n\n\x20For\x20HTT\
    P\x20backends,\x20use\x20[protocol][google.api.BackendRule.protocol]\n\
    \x20to\x20specify\x20the\x20protocol\x20version.\n\n\r\n\x05\x04\x01\x02\
    \x01\x04\x12\x04t\x02^\x16\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03t\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03t\t\x10\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03t\x13\x14\n\x9a\x01\n\x04\x04\x01\x02\x02\x12\x03x\
    \x02\x16\x1a\x8c\x01\x20The\x20number\x20of\x20seconds\x20to\x20wait\x20\
    for\x20a\x20response\x20from\x20a\x20request.\x20The\x20default\n\x20var\
    ies\x20based\x20on\x20the\x20request\x20protocol\x20and\x20deployment\
    \x20environment.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04x\x02t\x15\n\x0c\
    \n\x05\x04\x01\x02\x02\x05\x12\x03x\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x03x\t\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03x\x14\x15\n\
    \x81\x01\n\x04\x04\x01\x02\x03\x12\x03|\x02\x1a\x1at\x20Minimum\x20deadl\
    ine\x20in\x20seconds\x20needed\x20for\x20this\x20method.\x20Calls\x20hav\
    ing\x20deadline\n\x20value\x20lower\x20than\x20this\x20will\x20be\x20rej\
    ected.\n\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04|\x02x\x16\n\x0c\n\x05\x04\
    \x01\x02\x03\x05\x12\x03|\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03|\t\x15\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03|\x18\x19\nz\n\x04\
    \x04\x01\x02\x04\x12\x04\x80\x01\x02\x20\x1al\x20The\x20number\x20of\x20\
    seconds\x20to\x20wait\x20for\x20the\x20completion\x20of\x20a\x20long\x20\
    running\n\x20operation.\x20The\x20default\x20is\x20no\x20deadline.\n\n\
    \x0e\n\x05\x04\x01\x02\x04\x04\x12\x05\x80\x01\x02|\x1a\n\r\n\x05\x04\
    \x01\x02\x04\x05\x12\x04\x80\x01\x02\x08\n\r\n\x05\x04\x01\x02\x04\x01\
    \x12\x04\x80\x01\t\x1b\n\r\n\x05\x04\x01\x02\x04\x03\x12\x04\x80\x01\x1e\
    \x1f\n\x0c\n\x04\x04\x01\x02\x05\x12\x04\x82\x01\x02'\n\x0f\n\x05\x04\
    \x01\x02\x05\x04\x12\x06\x82\x01\x02\x80\x01\x20\n\r\n\x05\x04\x01\x02\
    \x05\x06\x12\x04\x82\x01\x02\x11\n\r\n\x05\x04\x01\x02\x05\x01\x12\x04\
    \x82\x01\x12\"\n\r\n\x05\x04\x01\x02\x05\x03\x12\x04\x82\x01%&\n\xc0\x04\
    \n\x04\x04\x01\x08\0\x12\x06\x92\x01\x02\x9d\x01\x03\x1a\xaf\x04\x20Auth\
    entication\x20settings\x20used\x20by\x20the\x20backend.\n\n\x20These\x20\
    are\x20typically\x20used\x20to\x20provide\x20service\x20management\x20fu\
    nctionality\x20to\n\x20a\x20backend\x20served\x20on\x20a\x20publicly-rou\
    table\x20URL.\x20The\x20`authentication`\n\x20details\x20should\x20match\
    \x20the\x20authentication\x20behavior\x20used\x20by\x20the\x20backend.\n\
    \n\x20For\x20example,\x20specifying\x20`jwt_audience`\x20implies\x20that\
    \x20the\x20backend\x20expects\n\x20authentication\x20via\x20a\x20JWT.\n\
    \n\x20When\x20authentication\x20is\x20unspecified,\x20the\x20resulting\
    \x20behavior\x20is\x20the\x20same\n\x20as\x20`disable_auth`\x20set\x20to\
    \x20`true`.\n\n\x20Refer\x20to\x20https://developers.google.com/identity\
    /protocols/OpenIDConnect\x20for\n\x20JWT\x20ID\x20token.\n\n\r\n\x05\x04\
    \x01\x08\0\x01\x12\x04\x92\x01\x08\x16\n\xb4\x01\n\x04\x04\x01\x02\x06\
    \x12\x04\x96\x01\x04\x1c\x1a\xa5\x01\x20The\x20JWT\x20audience\x20is\x20\
    used\x20when\x20generating\x20a\x20JWT\x20ID\x20token\x20for\x20the\x20b\
    ackend.\n\x20This\x20ID\x20token\x20will\x20be\x20added\x20in\x20the\x20\
    HTTP\x20\"authorization\"\x20header,\x20and\x20sent\n\x20to\x20the\x20ba\
    ckend.\n\n\r\n\x05\x04\x01\x02\x06\x05\x12\x04\x96\x01\x04\n\n\r\n\x05\
    \x04\x01\x02\x06\x01\x12\x04\x96\x01\x0b\x17\n\r\n\x05\x04\x01\x02\x06\
    \x03\x12\x04\x96\x01\x1a\x1b\n\x99\x02\n\x04\x04\x01\x02\x07\x12\x04\x9c\
    \x01\x04\x1a\x1a\x8a\x02\x20When\x20disable_auth\x20is\x20true,\x20a\x20\
    JWT\x20ID\x20token\x20won't\x20be\x20generated\x20and\x20the\n\x20origin\
    al\x20\"Authorization\"\x20HTTP\x20header\x20will\x20be\x20preserved.\
    \x20If\x20the\x20header\x20is\n\x20used\x20to\x20carry\x20the\x20origina\
    l\x20token\x20and\x20is\x20expected\x20by\x20the\x20backend,\x20this\n\
    \x20field\x20must\x20be\x20set\x20to\x20true\x20to\x20preserve\x20the\
    \x20header.\n\n\r\n\x05\x04\x01\x02\x07\x05\x12\x04\x9c\x01\x04\x08\n\r\
    \n\x05\x04\x01\x02\x07\x01\x12\x04\x9c\x01\t\x15\n\r\n\x05\x04\x01\x02\
    \x07\x03\x12\x04\x9c\x01\x18\x19\n\xf5\x05\n\x04\x04\x01\x02\x08\x12\x04\
    \xb4\x01\x02\x16\x1a\xe6\x05\x20The\x20protocol\x20used\x20for\x20sendin\
    g\x20a\x20request\x20to\x20the\x20backend.\n\x20The\x20supported\x20valu\
    es\x20are\x20\"http/1.1\"\x20and\x20\"h2\".\n\n\x20The\x20default\x20val\
    ue\x20is\x20inferred\x20from\x20the\x20scheme\x20in\x20the\n\x20[address\
    ][google.api.BackendRule.address]\x20field:\n\n\x20\x20\x20\x20SCHEME\
    \x20\x20\x20\x20\x20\x20\x20\x20PROTOCOL\n\x20\x20\x20\x20http://\x20\
    \x20\x20\x20\x20\x20\x20http/1.1\n\x20\x20\x20\x20https://\x20\x20\x20\
    \x20\x20\x20http/1.1\n\x20\x20\x20\x20grpc://\x20\x20\x20\x20\x20\x20\
    \x20h2\n\x20\x20\x20\x20grpcs://\x20\x20\x20\x20\x20\x20h2\n\n\x20For\
    \x20secure\x20HTTP\x20backends\x20(https://)\x20that\x20support\x20HTTP/\
    2,\x20set\x20this\x20field\n\x20to\x20\"h2\"\x20for\x20improved\x20perfo\
    rmance.\n\n\x20Configuring\x20this\x20field\x20to\x20non-default\x20valu\
    es\x20is\x20only\x20supported\x20for\x20secure\n\x20HTTP\x20backends.\
    \x20This\x20field\x20will\x20be\x20ignored\x20for\x20all\x20other\x20bac\
    kends.\n\n\x20See\n\x20https://www.iana.org/assignments/tls-extensiontyp\
    e-values/tls-extensiontype-values.xhtml#alpn-protocol-ids\n\x20for\x20mo\
    re\x20details\x20on\x20the\x20supported\x20values.\n\n\x0f\n\x05\x04\x01\
    \x02\x08\x04\x12\x06\xb4\x01\x02\x9d\x01\x03\n\r\n\x05\x04\x01\x02\x08\
    \x05\x12\x04\xb4\x01\x02\x08\n\r\n\x05\x04\x01\x02\x08\x01\x12\x04\xb4\
    \x01\t\x11\n\r\n\x05\x04\x01\x02\x08\x03\x12\x04\xb4\x01\x14\x15b\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
