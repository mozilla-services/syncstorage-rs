// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/resource.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct ResourceDescriptor {
    // message fields
    pub field_type: ::std::string::String,
    pub pattern: ::protobuf::RepeatedField<::std::string::String>,
    pub name_field: ::std::string::String,
    pub history: ResourceDescriptor_History,
    pub plural: ::std::string::String,
    pub singular: ::std::string::String,
    pub style: ::std::vec::Vec<ResourceDescriptor_Style>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourceDescriptor {
    fn default() -> &'a ResourceDescriptor {
        <ResourceDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl ResourceDescriptor {
    pub fn new() -> ResourceDescriptor {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // repeated string pattern = 2;


    pub fn get_pattern(&self) -> &[::std::string::String] {
        &self.pattern
    }
    pub fn clear_pattern(&mut self) {
        self.pattern.clear();
    }

    // Param is passed by value, moved
    pub fn set_pattern(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.pattern = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pattern(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.pattern
    }

    // Take field
    pub fn take_pattern(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.pattern, ::protobuf::RepeatedField::new())
    }

    // string name_field = 3;


    pub fn get_name_field(&self) -> &str {
        &self.name_field
    }
    pub fn clear_name_field(&mut self) {
        self.name_field.clear();
    }

    // Param is passed by value, moved
    pub fn set_name_field(&mut self, v: ::std::string::String) {
        self.name_field = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name_field(&mut self) -> &mut ::std::string::String {
        &mut self.name_field
    }

    // Take field
    pub fn take_name_field(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name_field, ::std::string::String::new())
    }

    // .google.api.ResourceDescriptor.History history = 4;


    pub fn get_history(&self) -> ResourceDescriptor_History {
        self.history
    }
    pub fn clear_history(&mut self) {
        self.history = ResourceDescriptor_History::HISTORY_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_history(&mut self, v: ResourceDescriptor_History) {
        self.history = v;
    }

    // string plural = 5;


    pub fn get_plural(&self) -> &str {
        &self.plural
    }
    pub fn clear_plural(&mut self) {
        self.plural.clear();
    }

    // Param is passed by value, moved
    pub fn set_plural(&mut self, v: ::std::string::String) {
        self.plural = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plural(&mut self) -> &mut ::std::string::String {
        &mut self.plural
    }

    // Take field
    pub fn take_plural(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.plural, ::std::string::String::new())
    }

    // string singular = 6;


    pub fn get_singular(&self) -> &str {
        &self.singular
    }
    pub fn clear_singular(&mut self) {
        self.singular.clear();
    }

    // Param is passed by value, moved
    pub fn set_singular(&mut self, v: ::std::string::String) {
        self.singular = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_singular(&mut self) -> &mut ::std::string::String {
        &mut self.singular
    }

    // Take field
    pub fn take_singular(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.singular, ::std::string::String::new())
    }

    // repeated .google.api.ResourceDescriptor.Style style = 10;


    pub fn get_style(&self) -> &[ResourceDescriptor_Style] {
        &self.style
    }
    pub fn clear_style(&mut self) {
        self.style.clear();
    }

    // Param is passed by value, moved
    pub fn set_style(&mut self, v: ::std::vec::Vec<ResourceDescriptor_Style>) {
        self.style = v;
    }

    // Mutable pointer to the field.
    pub fn mut_style(&mut self) -> &mut ::std::vec::Vec<ResourceDescriptor_Style> {
        &mut self.style
    }

    // Take field
    pub fn take_style(&mut self) -> ::std::vec::Vec<ResourceDescriptor_Style> {
        ::std::mem::replace(&mut self.style, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ResourceDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.pattern)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name_field)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.history, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.plural)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.singular)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.style, 10, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        for value in &self.pattern {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.name_field.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name_field);
        }
        if self.history != ResourceDescriptor_History::HISTORY_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.history);
        }
        if !self.plural.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.plural);
        }
        if !self.singular.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.singular);
        }
        for value in &self.style {
            my_size += ::protobuf::rt::enum_size(10, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        for v in &self.pattern {
            os.write_string(2, &v)?;
        };
        if !self.name_field.is_empty() {
            os.write_string(3, &self.name_field)?;
        }
        if self.history != ResourceDescriptor_History::HISTORY_UNSPECIFIED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.history))?;
        }
        if !self.plural.is_empty() {
            os.write_string(5, &self.plural)?;
        }
        if !self.singular.is_empty() {
            os.write_string(6, &self.singular)?;
        }
        for v in &self.style {
            os.write_enum(10, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourceDescriptor {
        ResourceDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &ResourceDescriptor| { &m.field_type },
                |m: &mut ResourceDescriptor| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pattern",
                |m: &ResourceDescriptor| { &m.pattern },
                |m: &mut ResourceDescriptor| { &mut m.pattern },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name_field",
                |m: &ResourceDescriptor| { &m.name_field },
                |m: &mut ResourceDescriptor| { &mut m.name_field },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ResourceDescriptor_History>>(
                "history",
                |m: &ResourceDescriptor| { &m.history },
                |m: &mut ResourceDescriptor| { &mut m.history },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "plural",
                |m: &ResourceDescriptor| { &m.plural },
                |m: &mut ResourceDescriptor| { &mut m.plural },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "singular",
                |m: &ResourceDescriptor| { &m.singular },
                |m: &mut ResourceDescriptor| { &mut m.singular },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ResourceDescriptor_Style>>(
                "style",
                |m: &ResourceDescriptor| { &m.style },
                |m: &mut ResourceDescriptor| { &mut m.style },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourceDescriptor>(
                "ResourceDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResourceDescriptor {
        static instance: ::protobuf::rt::LazyV2<ResourceDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResourceDescriptor::new)
    }
}

impl ::protobuf::Clear for ResourceDescriptor {
    fn clear(&mut self) {
        self.field_type.clear();
        self.pattern.clear();
        self.name_field.clear();
        self.history = ResourceDescriptor_History::HISTORY_UNSPECIFIED;
        self.plural.clear();
        self.singular.clear();
        self.style.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourceDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ResourceDescriptor_History {
    HISTORY_UNSPECIFIED = 0,
    ORIGINALLY_SINGLE_PATTERN = 1,
    FUTURE_MULTI_PATTERN = 2,
}

impl ::protobuf::ProtobufEnum for ResourceDescriptor_History {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ResourceDescriptor_History> {
        match value {
            0 => ::std::option::Option::Some(ResourceDescriptor_History::HISTORY_UNSPECIFIED),
            1 => ::std::option::Option::Some(ResourceDescriptor_History::ORIGINALLY_SINGLE_PATTERN),
            2 => ::std::option::Option::Some(ResourceDescriptor_History::FUTURE_MULTI_PATTERN),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ResourceDescriptor_History] = &[
            ResourceDescriptor_History::HISTORY_UNSPECIFIED,
            ResourceDescriptor_History::ORIGINALLY_SINGLE_PATTERN,
            ResourceDescriptor_History::FUTURE_MULTI_PATTERN,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ResourceDescriptor_History>("ResourceDescriptor.History", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ResourceDescriptor_History {
}

impl ::std::default::Default for ResourceDescriptor_History {
    fn default() -> Self {
        ResourceDescriptor_History::HISTORY_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceDescriptor_History {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ResourceDescriptor_Style {
    STYLE_UNSPECIFIED = 0,
    DECLARATIVE_FRIENDLY = 1,
}

impl ::protobuf::ProtobufEnum for ResourceDescriptor_Style {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ResourceDescriptor_Style> {
        match value {
            0 => ::std::option::Option::Some(ResourceDescriptor_Style::STYLE_UNSPECIFIED),
            1 => ::std::option::Option::Some(ResourceDescriptor_Style::DECLARATIVE_FRIENDLY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ResourceDescriptor_Style] = &[
            ResourceDescriptor_Style::STYLE_UNSPECIFIED,
            ResourceDescriptor_Style::DECLARATIVE_FRIENDLY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ResourceDescriptor_Style>("ResourceDescriptor.Style", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ResourceDescriptor_Style {
}

impl ::std::default::Default for ResourceDescriptor_Style {
    fn default() -> Self {
        ResourceDescriptor_Style::STYLE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceDescriptor_Style {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResourceReference {
    // message fields
    pub field_type: ::std::string::String,
    pub child_type: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourceReference {
    fn default() -> &'a ResourceReference {
        <ResourceReference as ::protobuf::Message>::default_instance()
    }
}

impl ResourceReference {
    pub fn new() -> ResourceReference {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string child_type = 2;


    pub fn get_child_type(&self) -> &str {
        &self.child_type
    }
    pub fn clear_child_type(&mut self) {
        self.child_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_child_type(&mut self, v: ::std::string::String) {
        self.child_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_child_type(&mut self) -> &mut ::std::string::String {
        &mut self.child_type
    }

    // Take field
    pub fn take_child_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.child_type, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ResourceReference {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.child_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.child_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.child_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.child_type.is_empty() {
            os.write_string(2, &self.child_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourceReference {
        ResourceReference::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &ResourceReference| { &m.field_type },
                |m: &mut ResourceReference| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "child_type",
                |m: &ResourceReference| { &m.child_type },
                |m: &mut ResourceReference| { &mut m.child_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourceReference>(
                "ResourceReference",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResourceReference {
        static instance: ::protobuf::rt::LazyV2<ResourceReference> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResourceReference::new)
    }
}

impl ::protobuf::Clear for ResourceReference {
    fn clear(&mut self) {
        self.field_type.clear();
        self.child_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourceReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceReference {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

/// Extension fields
pub mod exts {

    pub const resource_reference: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeMessage<super::ResourceReference>> = ::protobuf::ext::ExtFieldOptional { field_number: 1055, phantom: ::std::marker::PhantomData };

    pub const resource_definition: ::protobuf::ext::ExtFieldRepeated<::protobuf::descriptor::FileOptions, ::protobuf::types::ProtobufTypeMessage<super::ResourceDescriptor>> = ::protobuf::ext::ExtFieldRepeated { field_number: 1053, phantom: ::std::marker::PhantomData };

    pub const resource: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeMessage<super::ResourceDescriptor>> = ::protobuf::ext::ExtFieldOptional { field_number: 1053, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19google/api/resource.proto\x12\ngoogle.api\x1a\x20google/protobuf/d\
    escriptor.proto\"\xaa\x03\n\x12ResourceDescriptor\x12\x12\n\x04type\x18\
    \x01\x20\x01(\tR\x04type\x12\x18\n\x07pattern\x18\x02\x20\x03(\tR\x07pat\
    tern\x12\x1d\n\nname_field\x18\x03\x20\x01(\tR\tnameField\x12@\n\x07hist\
    ory\x18\x04\x20\x01(\x0e2&.google.api.ResourceDescriptor.HistoryR\x07his\
    tory\x12\x16\n\x06plural\x18\x05\x20\x01(\tR\x06plural\x12\x1a\n\x08sing\
    ular\x18\x06\x20\x01(\tR\x08singular\x12:\n\x05style\x18\n\x20\x03(\x0e2\
    $.google.api.ResourceDescriptor.StyleR\x05style\"[\n\x07History\x12\x17\
    \n\x13HISTORY_UNSPECIFIED\x10\0\x12\x1d\n\x19ORIGINALLY_SINGLE_PATTERN\
    \x10\x01\x12\x18\n\x14FUTURE_MULTI_PATTERN\x10\x02\"8\n\x05Style\x12\x15\
    \n\x11STYLE_UNSPECIFIED\x10\0\x12\x18\n\x14DECLARATIVE_FRIENDLY\x10\x01\
    \"F\n\x11ResourceReference\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\
    \x12\x1d\n\nchild_type\x18\x02\x20\x01(\tR\tchildType:l\n\x12resource_re\
    ference\x18\x9f\x08\x20\x01(\x0b2\x1d.google.api.ResourceReference\x12\
    \x1d.google.protobuf.FieldOptionsR\x11resourceReference:n\n\x13resource_\
    definition\x18\x9d\x08\x20\x03(\x0b2\x1e.google.api.ResourceDescriptor\
    \x12\x1c.google.protobuf.FileOptionsR\x12resourceDefinition:\\\n\x08reso\
    urce\x18\x9d\x08\x20\x01(\x0b2\x1e.google.api.ResourceDescriptor\x12\x1f\
    .google.protobuf.MessageOptionsR\x08resourceBn\n\x0ecom.google.apiB\rRes\
    ourceProtoP\x01ZAgoogle.golang.org/genproto/googleapis/api/annotations;a\
    nnotations\xf8\x01\x01\xa2\x02\x04GAPIJ\xf3U\n\x07\x12\x05\x0e\0\xaa\x02\
    \x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202020\
    \x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x13\n\t\n\
    \x02\x03\0\x12\x03\x12\0*\n\x08\n\x01\x08\x12\x03\x14\0\x1f\n\t\n\x02\
    \x08\x1f\x12\x03\x14\0\x1f\n\x08\n\x01\x08\x12\x03\x15\0X\n\t\n\x02\x08\
    \x0b\x12\x03\x15\0X\n\x08\n\x01\x08\x12\x03\x16\0\"\n\t\n\x02\x08\n\x12\
    \x03\x16\0\"\n\x08\n\x01\x08\x12\x03\x17\0.\n\t\n\x02\x08\x08\x12\x03\
    \x17\0.\n\x08\n\x01\x08\x12\x03\x18\0'\n\t\n\x02\x08\x01\x12\x03\x18\0'\
    \n\x08\n\x01\x08\x12\x03\x19\0\"\n\t\n\x02\x08$\x12\x03\x19\0\"\n\t\n\
    \x01\x07\x12\x04\x1b\0\x1f\x01\n[\n\x02\x07\0\x12\x03\x1e\x029\x1aP\x20A\
    n\x20annotation\x20that\x20describes\x20a\x20resource\x20reference,\x20s\
    ee\n\x20[ResourceReference][].\n\n\n\n\x03\x07\0\x02\x12\x03\x1b\x07#\n\
    \x0b\n\x03\x07\0\x04\x12\x04\x1e\x02\x1b%\n\n\n\x03\x07\0\x06\x12\x03\
    \x1e\x02\x1e\n\n\n\x03\x07\0\x01\x12\x03\x1e\x1f1\n\n\n\x03\x07\0\x03\
    \x12\x03\x1e48\n\t\n\x01\x07\x12\x04!\0%\x01\n}\n\x02\x07\x01\x12\x03$\
    \x02D\x1ar\x20An\x20annotation\x20that\x20describes\x20a\x20resource\x20\
    definition\x20without\x20a\x20corresponding\n\x20message;\x20see\x20[Res\
    ourceDescriptor][].\n\n\n\n\x03\x07\x01\x02\x12\x03!\x07\"\n\n\n\x03\x07\
    \x01\x04\x12\x03$\x02\n\n\n\n\x03\x07\x01\x06\x12\x03$\x0b(\n\n\n\x03\
    \x07\x01\x01\x12\x03$)<\n\n\n\x03\x07\x01\x03\x12\x03$?C\n\t\n\x01\x07\
    \x12\x04'\0+\x01\n]\n\x02\x07\x02\x12\x03*\x020\x1aR\x20An\x20annotation\
    \x20that\x20describes\x20a\x20resource\x20definition,\x20see\n\x20[Resou\
    rceDescriptor][].\n\n\n\n\x03\x07\x02\x02\x12\x03'\x07%\n\x0b\n\x03\x07\
    \x02\x04\x12\x04*\x02''\n\n\n\x03\x07\x02\x06\x12\x03*\x02\x1f\n\n\n\x03\
    \x07\x02\x01\x12\x03*\x20(\n\n\n\x03\x07\x02\x03\x12\x03*+/\n\x92\x20\n\
    \x02\x04\0\x12\x06\x99\x01\0\x83\x02\x01\x1a\x83\x20\x20A\x20simple\x20d\
    escriptor\x20of\x20a\x20resource\x20type.\n\n\x20ResourceDescriptor\x20a\
    nnotates\x20a\x20resource\x20message\x20(either\x20by\x20means\x20of\x20\
    a\n\x20protobuf\x20annotation\x20or\x20use\x20in\x20the\x20service\x20co\
    nfig),\x20and\x20associates\x20the\n\x20resource's\x20schema,\x20the\x20\
    resource\x20type,\x20and\x20the\x20pattern\x20of\x20the\x20resource\x20n\
    ame.\n\n\x20Example:\n\n\x20\x20\x20\x20\x20message\x20Topic\x20{\n\x20\
    \x20\x20\x20\x20\x20\x20//\x20Indicates\x20this\x20message\x20defines\
    \x20a\x20resource\x20schema.\n\x20\x20\x20\x20\x20\x20\x20//\x20Declares\
    \x20the\x20resource\x20type\x20in\x20the\x20format\x20of\x20{service}/{k\
    ind}.\n\x20\x20\x20\x20\x20\x20\x20//\x20For\x20Kubernetes\x20resources,\
    \x20the\x20format\x20is\x20{api\x20group}/{kind}.\n\x20\x20\x20\x20\x20\
    \x20\x20option\x20(google.api.resource)\x20=\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20type:\x20\"pubsub.googleapis.com/Topic\"\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20name_descriptor:\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20pattern:\x20\"projects/{project}/topics/{topic}\"\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_type:\x20\"cloudresou\
    rcemanager.googleapis.com/Project\"\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20parent_name_extractor:\x20\"projects/{project}\"\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20};\n\x20\x20\
    \x20\x20\x20}\n\n\x20The\x20ResourceDescriptor\x20Yaml\x20config\x20will\
    \x20look\x20like:\n\n\x20\x20\x20\x20\x20resources:\n\x20\x20\x20\x20\
    \x20-\x20type:\x20\"pubsub.googleapis.com/Topic\"\n\x20\x20\x20\x20\x20\
    \x20\x20name_descriptor:\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20patte\
    rn:\x20\"projects/{project}/topics/{topic}\"\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googleapis.co\
    m/Project\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_name_ext\
    ractor:\x20\"projects/{project}\"\n\n\x20Sometimes,\x20resources\x20have\
    \x20multiple\x20patterns,\x20typically\x20because\x20they\x20can\n\x20li\
    ve\x20under\x20multiple\x20parents.\n\n\x20Example:\n\n\x20\x20\x20\x20\
    \x20message\x20LogEntry\x20{\n\x20\x20\x20\x20\x20\x20\x20option\x20(goo\
    gle.api.resource)\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20type:\
    \x20\"logging.googleapis.com/LogEntry\"\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20name_descriptor:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20pattern:\x20\"projects/{project}/logs/{log}\"\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googleapi\
    s.com/Project\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_name\
    _extractor:\x20\"projects/{project}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20}\n\x20\x20\x20\x20\x20\x20\x20\x20\x20name_descriptor:\x20{\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pattern:\x20\"folders/{folder}/l\
    ogs/{log}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_type:\
    \x20\"cloudresourcemanager.googleapis.com/Folder\"\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20parent_name_extractor:\x20\"folders/{folder}\"\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20name_descriptor:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20p\
    attern:\x20\"organizations/{organization}/logs/{log}\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googl\
    eapis.com/Organization\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pa\
    rent_name_extractor:\x20\"organizations/{organization}\"\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20\x20\x20name_desc\
    riptor:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pattern:\x20\"\
    billingAccounts/{billing_account}/logs/{log}\"\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20parent_type:\x20\"billing.googleapis.com/BillingAcco\
    unt\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_name_extractor\
    :\x20\"billingAccounts/{billing_account}\"\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20}\n\x20\x20\x20\x20\x20\x20\x20};\n\x20\x20\x20\x20\x20}\n\n\x20\
    The\x20ResourceDescriptor\x20Yaml\x20config\x20will\x20look\x20like:\n\n\
    \x20\x20\x20\x20\x20resources:\n\x20\x20\x20\x20\x20-\x20type:\x20'loggi\
    ng.googleapis.com/LogEntry'\n\x20\x20\x20\x20\x20\x20\x20name_descriptor\
    :\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20pattern:\x20\"projects/{proj\
    ect}/logs/{log}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_ty\
    pe:\x20\"cloudresourcemanager.googleapis.com/Project\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20parent_name_extractor:\x20\"projects/{projec\
    t}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20pattern:\x20\"folders/{fo\
    lder}/logs/{log}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_t\
    ype:\x20\"cloudresourcemanager.googleapis.com/Folder\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20parent_name_extractor:\x20\"folders/{folder}\
    \"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20pattern:\x20\"organizations\
    /{organization}/logs/{log}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20parent_type:\x20\"cloudresourcemanager.googleapis.com/Organization\"\
    \n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_name_extractor:\x20\
    \"organizations/{organization}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\
    \x20pattern:\x20\"billingAccounts/{billing_account}/logs/{log}\"\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_type:\x20\"billing.google\
    apis.com/BillingAccount\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20p\
    arent_name_extractor:\x20\"billingAccounts/{billing_account}\"\n\n\x20Fo\
    r\x20flexible\x20resources,\x20the\x20resource\x20name\x20doesn't\x20con\
    tain\x20parent\x20names,\x20but\n\x20the\x20resource\x20itself\x20has\
    \x20parents\x20for\x20policy\x20evaluation.\n\n\x20Example:\n\n\x20\x20\
    \x20\x20\x20message\x20Shelf\x20{\n\x20\x20\x20\x20\x20\x20\x20option\
    \x20(google.api.resource)\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20type:\x20\"library.googleapis.com/Shelf\"\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20name_descriptor:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20pattern:\x20\"shelves/{shelf}\"\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googleapis.com/Pr\
    oject\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20name_descriptor:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20pattern:\x20\"shelves/{shelf}\"\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googleapis.com/Fo\
    lder\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\
    \x20};\n\x20\x20\x20\x20\x20}\n\n\x20The\x20ResourceDescriptor\x20Yaml\
    \x20config\x20will\x20look\x20like:\n\n\x20\x20\x20\x20\x20resources:\n\
    \x20\x20\x20\x20\x20-\x20type:\x20'library.googleapis.com/Shelf'\n\x20\
    \x20\x20\x20\x20\x20\x20name_descriptor:\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20-\x20pattern:\x20\"shelves/{shelf}\"\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20parent_type:\x20\"cloudresourcemanager.googleapis.co\
    m/Project\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20pattern:\x20\"shel\
    ves/{shelf}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20parent_type:\
    \x20\"cloudresourcemanager.googleapis.com/Folder\"\n\n\x0b\n\x03\x04\0\
    \x01\x12\x04\x99\x01\x08\x1a\nc\n\x04\x04\0\x04\0\x12\x06\x9c\x01\x02\
    \xa8\x01\x03\x1aS\x20A\x20description\x20of\x20the\x20historical\x20or\
    \x20future-looking\x20state\x20of\x20the\n\x20resource\x20pattern.\n\n\r\
    \n\x05\x04\0\x04\0\x01\x12\x04\x9c\x01\x07\x0e\n$\n\x06\x04\0\x04\0\x02\
    \0\x12\x04\x9e\x01\x04\x1c\x1a\x14\x20The\x20\"unset\"\x20value.\n\n\x0f\
    \n\x07\x04\0\x04\0\x02\0\x01\x12\x04\x9e\x01\x04\x17\n\x0f\n\x07\x04\0\
    \x04\0\x02\0\x02\x12\x04\x9e\x01\x1a\x1b\nz\n\x06\x04\0\x04\0\x02\x01\
    \x12\x04\xa2\x01\x04\"\x1aj\x20The\x20resource\x20originally\x20had\x20o\
    ne\x20pattern\x20and\x20launched\x20as\x20such,\x20and\n\x20additional\
    \x20patterns\x20were\x20added\x20later.\n\n\x0f\n\x07\x04\0\x04\0\x02\
    \x01\x01\x12\x04\xa2\x01\x04\x1d\n\x0f\n\x07\x04\0\x04\0\x02\x01\x02\x12\
    \x04\xa2\x01\x20!\n\xdc\x01\n\x06\x04\0\x04\0\x02\x02\x12\x04\xa7\x01\
    \x04\x1d\x1a\xcb\x01\x20The\x20resource\x20has\x20one\x20pattern,\x20but\
    \x20the\x20API\x20owner\x20expects\x20to\x20add\x20more\n\x20later.\x20(\
    This\x20is\x20the\x20inverse\x20of\x20ORIGINALLY_SINGLE_PATTERN,\x20and\
    \x20prevents\n\x20that\x20from\x20being\x20necessary\x20once\x20there\
    \x20are\x20multiple\x20patterns.)\n\n\x0f\n\x07\x04\0\x04\0\x02\x02\x01\
    \x12\x04\xa7\x01\x04\x18\n\x0f\n\x07\x04\0\x04\0\x02\x02\x02\x12\x04\xa7\
    \x01\x1b\x1c\n\\\n\x04\x04\0\x04\x01\x12\x06\xab\x01\x02\xb8\x01\x03\x1a\
    L\x20A\x20flag\x20representing\x20a\x20specific\x20style\x20that\x20a\
    \x20resource\x20claims\x20to\x20conform\x20to.\n\n\r\n\x05\x04\0\x04\x01\
    \x01\x12\x04\xab\x01\x07\x0c\n4\n\x06\x04\0\x04\x01\x02\0\x12\x04\xad\
    \x01\x04\x1a\x1a$\x20The\x20unspecified\x20value.\x20Do\x20not\x20use.\n\
    \n\x0f\n\x07\x04\0\x04\x01\x02\0\x01\x12\x04\xad\x01\x04\x15\n\x0f\n\x07\
    \x04\0\x04\x01\x02\0\x02\x12\x04\xad\x01\x18\x19\n\xdb\x02\n\x06\x04\0\
    \x04\x01\x02\x01\x12\x04\xb7\x01\x04\x1d\x1a\xca\x02\x20This\x20resource\
    \x20is\x20intended\x20to\x20be\x20\"declarative-friendly\".\n\n\x20Decla\
    rative-friendly\x20resources\x20must\x20be\x20more\x20strictly\x20consis\
    tent,\x20and\n\x20setting\x20this\x20to\x20true\x20communicates\x20to\
    \x20tools\x20that\x20this\x20resource\x20should\n\x20adhere\x20to\x20dec\
    larative-friendly\x20expectations.\n\n\x20Note:\x20This\x20is\x20used\
    \x20by\x20the\x20API\x20linter\x20(linter.aip.dev)\x20to\x20enable\n\x20\
    additional\x20checks.\n\n\x0f\n\x07\x04\0\x04\x01\x02\x01\x01\x12\x04\
    \xb7\x01\x04\x18\n\x0f\n\x07\x04\0\x04\x01\x02\x01\x02\x12\x04\xb7\x01\
    \x1b\x1c\n\xec\x03\n\x04\x04\0\x02\0\x12\x04\xc4\x01\x02\x12\x1a\xdd\x03\
    \x20The\x20resource\x20type.\x20It\x20must\x20be\x20in\x20the\x20format\
    \x20of\n\x20{service_name}/{resource_type_kind}.\x20The\x20`resource_typ\
    e_kind`\x20must\x20be\n\x20singular\x20and\x20must\x20not\x20include\x20\
    version\x20numbers.\n\n\x20Example:\x20`storage.googleapis.com/Bucket`\n\
    \n\x20The\x20value\x20of\x20the\x20resource_type_kind\x20must\x20follow\
    \x20the\x20regular\x20expression\n\x20/[A-Za-z][a-zA-Z0-9]+/.\x20It\x20s\
    hould\x20start\x20with\x20an\x20upper\x20case\x20character\x20and\n\x20s\
    hould\x20use\x20PascalCase\x20(UpperCamelCase).\x20The\x20maximum\x20num\
    ber\x20of\n\x20characters\x20allowed\x20for\x20the\x20`resource_type_kin\
    d`\x20is\x20100.\n\n\x0f\n\x05\x04\0\x02\0\x04\x12\x06\xc4\x01\x02\xb8\
    \x01\x03\n\r\n\x05\x04\0\x02\0\x05\x12\x04\xc4\x01\x02\x08\n\r\n\x05\x04\
    \0\x02\0\x01\x12\x04\xc4\x01\t\r\n\r\n\x05\x04\0\x02\0\x03\x12\x04\xc4\
    \x01\x10\x11\n\xc5\x05\n\x04\x04\0\x02\x01\x12\x04\xd9\x01\x02\x1e\x1a\
    \xb6\x05\x20Optional.\x20The\x20relative\x20resource\x20name\x20pattern\
    \x20associated\x20with\x20this\x20resource\n\x20type.\x20The\x20DNS\x20p\
    refix\x20of\x20the\x20full\x20resource\x20name\x20shouldn't\x20be\x20spe\
    cified\x20here.\n\n\x20The\x20path\x20pattern\x20must\x20follow\x20the\
    \x20syntax,\x20which\x20aligns\x20with\x20HTTP\x20binding\n\x20syntax:\n\
    \n\x20\x20\x20\x20\x20Template\x20=\x20Segment\x20{\x20\"/\"\x20Segment\
    \x20}\x20;\n\x20\x20\x20\x20\x20Segment\x20=\x20LITERAL\x20|\x20Variable\
    \x20;\n\x20\x20\x20\x20\x20Variable\x20=\x20\"{\"\x20LITERAL\x20\"}\"\
    \x20;\n\n\x20Examples:\n\n\x20\x20\x20\x20\x20-\x20\"projects/{project}/\
    topics/{topic}\"\n\x20\x20\x20\x20\x20-\x20\"projects/{project}/knowledg\
    eBases/{knowledge_base}\"\n\n\x20The\x20components\x20in\x20braces\x20co\
    rrespond\x20to\x20the\x20IDs\x20for\x20each\x20resource\x20in\x20the\n\
    \x20hierarchy.\x20It\x20is\x20expected\x20that,\x20if\x20multiple\x20pat\
    terns\x20are\x20provided,\n\x20the\x20same\x20component\x20name\x20(e.g.\
    \x20\"project\")\x20refers\x20to\x20IDs\x20of\x20the\x20same\n\x20type\
    \x20of\x20resource.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\xd9\x01\x02\n\
    \n\r\n\x05\x04\0\x02\x01\x05\x12\x04\xd9\x01\x0b\x11\n\r\n\x05\x04\0\x02\
    \x01\x01\x12\x04\xd9\x01\x12\x19\n\r\n\x05\x04\0\x02\x01\x03\x12\x04\xd9\
    \x01\x1c\x1d\n\x87\x01\n\x04\x04\0\x02\x02\x12\x04\xdd\x01\x02\x18\x1ay\
    \x20Optional.\x20The\x20field\x20on\x20the\x20resource\x20that\x20design\
    ates\x20the\x20resource\x20name\n\x20field.\x20If\x20omitted,\x20this\
    \x20is\x20assumed\x20to\x20be\x20\"name\".\n\n\x0f\n\x05\x04\0\x02\x02\
    \x04\x12\x06\xdd\x01\x02\xd9\x01\x1e\n\r\n\x05\x04\0\x02\x02\x05\x12\x04\
    \xdd\x01\x02\x08\n\r\n\x05\x04\0\x02\x02\x01\x12\x04\xdd\x01\t\x13\n\r\n\
    \x05\x04\0\x02\x02\x03\x12\x04\xdd\x01\x16\x17\n\xcc\x04\n\x04\x04\0\x02\
    \x03\x12\x04\xee\x01\x02\x16\x1a\xbd\x04\x20Optional.\x20The\x20historic\
    al\x20or\x20future-looking\x20state\x20of\x20the\x20resource\x20pattern.\
    \n\n\x20Example:\n\n\x20\x20\x20\x20\x20//\x20The\x20InspectTemplate\x20\
    message\x20originally\x20only\x20supported\x20resource\n\x20\x20\x20\x20\
    \x20//\x20names\x20with\x20organization,\x20and\x20project\x20was\x20add\
    ed\x20later.\n\x20\x20\x20\x20\x20message\x20InspectTemplate\x20{\n\x20\
    \x20\x20\x20\x20\x20\x20option\x20(google.api.resource)\x20=\x20{\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20type:\x20\"dlp.googleapis.com/InspectTem\
    plate\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20pattern:\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\"organizations/{organization}/inspectTemplates/{ins\
    pect_template}\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20pattern:\x20\"proj\
    ects/{project}/inspectTemplates/{inspect_template}\"\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20history:\x20ORIGINALLY_SINGLE_PATTERN\n\x20\x20\x20\
    \x20\x20\x20\x20};\n\x20\x20\x20\x20\x20}\n\n\x0f\n\x05\x04\0\x02\x03\
    \x04\x12\x06\xee\x01\x02\xdd\x01\x18\n\r\n\x05\x04\0\x02\x03\x06\x12\x04\
    \xee\x01\x02\t\n\r\n\x05\x04\0\x02\x03\x01\x12\x04\xee\x01\n\x11\n\r\n\
    \x05\x04\0\x02\x03\x03\x12\x04\xee\x01\x14\x15\n\xe1\x03\n\x04\x04\0\x02\
    \x04\x12\x04\xf8\x01\x02\x14\x1a\xd2\x03\x20The\x20plural\x20name\x20use\
    d\x20in\x20the\x20resource\x20name\x20and\x20permission\x20names,\x20suc\
    h\x20as\n\x20'projects'\x20for\x20the\x20resource\x20name\x20of\x20'proj\
    ects/{project}'\x20and\x20the\x20permission\n\x20name\x20of\x20'cloudres\
    ourcemanager.googleapis.com/projects.get'.\x20It\x20is\x20the\x20same\n\
    \x20concept\x20of\x20the\x20`plural`\x20field\x20in\x20k8s\x20CRD\x20spe\
    c\n\x20https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-res\
    ources/custom-resource-definitions/\n\n\x20Note:\x20The\x20plural\x20for\
    m\x20is\x20required\x20even\x20for\x20singleton\x20resources.\x20See\n\
    \x20https://aip.dev/156\n\n\x0f\n\x05\x04\0\x02\x04\x04\x12\x06\xf8\x01\
    \x02\xee\x01\x16\n\r\n\x05\x04\0\x02\x04\x05\x12\x04\xf8\x01\x02\x08\n\r\
    \n\x05\x04\0\x02\x04\x01\x12\x04\xf8\x01\t\x0f\n\r\n\x05\x04\0\x02\x04\
    \x03\x12\x04\xf8\x01\x12\x13\n\xf9\x01\n\x04\x04\0\x02\x05\x12\x04\xfd\
    \x01\x02\x16\x1a\xea\x01\x20The\x20same\x20concept\x20of\x20the\x20`sing\
    ular`\x20field\x20in\x20k8s\x20CRD\x20spec\n\x20https://kubernetes.io/do\
    cs/tasks/access-kubernetes-api/custom-resources/custom-resource-definiti\
    ons/\n\x20Such\x20as\x20\"project\"\x20for\x20the\x20`resourcemanager.go\
    ogleapis.com/Project`\x20type.\n\n\x0f\n\x05\x04\0\x02\x05\x04\x12\x06\
    \xfd\x01\x02\xf8\x01\x14\n\r\n\x05\x04\0\x02\x05\x05\x12\x04\xfd\x01\x02\
    \x08\n\r\n\x05\x04\0\x02\x05\x01\x12\x04\xfd\x01\t\x11\n\r\n\x05\x04\0\
    \x02\x05\x03\x12\x04\xfd\x01\x14\x15\n\xb4\x01\n\x04\x04\0\x02\x06\x12\
    \x04\x82\x02\x02\x1c\x1a\xa5\x01\x20Style\x20flag(s)\x20for\x20this\x20r\
    esource.\n\x20These\x20indicate\x20that\x20a\x20resource\x20is\x20expect\
    ed\x20to\x20conform\x20to\x20a\x20given\n\x20style.\x20See\x20the\x20spe\
    cific\x20style\x20flags\x20for\x20additional\x20information.\n\n\r\n\x05\
    \x04\0\x02\x06\x04\x12\x04\x82\x02\x02\n\n\r\n\x05\x04\0\x02\x06\x06\x12\
    \x04\x82\x02\x0b\x10\n\r\n\x05\x04\0\x02\x06\x01\x12\x04\x82\x02\x11\x16\
    \n\r\n\x05\x04\0\x02\x06\x03\x12\x04\x82\x02\x19\x1b\ni\n\x02\x04\x01\
    \x12\x06\x87\x02\0\xaa\x02\x01\x1a[\x20Defines\x20a\x20proto\x20annotati\
    on\x20that\x20describes\x20a\x20string\x20field\x20that\x20refers\x20to\
    \n\x20an\x20API\x20resource.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\x87\x02\
    \x08\x19\n\x85\x04\n\x04\x04\x01\x02\0\x12\x04\x9c\x02\x02\x12\x1a\xf6\
    \x03\x20The\x20resource\x20type\x20that\x20the\x20annotated\x20field\x20\
    references.\n\n\x20Example:\n\n\x20\x20\x20\x20\x20message\x20Subscripti\
    on\x20{\n\x20\x20\x20\x20\x20\x20\x20string\x20topic\x20=\x202\x20[(goog\
    le.api.resource_reference)\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20type:\x20\"pubsub.googleapis.com/Topic\"\n\x20\x20\x20\x20\x20\x20\
    \x20}];\n\x20\x20\x20\x20\x20}\n\n\x20Occasionally,\x20a\x20field\x20may\
    \x20reference\x20an\x20arbitrary\x20resource.\x20In\x20this\x20case,\n\
    \x20APIs\x20use\x20the\x20special\x20value\x20*\x20in\x20their\x20resour\
    ce\x20reference.\n\n\x20Example:\n\n\x20\x20\x20\x20\x20message\x20GetIa\
    mPolicyRequest\x20{\n\x20\x20\x20\x20\x20\x20\x20string\x20resource\x20=\
    \x202\x20[(google.api.resource_reference)\x20=\x20{\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20type:\x20\"*\"\n\x20\x20\x20\x20\x20\x20\x20}];\n\
    \x20\x20\x20\x20\x20}\n\n\x0f\n\x05\x04\x01\x02\0\x04\x12\x06\x9c\x02\
    \x02\x87\x02\x1b\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\x9c\x02\x02\x08\n\r\
    \n\x05\x04\x01\x02\0\x01\x12\x04\x9c\x02\t\r\n\r\n\x05\x04\x01\x02\0\x03\
    \x12\x04\x9c\x02\x10\x11\n\xf0\x02\n\x04\x04\x01\x02\x01\x12\x04\xa9\x02\
    \x02\x18\x1a\xe1\x02\x20The\x20resource\x20type\x20of\x20a\x20child\x20c\
    ollection\x20that\x20the\x20annotated\x20field\n\x20references.\x20This\
    \x20is\x20useful\x20for\x20annotating\x20the\x20`parent`\x20field\x20tha\
    t\n\x20doesn't\x20have\x20a\x20fixed\x20resource\x20type.\n\n\x20Example\
    :\n\n\x20\x20\x20\x20\x20message\x20ListLogEntriesRequest\x20{\n\x20\x20\
    \x20\x20\x20\x20\x20string\x20parent\x20=\x201\x20[(google.api.resource_\
    reference)\x20=\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20child_type:\
    \x20\"logging.googleapis.com/LogEntry\"\n\x20\x20\x20\x20\x20\x20\x20};\
    \n\x20\x20\x20\x20\x20}\n\n\x0f\n\x05\x04\x01\x02\x01\x04\x12\x06\xa9\
    \x02\x02\x9c\x02\x12\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\xa9\x02\x02\
    \x08\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\xa9\x02\t\x13\n\r\n\x05\x04\
    \x01\x02\x01\x03\x12\x04\xa9\x02\x16\x17b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
