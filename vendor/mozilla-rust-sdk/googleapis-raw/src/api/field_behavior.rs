// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/field_behavior.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FieldBehavior {
    FIELD_BEHAVIOR_UNSPECIFIED = 0,
    OPTIONAL = 1,
    REQUIRED = 2,
    OUTPUT_ONLY = 3,
    INPUT_ONLY = 4,
    IMMUTABLE = 5,
}

impl ::protobuf::ProtobufEnum for FieldBehavior {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FieldBehavior> {
        match value {
            0 => ::std::option::Option::Some(FieldBehavior::FIELD_BEHAVIOR_UNSPECIFIED),
            1 => ::std::option::Option::Some(FieldBehavior::OPTIONAL),
            2 => ::std::option::Option::Some(FieldBehavior::REQUIRED),
            3 => ::std::option::Option::Some(FieldBehavior::OUTPUT_ONLY),
            4 => ::std::option::Option::Some(FieldBehavior::INPUT_ONLY),
            5 => ::std::option::Option::Some(FieldBehavior::IMMUTABLE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FieldBehavior] = &[
            FieldBehavior::FIELD_BEHAVIOR_UNSPECIFIED,
            FieldBehavior::OPTIONAL,
            FieldBehavior::REQUIRED,
            FieldBehavior::OUTPUT_ONLY,
            FieldBehavior::INPUT_ONLY,
            FieldBehavior::IMMUTABLE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FieldBehavior>("FieldBehavior", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FieldBehavior {
}

impl ::std::default::Default for FieldBehavior {
    fn default() -> Self {
        FieldBehavior::FIELD_BEHAVIOR_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldBehavior {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

/// Extension fields
pub mod exts {

    pub const field_behavior: ::protobuf::ext::ExtFieldRepeated<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeEnum<super::FieldBehavior>> = ::protobuf::ext::ExtFieldRepeated { field_number: 1052, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fgoogle/api/field_behavior.proto\x12\ngoogle.api\x1a\x20google/prot\
    obuf/descriptor.proto*{\n\rFieldBehavior\x12\x1e\n\x1aFIELD_BEHAVIOR_UNS\
    PECIFIED\x10\0\x12\x0c\n\x08OPTIONAL\x10\x01\x12\x0c\n\x08REQUIRED\x10\
    \x02\x12\x0f\n\x0bOUTPUT_ONLY\x10\x03\x12\x0e\n\nINPUT_ONLY\x10\x04\x12\
    \r\n\tIMMUTABLE\x10\x05:`\n\x0efield_behavior\x18\x9c\x08\x20\x03(\x0e2\
    \x19.google.api.FieldBehavior\x12\x1d.google.protobuf.FieldOptionsR\rfie\
    ldBehaviorBp\n\x0ecom.google.apiB\x12FieldBehaviorProtoP\x01ZAgoogle.gol\
    ang.org/genproto/googleapis/api/annotations;annotations\xa2\x02\x04GAPIJ\
    \xfb\x15\n\x06\x12\x04\x0f\0N\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\
    \xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compli\
    ance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\
    \x01\x02\x12\x03\x11\0\x13\n\t\n\x02\x03\0\x12\x03\x13\0*\n\x08\n\x01\
    \x08\x12\x03\x15\0X\n\t\n\x02\x08\x0b\x12\x03\x15\0X\n\x08\n\x01\x08\x12\
    \x03\x16\0\"\n\t\n\x02\x08\n\x12\x03\x16\0\"\n\x08\n\x01\x08\x12\x03\x17\
    \03\n\t\n\x02\x08\x08\x12\x03\x17\03\n\x08\n\x01\x08\x12\x03\x18\0'\n\t\
    \n\x02\x08\x01\x12\x03\x18\0'\n\x08\n\x01\x08\x12\x03\x19\0\"\n\t\n\x02\
    \x08$\x12\x03\x19\0\"\n\t\n\x01\x07\x12\x04\x1b\0)\x01\n\xda\x03\n\x02\
    \x07\0\x12\x03(\x02:\x1a\xce\x03\x20A\x20designation\x20of\x20a\x20speci\
    fic\x20field\x20behavior\x20(required,\x20output\x20only,\x20etc.)\n\x20\
    in\x20protobuf\x20messages.\n\n\x20Examples:\n\n\x20\x20\x20string\x20na\
    me\x20=\x201\x20[(google.api.field_behavior)\x20=\x20REQUIRED];\n\x20\
    \x20\x20State\x20state\x20=\x201\x20[(google.api.field_behavior)\x20=\
    \x20OUTPUT_ONLY];\n\x20\x20\x20google.protobuf.Duration\x20ttl\x20=\x201\
    \n\x20\x20\x20\x20\x20[(google.api.field_behavior)\x20=\x20INPUT_ONLY];\
    \n\x20\x20\x20google.protobuf.Timestamp\x20expire_time\x20=\x201\n\x20\
    \x20\x20\x20\x20[(google.api.field_behavior)\x20=\x20OUTPUT_ONLY,\n\x20\
    \x20\x20\x20\x20\x20(google.api.field_behavior)\x20=\x20IMMUTABLE];\n\n\
    \n\n\x03\x07\0\x02\x12\x03\x1b\x07#\n\n\n\x03\x07\0\x04\x12\x03(\x02\n\n\
    \n\n\x03\x07\0\x06\x12\x03(\x0b#\n\n\n\x03\x07\0\x01\x12\x03($2\n\n\n\
    \x03\x07\0\x03\x12\x03(59\n\xea\x02\n\x02\x05\0\x12\x041\0N\x01\x1a\xdd\
    \x02\x20An\x20indicator\x20of\x20the\x20behavior\x20of\x20a\x20given\x20\
    field\x20(for\x20example,\x20that\x20a\x20field\n\x20is\x20required\x20i\
    n\x20requests,\x20or\x20given\x20as\x20output\x20but\x20ignored\x20as\
    \x20input).\n\x20This\x20**does\x20not**\x20change\x20the\x20behavior\
    \x20in\x20protocol\x20buffers\x20itself;\x20it\x20only\n\x20denotes\x20t\
    he\x20behavior\x20and\x20may\x20affect\x20how\x20API\x20tooling\x20handl\
    es\x20the\x20field.\n\n\x20Note:\x20This\x20enum\x20**may**\x20receive\
    \x20new\x20values\x20in\x20the\x20future.\n\n\n\n\x03\x05\0\x01\x12\x031\
    \x05\x12\n?\n\x04\x05\0\x02\0\x12\x033\x02!\x1a2\x20Conventional\x20defa\
    ult\x20for\x20enums.\x20Do\x20not\x20use\x20this.\n\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x033\x02\x1c\n\x0c\n\x05\x05\0\x02\0\x02\x12\x033\x1f\x20\
    \n\xa1\x01\n\x04\x05\0\x02\x01\x12\x038\x02\x0f\x1a\x93\x01\x20Specifica\
    lly\x20denotes\x20a\x20field\x20as\x20optional.\n\x20While\x20all\x20fie\
    lds\x20in\x20protocol\x20buffers\x20are\x20optional,\x20this\x20may\x20b\
    e\x20specified\n\x20for\x20emphasis\x20if\x20appropriate.\n\n\x0c\n\x05\
    \x05\0\x02\x01\x01\x12\x038\x02\n\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x038\
    \r\x0e\n\xc0\x01\n\x04\x05\0\x02\x02\x12\x03=\x02\x0f\x1a\xb2\x01\x20Den\
    otes\x20a\x20field\x20as\x20required.\n\x20This\x20indicates\x20that\x20\
    the\x20field\x20**must**\x20be\x20provided\x20as\x20part\x20of\x20the\
    \x20request,\n\x20and\x20failure\x20to\x20do\x20so\x20will\x20cause\x20a\
    n\x20error\x20(usually\x20`INVALID_ARGUMENT`).\n\n\x0c\n\x05\x05\0\x02\
    \x02\x01\x12\x03=\x02\n\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03=\r\x0e\n\
    \xfd\x01\n\x04\x05\0\x02\x03\x12\x03C\x02\x12\x1a\xef\x01\x20Denotes\x20\
    a\x20field\x20as\x20output\x20only.\n\x20This\x20indicates\x20that\x20th\
    e\x20field\x20is\x20provided\x20in\x20responses,\x20but\x20including\x20\
    the\n\x20field\x20in\x20a\x20request\x20does\x20nothing\x20(the\x20serve\
    r\x20*must*\x20ignore\x20it\x20and\n\x20*must\x20not*\x20throw\x20an\x20\
    error\x20as\x20a\x20result\x20of\x20the\x20field's\x20presence).\n\n\x0c\
    \n\x05\x05\0\x02\x03\x01\x12\x03C\x02\r\n\x0c\n\x05\x05\0\x02\x03\x02\
    \x12\x03C\x10\x11\n\x9e\x01\n\x04\x05\0\x02\x04\x12\x03H\x02\x11\x1a\x90\
    \x01\x20Denotes\x20a\x20field\x20as\x20input\x20only.\n\x20This\x20indic\
    ates\x20that\x20the\x20field\x20is\x20provided\x20in\x20requests,\x20and\
    \x20the\n\x20corresponding\x20field\x20is\x20not\x20included\x20in\x20ou\
    tput.\n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03H\x02\x0c\n\x0c\n\x05\x05\0\
    \x02\x04\x02\x12\x03H\x0f\x10\n\xa3\x01\n\x04\x05\0\x02\x05\x12\x03M\x02\
    \x10\x1a\x95\x01\x20Denotes\x20a\x20field\x20as\x20immutable.\n\x20This\
    \x20indicates\x20that\x20the\x20field\x20may\x20be\x20set\x20once\x20in\
    \x20a\x20request\x20to\x20create\x20a\n\x20resource,\x20but\x20may\x20no\
    t\x20be\x20changed\x20thereafter.\n\n\x0c\n\x05\x05\0\x02\x05\x01\x12\
    \x03M\x02\x0b\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03M\x0e\x0fb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
