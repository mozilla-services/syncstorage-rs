// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/logging.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct Logging {
    // message fields
    pub producer_destinations: ::protobuf::RepeatedField<Logging_LoggingDestination>,
    pub consumer_destinations: ::protobuf::RepeatedField<Logging_LoggingDestination>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Logging {
    fn default() -> &'a Logging {
        <Logging as ::protobuf::Message>::default_instance()
    }
}

impl Logging {
    pub fn new() -> Logging {
        ::std::default::Default::default()
    }

    // repeated .google.api.Logging.LoggingDestination producer_destinations = 1;


    pub fn get_producer_destinations(&self) -> &[Logging_LoggingDestination] {
        &self.producer_destinations
    }
    pub fn clear_producer_destinations(&mut self) {
        self.producer_destinations.clear();
    }

    // Param is passed by value, moved
    pub fn set_producer_destinations(&mut self, v: ::protobuf::RepeatedField<Logging_LoggingDestination>) {
        self.producer_destinations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_producer_destinations(&mut self) -> &mut ::protobuf::RepeatedField<Logging_LoggingDestination> {
        &mut self.producer_destinations
    }

    // Take field
    pub fn take_producer_destinations(&mut self) -> ::protobuf::RepeatedField<Logging_LoggingDestination> {
        ::std::mem::replace(&mut self.producer_destinations, ::protobuf::RepeatedField::new())
    }

    // repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;


    pub fn get_consumer_destinations(&self) -> &[Logging_LoggingDestination] {
        &self.consumer_destinations
    }
    pub fn clear_consumer_destinations(&mut self) {
        self.consumer_destinations.clear();
    }

    // Param is passed by value, moved
    pub fn set_consumer_destinations(&mut self, v: ::protobuf::RepeatedField<Logging_LoggingDestination>) {
        self.consumer_destinations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_consumer_destinations(&mut self) -> &mut ::protobuf::RepeatedField<Logging_LoggingDestination> {
        &mut self.consumer_destinations
    }

    // Take field
    pub fn take_consumer_destinations(&mut self) -> ::protobuf::RepeatedField<Logging_LoggingDestination> {
        ::std::mem::replace(&mut self.consumer_destinations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Logging {
    fn is_initialized(&self) -> bool {
        for v in &self.producer_destinations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.consumer_destinations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.producer_destinations)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.consumer_destinations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.producer_destinations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.consumer_destinations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.producer_destinations {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.consumer_destinations {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Logging {
        Logging::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Logging_LoggingDestination>>(
                "producer_destinations",
                |m: &Logging| { &m.producer_destinations },
                |m: &mut Logging| { &mut m.producer_destinations },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Logging_LoggingDestination>>(
                "consumer_destinations",
                |m: &Logging| { &m.consumer_destinations },
                |m: &mut Logging| { &mut m.consumer_destinations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Logging>(
                "Logging",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Logging {
        static instance: ::protobuf::rt::LazyV2<Logging> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Logging::new)
    }
}

impl ::protobuf::Clear for Logging {
    fn clear(&mut self) {
        self.producer_destinations.clear();
        self.consumer_destinations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Logging {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Logging {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Logging_LoggingDestination {
    // message fields
    pub monitored_resource: ::std::string::String,
    pub logs: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Logging_LoggingDestination {
    fn default() -> &'a Logging_LoggingDestination {
        <Logging_LoggingDestination as ::protobuf::Message>::default_instance()
    }
}

impl Logging_LoggingDestination {
    pub fn new() -> Logging_LoggingDestination {
        ::std::default::Default::default()
    }

    // string monitored_resource = 3;


    pub fn get_monitored_resource(&self) -> &str {
        &self.monitored_resource
    }
    pub fn clear_monitored_resource(&mut self) {
        self.monitored_resource.clear();
    }

    // Param is passed by value, moved
    pub fn set_monitored_resource(&mut self, v: ::std::string::String) {
        self.monitored_resource = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_monitored_resource(&mut self) -> &mut ::std::string::String {
        &mut self.monitored_resource
    }

    // Take field
    pub fn take_monitored_resource(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.monitored_resource, ::std::string::String::new())
    }

    // repeated string logs = 1;


    pub fn get_logs(&self) -> &[::std::string::String] {
        &self.logs
    }
    pub fn clear_logs(&mut self) {
        self.logs.clear();
    }

    // Param is passed by value, moved
    pub fn set_logs(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.logs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_logs(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.logs
    }

    // Take field
    pub fn take_logs(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.logs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Logging_LoggingDestination {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.monitored_resource)?;
                },
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.logs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.monitored_resource.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.monitored_resource);
        }
        for value in &self.logs {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.monitored_resource.is_empty() {
            os.write_string(3, &self.monitored_resource)?;
        }
        for v in &self.logs {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Logging_LoggingDestination {
        Logging_LoggingDestination::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "monitored_resource",
                |m: &Logging_LoggingDestination| { &m.monitored_resource },
                |m: &mut Logging_LoggingDestination| { &mut m.monitored_resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "logs",
                |m: &Logging_LoggingDestination| { &m.logs },
                |m: &mut Logging_LoggingDestination| { &mut m.logs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Logging_LoggingDestination>(
                "Logging.LoggingDestination",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Logging_LoggingDestination {
        static instance: ::protobuf::rt::LazyV2<Logging_LoggingDestination> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Logging_LoggingDestination::new)
    }
}

impl ::protobuf::Clear for Logging_LoggingDestination {
    fn clear(&mut self) {
        self.monitored_resource.clear();
        self.logs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Logging_LoggingDestination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Logging_LoggingDestination {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/logging.proto\x12\ngoogle.api\"\x9c\x02\n\x07Logging\
    \x12[\n\x15producer_destinations\x18\x01\x20\x03(\x0b2&.google.api.Loggi\
    ng.LoggingDestinationR\x14producerDestinations\x12[\n\x15consumer_destin\
    ations\x18\x02\x20\x03(\x0b2&.google.api.Logging.LoggingDestinationR\x14\
    consumerDestinations\x1aW\n\x12LoggingDestination\x12-\n\x12monitored_re\
    source\x18\x03\x20\x01(\tR\x11monitoredResource\x12\x12\n\x04logs\x18\
    \x01\x20\x03(\tR\x04logsBn\n\x0ecom.google.apiB\x0cLoggingProtoP\x01ZEgo\
    ogle.golang.org/genproto/googleapis/api/serviceconfig;serviceconfig\xa2\
    \x02\x04GAPIJ\xaa\x17\n\x06\x12\x04\x0e\0O\x01\n\xbc\x04\n\x01\x0c\x12\
    \x03\x0e\0\x122\xb1\x04\x20Copyright\x202020\x20Google\x20LLC\n\n\x20Lic\
    ensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\x08\n\x01\x02\x12\x03\x10\0\x13\n\x08\n\x01\x08\x12\x03\x12\0\\\n\t\
    \n\x02\x08\x0b\x12\x03\x12\0\\\n\x08\n\x01\x08\x12\x03\x13\0\"\n\t\n\x02\
    \x08\n\x12\x03\x13\0\"\n\x08\n\x01\x08\x12\x03\x14\0-\n\t\n\x02\x08\x08\
    \x12\x03\x14\0-\n\x08\n\x01\x08\x12\x03\x15\0'\n\t\n\x02\x08\x01\x12\x03\
    \x15\0'\n\x08\n\x01\x08\x12\x03\x16\0\"\n\t\n\x02\x08$\x12\x03\x16\0\"\n\
    \xda\x07\n\x02\x04\0\x12\x045\0O\x01\x1a\xcd\x07\x20Logging\x20configura\
    tion\x20of\x20the\x20service.\n\n\x20The\x20following\x20example\x20show\
    s\x20how\x20to\x20configure\x20logs\x20to\x20be\x20sent\x20to\x20the\n\
    \x20producer\x20and\x20consumer\x20projects.\x20In\x20the\x20example,\
    \x20the\x20`activity_history`\n\x20log\x20is\x20sent\x20to\x20both\x20th\
    e\x20producer\x20and\x20consumer\x20projects,\x20whereas\x20the\n\x20`pu\
    rchase_history`\x20log\x20is\x20only\x20sent\x20to\x20the\x20producer\
    \x20project.\n\n\x20\x20\x20\x20\x20monitored_resources:\n\x20\x20\x20\
    \x20\x20-\x20type:\x20library.googleapis.com/branch\n\x20\x20\x20\x20\
    \x20\x20\x20labels:\n\x20\x20\x20\x20\x20\x20\x20-\x20key:\x20/city\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20description:\x20The\x20city\x20where\
    \x20the\x20library\x20branch\x20is\x20located\x20in.\n\x20\x20\x20\x20\
    \x20\x20\x20-\x20key:\x20/name\n\x20\x20\x20\x20\x20\x20\x20\x20\x20desc\
    ription:\x20The\x20name\x20of\x20the\x20branch.\n\x20\x20\x20\x20\x20log\
    s:\n\x20\x20\x20\x20\x20-\x20name:\x20activity_history\n\x20\x20\x20\x20\
    \x20\x20\x20labels:\n\x20\x20\x20\x20\x20\x20\x20-\x20key:\x20/customer_\
    id\n\x20\x20\x20\x20\x20-\x20name:\x20purchase_history\n\x20\x20\x20\x20\
    \x20logging:\n\x20\x20\x20\x20\x20\x20\x20producer_destinations:\n\x20\
    \x20\x20\x20\x20\x20\x20-\x20monitored_resource:\x20library.googleapis.c\
    om/branch\n\x20\x20\x20\x20\x20\x20\x20\x20\x20logs:\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20-\x20activity_history\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20-\x20purchase_history\n\x20\x20\x20\x20\x20\x20\x20consumer_dest\
    inations:\n\x20\x20\x20\x20\x20\x20\x20-\x20monitored_resource:\x20libra\
    ry.googleapis.com/branch\n\x20\x20\x20\x20\x20\x20\x20\x20\x20logs:\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20activity_history\n\n\n\n\x03\
    \x04\0\x01\x12\x035\x08\x0f\np\n\x04\x04\0\x03\0\x12\x048\x02B\x03\x1ab\
    \x20Configuration\x20of\x20a\x20specific\x20logging\x20destination\x20(t\
    he\x20producer\x20project\n\x20or\x20the\x20consumer\x20project).\n\n\
    \x0c\n\x05\x04\0\x03\0\x01\x12\x038\n\x1c\n\x9e\x01\n\x06\x04\0\x03\0\
    \x02\0\x12\x03;\x04\"\x1a\x8e\x01\x20The\x20monitored\x20resource\x20typ\
    e.\x20The\x20type\x20must\x20be\x20defined\x20in\x20the\n\x20[Service.mo\
    nitored_resources][google.api.Service.monitored_resources]\x20section.\n\
    \n\x0f\n\x07\x04\0\x03\0\x02\0\x04\x12\x04;\x048\x1e\n\x0e\n\x07\x04\0\
    \x03\0\x02\0\x05\x12\x03;\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\
    \x03;\x0b\x1d\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03;\x20!\n\x8e\x02\
    \n\x06\x04\0\x03\0\x02\x01\x12\x03A\x04\x1d\x1a\xfe\x01\x20Names\x20of\
    \x20the\x20logs\x20to\x20be\x20sent\x20to\x20this\x20destination.\x20Eac\
    h\x20name\x20must\n\x20be\x20defined\x20in\x20the\x20[Service.logs][goog\
    le.api.Service.logs]\x20section.\x20If\x20the\x20log\x20name\x20is\n\x20\
    not\x20a\x20domain\x20scoped\x20name,\x20it\x20will\x20be\x20automatical\
    ly\x20prefixed\x20with\n\x20the\x20service\x20name\x20followed\x20by\x20\
    \"/\".\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\x12\x03A\x04\x0c\n\x0e\n\
    \x07\x04\0\x03\0\x02\x01\x05\x12\x03A\r\x13\n\x0e\n\x07\x04\0\x03\0\x02\
    \x01\x01\x12\x03A\x14\x18\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03A\
    \x1b\x1c\n\xef\x01\n\x04\x04\0\x02\0\x12\x03H\x028\x1a\xe1\x01\x20Loggin\
    g\x20configurations\x20for\x20sending\x20logs\x20to\x20the\x20producer\
    \x20project.\n\x20There\x20can\x20be\x20multiple\x20producer\x20destinat\
    ions,\x20each\x20one\x20must\x20have\x20a\n\x20different\x20monitored\
    \x20resource\x20type.\x20A\x20log\x20can\x20be\x20used\x20in\x20at\x20mo\
    st\n\x20one\x20producer\x20destination.\n\n\x0c\n\x05\x04\0\x02\0\x04\
    \x12\x03H\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03H\x0b\x1d\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03H\x1e3\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03H67\n\
    \xef\x01\n\x04\x04\0\x02\x01\x12\x03N\x028\x1a\xe1\x01\x20Logging\x20con\
    figurations\x20for\x20sending\x20logs\x20to\x20the\x20consumer\x20projec\
    t.\n\x20There\x20can\x20be\x20multiple\x20consumer\x20destinations,\x20e\
    ach\x20one\x20must\x20have\x20a\n\x20different\x20monitored\x20resource\
    \x20type.\x20A\x20log\x20can\x20be\x20used\x20in\x20at\x20most\n\x20one\
    \x20consumer\x20destination.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03N\
    \x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03N\x0b\x1d\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03N\x1e3\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03N67b\x06\
    proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
