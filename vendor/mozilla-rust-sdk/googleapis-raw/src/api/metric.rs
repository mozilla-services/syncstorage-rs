// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/metric.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct MetricDescriptor {
    // message fields
    pub name: ::std::string::String,
    pub field_type: ::std::string::String,
    pub labels: ::protobuf::RepeatedField<super::label::LabelDescriptor>,
    pub metric_kind: MetricDescriptor_MetricKind,
    pub value_type: MetricDescriptor_ValueType,
    pub unit: ::std::string::String,
    pub description: ::std::string::String,
    pub display_name: ::std::string::String,
    pub metadata: ::protobuf::SingularPtrField<MetricDescriptor_MetricDescriptorMetadata>,
    pub launch_stage: super::launch_stage::LaunchStage,
    pub monitored_resource_types: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricDescriptor {
    fn default() -> &'a MetricDescriptor {
        <MetricDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl MetricDescriptor {
    pub fn new() -> MetricDescriptor {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string type = 8;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // repeated .google.api.LabelDescriptor labels = 2;


    pub fn get_labels(&self) -> &[super::label::LabelDescriptor] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<super::label::LabelDescriptor>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<super::label::LabelDescriptor> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<super::label::LabelDescriptor> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // .google.api.MetricDescriptor.MetricKind metric_kind = 3;


    pub fn get_metric_kind(&self) -> MetricDescriptor_MetricKind {
        self.metric_kind
    }
    pub fn clear_metric_kind(&mut self) {
        self.metric_kind = MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_metric_kind(&mut self, v: MetricDescriptor_MetricKind) {
        self.metric_kind = v;
    }

    // .google.api.MetricDescriptor.ValueType value_type = 4;


    pub fn get_value_type(&self) -> MetricDescriptor_ValueType {
        self.value_type
    }
    pub fn clear_value_type(&mut self) {
        self.value_type = MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_value_type(&mut self, v: MetricDescriptor_ValueType) {
        self.value_type = v;
    }

    // string unit = 5;


    pub fn get_unit(&self) -> &str {
        &self.unit
    }
    pub fn clear_unit(&mut self) {
        self.unit.clear();
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: ::std::string::String) {
        self.unit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unit(&mut self) -> &mut ::std::string::String {
        &mut self.unit
    }

    // Take field
    pub fn take_unit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unit, ::std::string::String::new())
    }

    // string description = 6;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string display_name = 7;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // .google.api.MetricDescriptor.MetricDescriptorMetadata metadata = 10;


    pub fn get_metadata(&self) -> &MetricDescriptor_MetricDescriptorMetadata {
        self.metadata.as_ref().unwrap_or_else(|| <MetricDescriptor_MetricDescriptorMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: MetricDescriptor_MetricDescriptorMetadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut MetricDescriptor_MetricDescriptorMetadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> MetricDescriptor_MetricDescriptorMetadata {
        self.metadata.take().unwrap_or_else(|| MetricDescriptor_MetricDescriptorMetadata::new())
    }

    // .google.api.LaunchStage launch_stage = 12;


    pub fn get_launch_stage(&self) -> super::launch_stage::LaunchStage {
        self.launch_stage
    }
    pub fn clear_launch_stage(&mut self) {
        self.launch_stage = super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_launch_stage(&mut self, v: super::launch_stage::LaunchStage) {
        self.launch_stage = v;
    }

    // repeated string monitored_resource_types = 13;


    pub fn get_monitored_resource_types(&self) -> &[::std::string::String] {
        &self.monitored_resource_types
    }
    pub fn clear_monitored_resource_types(&mut self) {
        self.monitored_resource_types.clear();
    }

    // Param is passed by value, moved
    pub fn set_monitored_resource_types(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.monitored_resource_types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_monitored_resource_types(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.monitored_resource_types
    }

    // Take field
    pub fn take_monitored_resource_types(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.monitored_resource_types, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MetricDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.metric_kind, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.value_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unit)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                12 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.launch_stage, 12, &mut self.unknown_fields)?
                },
                13 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.monitored_resource_types)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.field_type);
        }
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.metric_kind != MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.metric_kind);
        }
        if self.value_type != MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.value_type);
        }
        if !self.unit.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.unit);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.description);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.display_name);
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.launch_stage != super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(12, self.launch_stage);
        }
        for value in &self.monitored_resource_types {
            my_size += ::protobuf::rt::string_size(13, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(8, &self.field_type)?;
        }
        for v in &self.labels {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.metric_kind != MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.metric_kind))?;
        }
        if self.value_type != MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.value_type))?;
        }
        if !self.unit.is_empty() {
            os.write_string(5, &self.unit)?;
        }
        if !self.description.is_empty() {
            os.write_string(6, &self.description)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(7, &self.display_name)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.launch_stage != super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED {
            os.write_enum(12, ::protobuf::ProtobufEnum::value(&self.launch_stage))?;
        }
        for v in &self.monitored_resource_types {
            os.write_string(13, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricDescriptor {
        MetricDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &MetricDescriptor| { &m.name },
                |m: &mut MetricDescriptor| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &MetricDescriptor| { &m.field_type },
                |m: &mut MetricDescriptor| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::label::LabelDescriptor>>(
                "labels",
                |m: &MetricDescriptor| { &m.labels },
                |m: &mut MetricDescriptor| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MetricDescriptor_MetricKind>>(
                "metric_kind",
                |m: &MetricDescriptor| { &m.metric_kind },
                |m: &mut MetricDescriptor| { &mut m.metric_kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MetricDescriptor_ValueType>>(
                "value_type",
                |m: &MetricDescriptor| { &m.value_type },
                |m: &mut MetricDescriptor| { &mut m.value_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "unit",
                |m: &MetricDescriptor| { &m.unit },
                |m: &mut MetricDescriptor| { &mut m.unit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &MetricDescriptor| { &m.description },
                |m: &mut MetricDescriptor| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &MetricDescriptor| { &m.display_name },
                |m: &mut MetricDescriptor| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MetricDescriptor_MetricDescriptorMetadata>>(
                "metadata",
                |m: &MetricDescriptor| { &m.metadata },
                |m: &mut MetricDescriptor| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::launch_stage::LaunchStage>>(
                "launch_stage",
                |m: &MetricDescriptor| { &m.launch_stage },
                |m: &mut MetricDescriptor| { &mut m.launch_stage },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "monitored_resource_types",
                |m: &MetricDescriptor| { &m.monitored_resource_types },
                |m: &mut MetricDescriptor| { &mut m.monitored_resource_types },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetricDescriptor>(
                "MetricDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetricDescriptor {
        static instance: ::protobuf::rt::LazyV2<MetricDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetricDescriptor::new)
    }
}

impl ::protobuf::Clear for MetricDescriptor {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type.clear();
        self.labels.clear();
        self.metric_kind = MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED;
        self.value_type = MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED;
        self.unit.clear();
        self.description.clear();
        self.display_name.clear();
        self.metadata.clear();
        self.launch_stage = super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED;
        self.monitored_resource_types.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetricDescriptor_MetricDescriptorMetadata {
    // message fields
    pub launch_stage: super::launch_stage::LaunchStage,
    pub sample_period: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub ingest_delay: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetricDescriptor_MetricDescriptorMetadata {
    fn default() -> &'a MetricDescriptor_MetricDescriptorMetadata {
        <MetricDescriptor_MetricDescriptorMetadata as ::protobuf::Message>::default_instance()
    }
}

impl MetricDescriptor_MetricDescriptorMetadata {
    pub fn new() -> MetricDescriptor_MetricDescriptorMetadata {
        ::std::default::Default::default()
    }

    // .google.api.LaunchStage launch_stage = 1;


    pub fn get_launch_stage(&self) -> super::launch_stage::LaunchStage {
        self.launch_stage
    }
    pub fn clear_launch_stage(&mut self) {
        self.launch_stage = super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_launch_stage(&mut self, v: super::launch_stage::LaunchStage) {
        self.launch_stage = v;
    }

    // .google.protobuf.Duration sample_period = 2;


    pub fn get_sample_period(&self) -> &::protobuf::well_known_types::Duration {
        self.sample_period.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sample_period(&mut self) {
        self.sample_period.clear();
    }

    pub fn has_sample_period(&self) -> bool {
        self.sample_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sample_period(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.sample_period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sample_period(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.sample_period.is_none() {
            self.sample_period.set_default();
        }
        self.sample_period.as_mut().unwrap()
    }

    // Take field
    pub fn take_sample_period(&mut self) -> ::protobuf::well_known_types::Duration {
        self.sample_period.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration ingest_delay = 3;


    pub fn get_ingest_delay(&self) -> &::protobuf::well_known_types::Duration {
        self.ingest_delay.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ingest_delay(&mut self) {
        self.ingest_delay.clear();
    }

    pub fn has_ingest_delay(&self) -> bool {
        self.ingest_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ingest_delay(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.ingest_delay = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ingest_delay(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.ingest_delay.is_none() {
            self.ingest_delay.set_default();
        }
        self.ingest_delay.as_mut().unwrap()
    }

    // Take field
    pub fn take_ingest_delay(&mut self) -> ::protobuf::well_known_types::Duration {
        self.ingest_delay.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for MetricDescriptor_MetricDescriptorMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.sample_period {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ingest_delay {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.launch_stage, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sample_period)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ingest_delay)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.launch_stage != super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.launch_stage);
        }
        if let Some(ref v) = self.sample_period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ingest_delay.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.launch_stage != super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.launch_stage))?;
        }
        if let Some(ref v) = self.sample_period.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ingest_delay.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricDescriptor_MetricDescriptorMetadata {
        MetricDescriptor_MetricDescriptorMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::launch_stage::LaunchStage>>(
                "launch_stage",
                |m: &MetricDescriptor_MetricDescriptorMetadata| { &m.launch_stage },
                |m: &mut MetricDescriptor_MetricDescriptorMetadata| { &mut m.launch_stage },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "sample_period",
                |m: &MetricDescriptor_MetricDescriptorMetadata| { &m.sample_period },
                |m: &mut MetricDescriptor_MetricDescriptorMetadata| { &mut m.sample_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "ingest_delay",
                |m: &MetricDescriptor_MetricDescriptorMetadata| { &m.ingest_delay },
                |m: &mut MetricDescriptor_MetricDescriptorMetadata| { &mut m.ingest_delay },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetricDescriptor_MetricDescriptorMetadata>(
                "MetricDescriptor.MetricDescriptorMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetricDescriptor_MetricDescriptorMetadata {
        static instance: ::protobuf::rt::LazyV2<MetricDescriptor_MetricDescriptorMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetricDescriptor_MetricDescriptorMetadata::new)
    }
}

impl ::protobuf::Clear for MetricDescriptor_MetricDescriptorMetadata {
    fn clear(&mut self) {
        self.launch_stage = super::launch_stage::LaunchStage::LAUNCH_STAGE_UNSPECIFIED;
        self.sample_period.clear();
        self.ingest_delay.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricDescriptor_MetricDescriptorMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor_MetricDescriptorMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MetricDescriptor_MetricKind {
    METRIC_KIND_UNSPECIFIED = 0,
    GAUGE = 1,
    DELTA = 2,
    CUMULATIVE = 3,
}

impl ::protobuf::ProtobufEnum for MetricDescriptor_MetricKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricDescriptor_MetricKind> {
        match value {
            0 => ::std::option::Option::Some(MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED),
            1 => ::std::option::Option::Some(MetricDescriptor_MetricKind::GAUGE),
            2 => ::std::option::Option::Some(MetricDescriptor_MetricKind::DELTA),
            3 => ::std::option::Option::Some(MetricDescriptor_MetricKind::CUMULATIVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MetricDescriptor_MetricKind] = &[
            MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED,
            MetricDescriptor_MetricKind::GAUGE,
            MetricDescriptor_MetricKind::DELTA,
            MetricDescriptor_MetricKind::CUMULATIVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MetricDescriptor_MetricKind>("MetricDescriptor.MetricKind", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MetricDescriptor_MetricKind {
}

impl ::std::default::Default for MetricDescriptor_MetricKind {
    fn default() -> Self {
        MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor_MetricKind {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MetricDescriptor_ValueType {
    VALUE_TYPE_UNSPECIFIED = 0,
    BOOL = 1,
    INT64 = 2,
    DOUBLE = 3,
    STRING = 4,
    DISTRIBUTION = 5,
    MONEY = 6,
}

impl ::protobuf::ProtobufEnum for MetricDescriptor_ValueType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricDescriptor_ValueType> {
        match value {
            0 => ::std::option::Option::Some(MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(MetricDescriptor_ValueType::BOOL),
            2 => ::std::option::Option::Some(MetricDescriptor_ValueType::INT64),
            3 => ::std::option::Option::Some(MetricDescriptor_ValueType::DOUBLE),
            4 => ::std::option::Option::Some(MetricDescriptor_ValueType::STRING),
            5 => ::std::option::Option::Some(MetricDescriptor_ValueType::DISTRIBUTION),
            6 => ::std::option::Option::Some(MetricDescriptor_ValueType::MONEY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MetricDescriptor_ValueType] = &[
            MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED,
            MetricDescriptor_ValueType::BOOL,
            MetricDescriptor_ValueType::INT64,
            MetricDescriptor_ValueType::DOUBLE,
            MetricDescriptor_ValueType::STRING,
            MetricDescriptor_ValueType::DISTRIBUTION,
            MetricDescriptor_ValueType::MONEY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MetricDescriptor_ValueType>("MetricDescriptor.ValueType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MetricDescriptor_ValueType {
}

impl ::std::default::Default for MetricDescriptor_ValueType {
    fn default() -> Self {
        MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor_ValueType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metric {
    // message fields
    pub field_type: ::std::string::String,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metric {
    fn default() -> &'a Metric {
        <Metric as ::protobuf::Message>::default_instance()
    }
}

impl Metric {
    pub fn new() -> Metric {
        ::std::default::Default::default()
    }

    // string type = 3;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // repeated .google.api.Metric.LabelsEntry labels = 2;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Metric {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.field_type);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.labels);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(3, &self.field_type)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.labels, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metric {
        Metric::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &Metric| { &m.field_type },
                |m: &mut Metric| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &Metric| { &m.labels },
                |m: &mut Metric| { &mut m.labels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Metric>(
                "Metric",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Metric {
        static instance: ::protobuf::rt::LazyV2<Metric> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Metric::new)
    }
}

impl ::protobuf::Clear for Metric {
    fn clear(&mut self) {
        self.field_type.clear();
        self.labels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metric {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17google/api/metric.proto\x12\ngoogle.api\x1a\x16google/api/label.pr\
    oto\x1a\x1dgoogle/api/launch_stage.proto\x1a\x1egoogle/protobuf/duration\
    .proto\"\xc1\x07\n\x10MetricDescriptor\x12\x12\n\x04name\x18\x01\x20\x01\
    (\tR\x04name\x12\x12\n\x04type\x18\x08\x20\x01(\tR\x04type\x123\n\x06lab\
    els\x18\x02\x20\x03(\x0b2\x1b.google.api.LabelDescriptorR\x06labels\x12H\
    \n\x0bmetric_kind\x18\x03\x20\x01(\x0e2'.google.api.MetricDescriptor.Met\
    ricKindR\nmetricKind\x12E\n\nvalue_type\x18\x04\x20\x01(\x0e2&.google.ap\
    i.MetricDescriptor.ValueTypeR\tvalueType\x12\x12\n\x04unit\x18\x05\x20\
    \x01(\tR\x04unit\x12\x20\n\x0bdescription\x18\x06\x20\x01(\tR\x0bdescrip\
    tion\x12!\n\x0cdisplay_name\x18\x07\x20\x01(\tR\x0bdisplayName\x12Q\n\
    \x08metadata\x18\n\x20\x01(\x0b25.google.api.MetricDescriptor.MetricDesc\
    riptorMetadataR\x08metadata\x12:\n\x0claunch_stage\x18\x0c\x20\x01(\x0e2\
    \x17.google.api.LaunchStageR\x0blaunchStage\x128\n\x18monitored_resource\
    _types\x18\r\x20\x03(\tR\x16monitoredResourceTypes\x1a\xd8\x01\n\x18Metr\
    icDescriptorMetadata\x12>\n\x0claunch_stage\x18\x01\x20\x01(\x0e2\x17.go\
    ogle.api.LaunchStageR\x0blaunchStageB\x02\x18\x01\x12>\n\rsample_period\
    \x18\x02\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0csamplePeriod\x12\
    <\n\x0cingest_delay\x18\x03\x20\x01(\x0b2\x19.google.protobuf.DurationR\
    \x0bingestDelay\"O\n\nMetricKind\x12\x1b\n\x17METRIC_KIND_UNSPECIFIED\
    \x10\0\x12\t\n\x05GAUGE\x10\x01\x12\t\n\x05DELTA\x10\x02\x12\x0e\n\nCUMU\
    LATIVE\x10\x03\"q\n\tValueType\x12\x1a\n\x16VALUE_TYPE_UNSPECIFIED\x10\0\
    \x12\x08\n\x04BOOL\x10\x01\x12\t\n\x05INT64\x10\x02\x12\n\n\x06DOUBLE\
    \x10\x03\x12\n\n\x06STRING\x10\x04\x12\x10\n\x0cDISTRIBUTION\x10\x05\x12\
    \t\n\x05MONEY\x10\x06\"\x8f\x01\n\x06Metric\x12\x12\n\x04type\x18\x03\
    \x20\x01(\tR\x04type\x126\n\x06labels\x18\x02\x20\x03(\x0b2\x1e.google.a\
    pi.Metric.LabelsEntryR\x06labels\x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05va\
    lue:\x028\x01B_\n\x0ecom.google.apiB\x0bMetricProtoP\x01Z7google.golang.\
    org/genproto/googleapis/api/metric;metric\xa2\x02\x04GAPIJ\xaeS\n\x07\
    \x12\x05\x0e\0\x87\x02\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\
    \x04\x20Copyright\x202020\x20Google\x20LLC\n\n\x20Licensed\x20under\x20t\
    he\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\
    \x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20complian\
    ce\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20\
    of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/\
    licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20la\
    w\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\
    \x12\x03\x10\0\x13\n\t\n\x02\x03\0\x12\x03\x12\0\x20\n\t\n\x02\x03\x01\
    \x12\x03\x13\0'\n\t\n\x02\x03\x02\x12\x03\x14\0(\n\x08\n\x01\x08\x12\x03\
    \x16\0N\n\t\n\x02\x08\x0b\x12\x03\x16\0N\n\x08\n\x01\x08\x12\x03\x17\0\"\
    \n\t\n\x02\x08\n\x12\x03\x17\0\"\n\x08\n\x01\x08\x12\x03\x18\0,\n\t\n\
    \x02\x08\x08\x12\x03\x18\0,\n\x08\n\x01\x08\x12\x03\x19\0'\n\t\n\x02\x08\
    \x01\x12\x03\x19\0'\n\x08\n\x01\x08\x12\x03\x1a\0\"\n\t\n\x02\x08$\x12\
    \x03\x1a\0\"\n\xbf\x01\n\x02\x04\0\x12\x05\x20\0\xfb\x01\x01\x1a\xb1\x01\
    \x20Defines\x20a\x20metric\x20type\x20and\x20its\x20schema.\x20Once\x20a\
    \x20metric\x20descriptor\x20is\x20created,\n\x20deleting\x20or\x20alteri\
    ng\x20it\x20stops\x20data\x20collection\x20and\x20makes\x20the\x20metric\
    \x20type's\n\x20existing\x20data\x20unusable.\n\n\n\n\n\x03\x04\0\x01\
    \x12\x03\x20\x08\x18\nW\n\x04\x04\0\x03\0\x12\x04\"\x020\x03\x1aI\x20Add\
    itional\x20annotations\x20that\x20can\x20be\x20used\x20to\x20guide\x20th\
    e\x20usage\x20of\x20a\x20metric.\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\"\
    \n\"\n|\n\x06\x04\0\x03\0\x02\0\x12\x03$\x045\x1am\x20Deprecated.\x20Mus\
    t\x20use\x20the\x20[MetricDescriptor.launch_stage][google.api.MetricDesc\
    riptor.launch_stage]\x20instead.\n\n\x0f\n\x07\x04\0\x03\0\x02\0\x04\x12\
    \x04$\x04\"$\n\x0e\n\x07\x04\0\x03\0\x02\0\x06\x12\x03$\x04\x0f\n\x0e\n\
    \x07\x04\0\x03\0\x02\0\x01\x12\x03$\x10\x1c\n\x0e\n\x07\x04\0\x03\0\x02\
    \0\x03\x12\x03$\x1f\x20\n\x0e\n\x07\x04\0\x03\0\x02\0\x08\x12\x03$!4\n\
    \x0f\n\x08\x04\0\x03\0\x02\0\x08\x03\x12\x03$\"3\n\x8a\x02\n\x06\x04\0\
    \x03\0\x02\x01\x12\x03*\x04/\x1a\xfa\x01\x20The\x20sampling\x20period\
    \x20of\x20metric\x20data\x20points.\x20For\x20metrics\x20which\x20are\
    \x20written\n\x20periodically,\x20consecutive\x20data\x20points\x20are\
    \x20stored\x20at\x20this\x20time\x20interval,\n\x20excluding\x20data\x20\
    loss\x20due\x20to\x20errors.\x20Metrics\x20with\x20a\x20higher\x20granul\
    arity\x20have\n\x20a\x20smaller\x20sampling\x20period.\n\n\x0f\n\x07\x04\
    \0\x03\0\x02\x01\x04\x12\x04*\x04$5\n\x0e\n\x07\x04\0\x03\0\x02\x01\x06\
    \x12\x03*\x04\x1c\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03*\x1d*\n\
    \x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03*-.\n\xbc\x01\n\x06\x04\0\x03\
    \0\x02\x02\x12\x03/\x04.\x1a\xac\x01\x20The\x20delay\x20of\x20data\x20po\
    ints\x20caused\x20by\x20ingestion.\x20Data\x20points\x20older\x20than\
    \x20this\n\x20age\x20are\x20guaranteed\x20to\x20be\x20ingested\x20and\
    \x20available\x20to\x20be\x20read,\x20excluding\n\x20data\x20loss\x20due\
    \x20to\x20errors.\n\n\x0f\n\x07\x04\0\x03\0\x02\x02\x04\x12\x04/\x04*/\n\
    \x0e\n\x07\x04\0\x03\0\x02\x02\x06\x12\x03/\x04\x1c\n\x0e\n\x07\x04\0\
    \x03\0\x02\x02\x01\x12\x03/\x1d)\n\x0e\n\x07\x04\0\x03\0\x02\x02\x03\x12\
    \x03/,-\n\xd9\x01\n\x04\x04\0\x04\0\x12\x045\x02E\x03\x1a\xca\x01\x20The\
    \x20kind\x20of\x20measurement.\x20It\x20describes\x20how\x20the\x20data\
    \x20is\x20reported.\n\x20For\x20information\x20on\x20setting\x20the\x20s\
    tart\x20time\x20and\x20end\x20time\x20based\x20on\n\x20the\x20MetricKind\
    ,\x20see\x20[TimeInterval][google.monitoring.v3.TimeInterval].\n\n\x0c\n\
    \x05\x04\0\x04\0\x01\x12\x035\x07\x11\n/\n\x06\x04\0\x04\0\x02\0\x12\x03\
    7\x04\x20\x1a\x20\x20Do\x20not\x20use\x20this\x20default\x20value.\n\n\
    \x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x037\x04\x1b\n\x0e\n\x07\x04\0\x04\
    \0\x02\0\x02\x12\x037\x1e\x1f\n9\n\x06\x04\0\x04\0\x02\x01\x12\x03:\x04\
    \x0e\x1a*\x20An\x20instantaneous\x20measurement\x20of\x20a\x20value.\n\n\
    \x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03:\x04\t\n\x0e\n\x07\x04\0\x04\
    \0\x02\x01\x02\x12\x03:\x0c\r\n>\n\x06\x04\0\x04\0\x02\x02\x12\x03=\x04\
    \x0e\x1a/\x20The\x20change\x20in\x20a\x20value\x20during\x20a\x20time\
    \x20interval.\n\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03=\x04\t\n\x0e\
    \n\x07\x04\0\x04\0\x02\x02\x02\x12\x03=\x0c\r\n\x8a\x02\n\x06\x04\0\x04\
    \0\x02\x03\x12\x03D\x04\x13\x1a\xfa\x01\x20A\x20value\x20accumulated\x20\
    over\x20a\x20time\x20interval.\x20\x20Cumulative\n\x20measurements\x20in\
    \x20a\x20time\x20series\x20should\x20have\x20the\x20same\x20start\x20tim\
    e\n\x20and\x20increasing\x20end\x20times,\x20until\x20an\x20event\x20res\
    ets\x20the\x20cumulative\n\x20value\x20to\x20zero\x20and\x20sets\x20a\
    \x20new\x20start\x20time\x20for\x20the\x20following\n\x20points.\n\n\x0e\
    \n\x07\x04\0\x04\0\x02\x03\x01\x12\x03D\x04\x0e\n\x0e\n\x07\x04\0\x04\0\
    \x02\x03\x02\x12\x03D\x11\x12\n+\n\x04\x04\0\x04\x01\x12\x04H\x02_\x03\
    \x1a\x1d\x20The\x20value\x20type\x20of\x20a\x20metric.\n\n\x0c\n\x05\x04\
    \0\x04\x01\x01\x12\x03H\x07\x10\n/\n\x06\x04\0\x04\x01\x02\0\x12\x03J\
    \x04\x1f\x1a\x20\x20Do\x20not\x20use\x20this\x20default\x20value.\n\n\
    \x0e\n\x07\x04\0\x04\x01\x02\0\x01\x12\x03J\x04\x1a\n\x0e\n\x07\x04\0\
    \x04\x01\x02\0\x02\x12\x03J\x1d\x1e\ni\n\x06\x04\0\x04\x01\x02\x01\x12\
    \x03N\x04\r\x1aZ\x20The\x20value\x20is\x20a\x20boolean.\n\x20This\x20val\
    ue\x20type\x20can\x20be\x20used\x20only\x20if\x20the\x20metric\x20kind\
    \x20is\x20`GAUGE`.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x01\x01\x12\x03N\x04\
    \x08\n\x0e\n\x07\x04\0\x04\x01\x02\x01\x02\x12\x03N\x0b\x0c\n6\n\x06\x04\
    \0\x04\x01\x02\x02\x12\x03Q\x04\x0e\x1a'\x20The\x20value\x20is\x20a\x20s\
    igned\x2064-bit\x20integer.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x02\x01\x12\
    \x03Q\x04\t\n\x0e\n\x07\x04\0\x04\x01\x02\x02\x02\x12\x03Q\x0c\r\nG\n\
    \x06\x04\0\x04\x01\x02\x03\x12\x03T\x04\x0f\x1a8\x20The\x20value\x20is\
    \x20a\x20double\x20precision\x20floating\x20point\x20number.\n\n\x0e\n\
    \x07\x04\0\x04\x01\x02\x03\x01\x12\x03T\x04\n\n\x0e\n\x07\x04\0\x04\x01\
    \x02\x03\x02\x12\x03T\r\x0e\nm\n\x06\x04\0\x04\x01\x02\x04\x12\x03X\x04\
    \x0f\x1a^\x20The\x20value\x20is\x20a\x20text\x20string.\n\x20This\x20val\
    ue\x20type\x20can\x20be\x20used\x20only\x20if\x20the\x20metric\x20kind\
    \x20is\x20`GAUGE`.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x04\x01\x12\x03X\x04\
    \n\n\x0e\n\x07\x04\0\x04\x01\x02\x04\x02\x12\x03X\r\x0e\nJ\n\x06\x04\0\
    \x04\x01\x02\x05\x12\x03[\x04\x15\x1a;\x20The\x20value\x20is\x20a\x20[`D\
    istribution`][google.api.Distribution].\n\n\x0e\n\x07\x04\0\x04\x01\x02\
    \x05\x01\x12\x03[\x04\x10\n\x0e\n\x07\x04\0\x04\x01\x02\x05\x02\x12\x03[\
    \x13\x14\n$\n\x06\x04\0\x04\x01\x02\x06\x12\x03^\x04\x0e\x1a\x15\x20The\
    \x20value\x20is\x20money.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x06\x01\x12\
    \x03^\x04\t\n\x0e\n\x07\x04\0\x04\x01\x02\x06\x02\x12\x03^\x0c\r\n:\n\
    \x04\x04\0\x02\0\x12\x03b\x02\x12\x1a-\x20The\x20resource\x20name\x20of\
    \x20the\x20metric\x20descriptor.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04b\
    \x02_\x03\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03b\x02\x08\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03b\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03b\x10\x11\n\
    \xa9\x03\n\x04\x04\0\x02\x01\x12\x03l\x02\x12\x1a\x9b\x03\x20The\x20metr\
    ic\x20type,\x20including\x20its\x20DNS\x20name\x20prefix.\x20The\x20type\
    \x20is\x20not\n\x20URL-encoded.\x20All\x20user-defined\x20metric\x20type\
    s\x20have\x20the\x20DNS\x20name\n\x20`custom.googleapis.com`\x20or\x20`e\
    xternal.googleapis.com`.\x20Metric\x20types\x20should\n\x20use\x20a\x20n\
    atural\x20hierarchical\x20grouping.\x20For\x20example:\n\n\x20\x20\x20\
    \x20\x20\"custom.googleapis.com/invoice/paid/amount\"\n\x20\x20\x20\x20\
    \x20\"external.googleapis.com/prometheus/up\"\n\x20\x20\x20\x20\x20\"app\
    engine.googleapis.com/http/server/response_latencies\"\n\n\r\n\x05\x04\0\
    \x02\x01\x04\x12\x04l\x02b\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03l\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03l\t\r\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03l\x10\x11\n\xd5\x02\n\x04\x04\0\x02\x02\x12\x03t\x02\
    &\x1a\xc7\x02\x20The\x20set\x20of\x20labels\x20that\x20can\x20be\x20used\
    \x20to\x20describe\x20a\x20specific\n\x20instance\x20of\x20this\x20metri\
    c\x20type.\x20For\x20example,\x20the\n\x20`appengine.googleapis.com/http\
    /server/response_latencies`\x20metric\n\x20type\x20has\x20a\x20label\x20\
    for\x20the\x20HTTP\x20response\x20code,\x20`response_code`,\x20so\n\x20y\
    ou\x20can\x20look\x20at\x20latencies\x20for\x20successful\x20responses\
    \x20or\x20just\n\x20for\x20responses\x20that\x20failed.\n\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x03t\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03t\
    \x0b\x1a\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03t\x1b!\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03t$%\n\xa6\x01\n\x04\x04\0\x02\x03\x12\x03x\x02\x1d\
    \x1a\x98\x01\x20Whether\x20the\x20metric\x20records\x20instantaneous\x20\
    values,\x20changes\x20to\x20a\x20value,\x20etc.\n\x20Some\x20combination\
    s\x20of\x20`metric_kind`\x20and\x20`value_type`\x20might\x20not\x20be\
    \x20supported.\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04x\x02t&\n\x0c\n\x05\
    \x04\0\x02\x03\x06\x12\x03x\x02\x0c\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03x\r\x18\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03x\x1b\x1c\n\xa1\x01\n\
    \x04\x04\0\x02\x04\x12\x03|\x02\x1b\x1a\x93\x01\x20Whether\x20the\x20mea\
    surement\x20is\x20an\x20integer,\x20a\x20floating-point\x20number,\x20et\
    c.\n\x20Some\x20combinations\x20of\x20`metric_kind`\x20and\x20`value_typ\
    e`\x20might\x20not\x20be\x20supported.\n\n\r\n\x05\x04\0\x02\x04\x04\x12\
    \x04|\x02x\x1d\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03|\x02\x0b\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03|\x0c\x16\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03|\x19\x1a\n\xca\x1e\n\x04\x04\0\x02\x05\x12\x04\xe4\x01\x02\x12\
    \x1a\xbb\x1e\x20The\x20units\x20in\x20which\x20the\x20metric\x20value\
    \x20is\x20reported.\x20It\x20is\x20only\x20applicable\n\x20if\x20the\x20\
    `value_type`\x20is\x20`INT64`,\x20`DOUBLE`,\x20or\x20`DISTRIBUTION`.\x20\
    The\x20`unit`\n\x20defines\x20the\x20representation\x20of\x20the\x20stor\
    ed\x20metric\x20values.\n\n\x20Different\x20systems\x20might\x20scale\
    \x20the\x20values\x20to\x20be\x20more\x20easily\x20displayed\x20(so\x20a\
    \n\x20value\x20of\x20`0.02kBy`\x20_might_\x20be\x20displayed\x20as\x20`2\
    0By`,\x20and\x20a\x20value\x20of\n\x20`3523kBy`\x20_might_\x20be\x20disp\
    layed\x20as\x20`3.5MBy`).\x20However,\x20if\x20the\x20`unit`\x20is\n\x20\
    `kBy`,\x20then\x20the\x20value\x20of\x20the\x20metric\x20is\x20always\
    \x20in\x20thousands\x20of\x20bytes,\x20no\n\x20matter\x20how\x20it\x20mi\
    ght\x20be\x20displayed.\n\n\x20If\x20you\x20want\x20a\x20custom\x20metri\
    c\x20to\x20record\x20the\x20exact\x20number\x20of\x20CPU-seconds\x20used\
    \n\x20by\x20a\x20job,\x20you\x20can\x20create\x20an\x20`INT64\x20CUMULAT\
    IVE`\x20metric\x20whose\x20`unit`\x20is\n\x20`s{CPU}`\x20(or\x20equivale\
    ntly\x20`1s{CPU}`\x20or\x20just\x20`s`).\x20If\x20the\x20job\x20uses\x20\
    12,005\n\x20CPU-seconds,\x20then\x20the\x20value\x20is\x20written\x20as\
    \x20`12005`.\n\n\x20Alternatively,\x20if\x20you\x20want\x20a\x20custom\
    \x20metric\x20to\x20record\x20data\x20in\x20a\x20more\n\x20granular\x20w\
    ay,\x20you\x20can\x20create\x20a\x20`DOUBLE\x20CUMULATIVE`\x20metric\x20\
    whose\x20`unit`\x20is\n\x20`ks{CPU}`,\x20and\x20then\x20write\x20the\x20\
    value\x20`12.005`\x20(which\x20is\x20`12005/1000`),\n\x20or\x20use\x20`K\
    is{CPU}`\x20and\x20write\x20`11.723`\x20(which\x20is\x20`12005/1024`).\n\
    \n\x20The\x20supported\x20units\x20are\x20a\x20subset\x20of\x20[The\x20U\
    nified\x20Code\x20for\x20Units\x20of\n\x20Measure](https://unitsofmeasur\
    e.org/ucum.html)\x20standard:\n\n\x20**Basic\x20units\x20(UNIT)**\n\n\
    \x20*\x20`bit`\x20\x20\x20bit\n\x20*\x20`By`\x20\x20\x20\x20byte\n\x20*\
    \x20`s`\x20\x20\x20\x20\x20second\n\x20*\x20`min`\x20\x20\x20minute\n\
    \x20*\x20`h`\x20\x20\x20\x20\x20hour\n\x20*\x20`d`\x20\x20\x20\x20\x20da\
    y\n\x20*\x20`1`\x20\x20\x20\x20\x20dimensionless\n\n\x20**Prefixes\x20(P\
    REFIX)**\n\n\x20*\x20`k`\x20\x20\x20\x20\x20kilo\x20\x20\x20\x20(10^3)\n\
    \x20*\x20`M`\x20\x20\x20\x20\x20mega\x20\x20\x20\x20(10^6)\n\x20*\x20`G`\
    \x20\x20\x20\x20\x20giga\x20\x20\x20\x20(10^9)\n\x20*\x20`T`\x20\x20\x20\
    \x20\x20tera\x20\x20\x20\x20(10^12)\n\x20*\x20`P`\x20\x20\x20\x20\x20pet\
    a\x20\x20\x20\x20(10^15)\n\x20*\x20`E`\x20\x20\x20\x20\x20exa\x20\x20\
    \x20\x20\x20(10^18)\n\x20*\x20`Z`\x20\x20\x20\x20\x20zetta\x20\x20\x20(1\
    0^21)\n\x20*\x20`Y`\x20\x20\x20\x20\x20yotta\x20\x20\x20(10^24)\n\n\x20*\
    \x20`m`\x20\x20\x20\x20\x20milli\x20\x20\x20(10^-3)\n\x20*\x20`u`\x20\
    \x20\x20\x20\x20micro\x20\x20\x20(10^-6)\n\x20*\x20`n`\x20\x20\x20\x20\
    \x20nano\x20\x20\x20\x20(10^-9)\n\x20*\x20`p`\x20\x20\x20\x20\x20pico\
    \x20\x20\x20\x20(10^-12)\n\x20*\x20`f`\x20\x20\x20\x20\x20femto\x20\x20\
    \x20(10^-15)\n\x20*\x20`a`\x20\x20\x20\x20\x20atto\x20\x20\x20\x20(10^-1\
    8)\n\x20*\x20`z`\x20\x20\x20\x20\x20zepto\x20\x20\x20(10^-21)\n\x20*\x20\
    `y`\x20\x20\x20\x20\x20yocto\x20\x20\x20(10^-24)\n\n\x20*\x20`Ki`\x20\
    \x20\x20\x20kibi\x20\x20\x20\x20(2^10)\n\x20*\x20`Mi`\x20\x20\x20\x20meb\
    i\x20\x20\x20\x20(2^20)\n\x20*\x20`Gi`\x20\x20\x20\x20gibi\x20\x20\x20\
    \x20(2^30)\n\x20*\x20`Ti`\x20\x20\x20\x20tebi\x20\x20\x20\x20(2^40)\n\
    \x20*\x20`Pi`\x20\x20\x20\x20pebi\x20\x20\x20\x20(2^50)\n\n\x20**Grammar\
    **\n\n\x20The\x20grammar\x20also\x20includes\x20these\x20connectors:\n\n\
    \x20*\x20`/`\x20\x20\x20\x20division\x20or\x20ratio\x20(as\x20an\x20infi\
    x\x20operator).\x20For\x20examples,\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20`kBy/{email}`\x20or\x20`MiBy/10ms`\x20(although\x20you\x20should\
    \x20almost\x20never\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20have\x20`/s\
    `\x20in\x20a\x20metric\x20`unit`;\x20rates\x20should\x20always\x20be\x20\
    computed\x20at\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20query\x20time\
    \x20from\x20the\x20underlying\x20cumulative\x20or\x20delta\x20value).\n\
    \x20*\x20`.`\x20\x20\x20\x20multiplication\x20or\x20composition\x20(as\
    \x20an\x20infix\x20operator).\x20For\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20examples,\x20`GBy.d`\x20or\x20`k{watt}.h`.\n\n\x20The\x20grammar\
    \x20for\x20a\x20unit\x20is\x20as\x20follows:\n\n\x20\x20\x20\x20\x20Expr\
    ession\x20=\x20Component\x20{\x20\".\"\x20Component\x20}\x20{\x20\"/\"\
    \x20Component\x20}\x20;\n\n\x20\x20\x20\x20\x20Component\x20=\x20(\x20[\
    \x20PREFIX\x20]\x20UNIT\x20|\x20\"%\"\x20)\x20[\x20Annotation\x20]\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20|\x20Annotation\
    \n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20|\x20\"1\"\
    \n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20;\n\n\x20\
    \x20\x20\x20\x20Annotation\x20=\x20\"{\"\x20NAME\x20\"}\"\x20;\n\n\x20No\
    tes:\n\n\x20*\x20`Annotation`\x20is\x20just\x20a\x20comment\x20if\x20it\
    \x20follows\x20a\x20`UNIT`.\x20If\x20the\x20annotation\n\x20\x20\x20\x20\
    is\x20used\x20alone,\x20then\x20the\x20unit\x20is\x20equivalent\x20to\
    \x20`1`.\x20For\x20examples,\n\x20\x20\x20\x20`{request}/s\x20==\x201/s`\
    ,\x20`By{transmitted}/s\x20==\x20By/s`.\n\x20*\x20`NAME`\x20is\x20a\x20s\
    equence\x20of\x20non-blank\x20printable\x20ASCII\x20characters\x20not\n\
    \x20\x20\x20\x20containing\x20`{`\x20or\x20`}`.\n\x20*\x20`1`\x20represe\
    nts\x20a\x20unitary\x20[dimensionless\n\x20\x20\x20\x20unit](https://en.\
    wikipedia.org/wiki/Dimensionless_quantity)\x20of\x201,\x20such\n\x20\x20\
    \x20\x20as\x20in\x20`1/s`.\x20It\x20is\x20typically\x20used\x20when\x20n\
    one\x20of\x20the\x20basic\x20units\x20are\n\x20\x20\x20\x20appropriate.\
    \x20For\x20example,\x20\"new\x20users\x20per\x20day\"\x20can\x20be\x20re\
    presented\x20as\n\x20\x20\x20\x20`1/d`\x20or\x20`{new-users}/d`\x20(and\
    \x20a\x20metric\x20value\x20`5`\x20would\x20mean\x20\"5\x20new\n\x20\x20\
    \x20\x20users).\x20Alternatively,\x20\"thousands\x20of\x20page\x20views\
    \x20per\x20day\"\x20would\x20be\n\x20\x20\x20\x20represented\x20as\x20`1\
    000/d`\x20or\x20`k1/d`\x20or\x20`k{page_views}/d`\x20(and\x20a\x20metric\
    \n\x20\x20\x20\x20value\x20of\x20`5.3`\x20would\x20mean\x20\"5300\x20pag\
    e\x20views\x20per\x20day\").\n\x20*\x20`%`\x20represents\x20dimensionles\
    s\x20value\x20of\x201/100,\x20and\x20annotates\x20values\x20giving\n\x20\
    \x20\x20\x20a\x20percentage\x20(so\x20the\x20metric\x20values\x20are\x20\
    typically\x20in\x20the\x20range\x20of\x200..100,\n\x20\x20\x20\x20and\
    \x20a\x20metric\x20value\x20`3`\x20means\x20\"3\x20percent\").\n\x20*\
    \x20`10^2.%`\x20indicates\x20a\x20metric\x20contains\x20a\x20ratio,\x20t\
    ypically\x20in\x20the\x20range\n\x20\x20\x20\x200..1,\x20that\x20will\
    \x20be\x20multiplied\x20by\x20100\x20and\x20displayed\x20as\x20a\x20perc\
    entage\n\x20\x20\x20\x20(so\x20a\x20metric\x20value\x20`0.03`\x20means\
    \x20\"3\x20percent\").\n\n\x0e\n\x05\x04\0\x02\x05\x04\x12\x05\xe4\x01\
    \x02|\x1b\n\r\n\x05\x04\0\x02\x05\x05\x12\x04\xe4\x01\x02\x08\n\r\n\x05\
    \x04\0\x02\x05\x01\x12\x04\xe4\x01\t\r\n\r\n\x05\x04\0\x02\x05\x03\x12\
    \x04\xe4\x01\x10\x11\nY\n\x04\x04\0\x02\x06\x12\x04\xe7\x01\x02\x19\x1aK\
    \x20A\x20detailed\x20description\x20of\x20the\x20metric,\x20which\x20can\
    \x20be\x20used\x20in\x20documentation.\n\n\x0f\n\x05\x04\0\x02\x06\x04\
    \x12\x06\xe7\x01\x02\xe4\x01\x12\n\r\n\x05\x04\0\x02\x06\x05\x12\x04\xe7\
    \x01\x02\x08\n\r\n\x05\x04\0\x02\x06\x01\x12\x04\xe7\x01\t\x14\n\r\n\x05\
    \x04\0\x02\x06\x03\x12\x04\xe7\x01\x17\x18\n\xa3\x02\n\x04\x04\0\x02\x07\
    \x12\x04\xed\x01\x02\x1a\x1a\x94\x02\x20A\x20concise\x20name\x20for\x20t\
    he\x20metric,\x20which\x20can\x20be\x20displayed\x20in\x20user\x20interf\
    aces.\n\x20Use\x20sentence\x20case\x20without\x20an\x20ending\x20period,\
    \x20for\x20example\x20\"Request\x20count\".\n\x20This\x20field\x20is\x20\
    optional\x20but\x20it\x20is\x20recommended\x20to\x20be\x20set\x20for\x20\
    any\x20metrics\n\x20associated\x20with\x20user-visible\x20concepts,\x20s\
    uch\x20as\x20Quota.\n\n\x0f\n\x05\x04\0\x02\x07\x04\x12\x06\xed\x01\x02\
    \xe7\x01\x19\n\r\n\x05\x04\0\x02\x07\x05\x12\x04\xed\x01\x02\x08\n\r\n\
    \x05\x04\0\x02\x07\x01\x12\x04\xed\x01\t\x15\n\r\n\x05\x04\0\x02\x07\x03\
    \x12\x04\xed\x01\x18\x19\nR\n\x04\x04\0\x02\x08\x12\x04\xf0\x01\x02)\x1a\
    D\x20Optional.\x20Metadata\x20which\x20can\x20be\x20used\x20to\x20guide\
    \x20usage\x20of\x20the\x20metric.\n\n\x0f\n\x05\x04\0\x02\x08\x04\x12\
    \x06\xf0\x01\x02\xed\x01\x1a\n\r\n\x05\x04\0\x02\x08\x06\x12\x04\xf0\x01\
    \x02\x1a\n\r\n\x05\x04\0\x02\x08\x01\x12\x04\xf0\x01\x1b#\n\r\n\x05\x04\
    \0\x02\x08\x03\x12\x04\xf0\x01&(\nD\n\x04\x04\0\x02\t\x12\x04\xf3\x01\
    \x02\x20\x1a6\x20Optional.\x20The\x20launch\x20stage\x20of\x20the\x20met\
    ric\x20definition.\n\n\x0f\n\x05\x04\0\x02\t\x04\x12\x06\xf3\x01\x02\xf0\
    \x01)\n\r\n\x05\x04\0\x02\t\x06\x12\x04\xf3\x01\x02\r\n\r\n\x05\x04\0\
    \x02\t\x01\x12\x04\xf3\x01\x0e\x1a\n\r\n\x05\x04\0\x02\t\x03\x12\x04\xf3\
    \x01\x1d\x1f\n\xd4\x02\n\x04\x04\0\x02\n\x12\x04\xfa\x01\x020\x1a\xc5\
    \x02\x20Read-only.\x20If\x20present,\x20then\x20a\x20[time\n\x20series][\
    google.monitoring.v3.TimeSeries],\x20which\x20is\x20identified\x20partia\
    lly\x20by\n\x20a\x20metric\x20type\x20and\x20a\x20[MonitoredResourceDesc\
    riptor][google.api.MonitoredResourceDescriptor],\x20that\x20is\x20associ\
    ated\n\x20with\x20this\x20metric\x20type\x20can\x20only\x20be\x20associa\
    ted\x20with\x20one\x20of\x20the\x20monitored\n\x20resource\x20types\x20l\
    isted\x20here.\n\n\r\n\x05\x04\0\x02\n\x04\x12\x04\xfa\x01\x02\n\n\r\n\
    \x05\x04\0\x02\n\x05\x12\x04\xfa\x01\x0b\x11\n\r\n\x05\x04\0\x02\n\x01\
    \x12\x04\xfa\x01\x12*\n\r\n\x05\x04\0\x02\n\x03\x12\x04\xfa\x01-/\n\x92\
    \x01\n\x02\x04\x01\x12\x06\xff\x01\0\x87\x02\x01\x1a\x83\x01\x20A\x20spe\
    cific\x20metric,\x20identified\x20by\x20specifying\x20values\x20for\x20a\
    ll\x20of\x20the\n\x20labels\x20of\x20a\x20[`MetricDescriptor`][google.ap\
    i.MetricDescriptor].\n\n\x0b\n\x03\x04\x01\x01\x12\x04\xff\x01\x08\x0e\n\
    \xa4\x01\n\x04\x04\x01\x02\0\x12\x04\x82\x02\x02\x12\x1a\x95\x01\x20An\
    \x20existing\x20metric\x20type,\x20see\x20[google.api.MetricDescriptor][\
    google.api.MetricDescriptor].\n\x20For\x20example,\x20`custom.googleapis\
    .com/invoice/paid/amount`.\n\n\x0f\n\x05\x04\x01\x02\0\x04\x12\x06\x82\
    \x02\x02\xff\x01\x10\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\x82\x02\x02\x08\
    \n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x82\x02\t\r\n\r\n\x05\x04\x01\x02\0\
    \x03\x12\x04\x82\x02\x10\x11\n\x92\x01\n\x04\x04\x01\x02\x01\x12\x04\x86\
    \x02\x02!\x1a\x83\x01\x20The\x20set\x20of\x20label\x20values\x20that\x20\
    uniquely\x20identify\x20this\x20metric.\x20All\n\x20labels\x20listed\x20\
    in\x20the\x20`MetricDescriptor`\x20must\x20be\x20assigned\x20values.\n\n\
    \x0f\n\x05\x04\x01\x02\x01\x04\x12\x06\x86\x02\x02\x82\x02\x12\n\r\n\x05\
    \x04\x01\x02\x01\x06\x12\x04\x86\x02\x02\x15\n\r\n\x05\x04\x01\x02\x01\
    \x01\x12\x04\x86\x02\x16\x1c\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\x86\
    \x02\x1f\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
