// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/iam/v1/policy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct Policy {
    // message fields
    pub version: i32,
    pub bindings: ::protobuf::RepeatedField<Binding>,
    pub etag: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Policy {
    fn default() -> &'a Policy {
        <Policy as ::protobuf::Message>::default_instance()
    }
}

impl Policy {
    pub fn new() -> Policy {
        ::std::default::Default::default()
    }

    // int32 version = 1;


    pub fn get_version(&self) -> i32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    // repeated .google.iam.v1.Binding bindings = 4;


    pub fn get_bindings(&self) -> &[Binding] {
        &self.bindings
    }
    pub fn clear_bindings(&mut self) {
        self.bindings.clear();
    }

    // Param is passed by value, moved
    pub fn set_bindings(&mut self, v: ::protobuf::RepeatedField<Binding>) {
        self.bindings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bindings(&mut self) -> &mut ::protobuf::RepeatedField<Binding> {
        &mut self.bindings
    }

    // Take field
    pub fn take_bindings(&mut self) -> ::protobuf::RepeatedField<Binding> {
        ::std::mem::replace(&mut self.bindings, ::protobuf::RepeatedField::new())
    }

    // bytes etag = 3;


    pub fn get_etag(&self) -> &[u8] {
        &self.etag
    }
    pub fn clear_etag(&mut self) {
        self.etag.clear();
    }

    // Param is passed by value, moved
    pub fn set_etag(&mut self, v: ::std::vec::Vec<u8>) {
        self.etag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_etag(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.etag
    }

    // Take field
    pub fn take_etag(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.etag, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Policy {
    fn is_initialized(&self) -> bool {
        for v in &self.bindings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.bindings)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.etag)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.bindings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.etag);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_int32(1, self.version)?;
        }
        for v in &self.bindings {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.etag.is_empty() {
            os.write_bytes(3, &self.etag)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Policy {
        Policy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "version",
                |m: &Policy| { &m.version },
                |m: &mut Policy| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Binding>>(
                "bindings",
                |m: &Policy| { &m.bindings },
                |m: &mut Policy| { &mut m.bindings },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "etag",
                |m: &Policy| { &m.etag },
                |m: &mut Policy| { &mut m.etag },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Policy>(
                "Policy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Policy {
        static instance: ::protobuf::rt::LazyV2<Policy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Policy::new)
    }
}

impl ::protobuf::Clear for Policy {
    fn clear(&mut self) {
        self.version = 0;
        self.bindings.clear();
        self.etag.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Policy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Policy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Binding {
    // message fields
    pub role: ::std::string::String,
    pub members: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Binding {
    fn default() -> &'a Binding {
        <Binding as ::protobuf::Message>::default_instance()
    }
}

impl Binding {
    pub fn new() -> Binding {
        ::std::default::Default::default()
    }

    // string role = 1;


    pub fn get_role(&self) -> &str {
        &self.role
    }
    pub fn clear_role(&mut self) {
        self.role.clear();
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: ::std::string::String) {
        self.role = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_role(&mut self) -> &mut ::std::string::String {
        &mut self.role
    }

    // Take field
    pub fn take_role(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.role, ::std::string::String::new())
    }

    // repeated string members = 2;


    pub fn get_members(&self) -> &[::std::string::String] {
        &self.members
    }
    pub fn clear_members(&mut self) {
        self.members.clear();
    }

    // Param is passed by value, moved
    pub fn set_members(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_members(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.members
    }

    // Take field
    pub fn take_members(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.members, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Binding {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.role)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.members)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.role.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.role);
        }
        for value in &self.members {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.role.is_empty() {
            os.write_string(1, &self.role)?;
        }
        for v in &self.members {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Binding {
        Binding::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "role",
                |m: &Binding| { &m.role },
                |m: &mut Binding| { &mut m.role },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "members",
                |m: &Binding| { &m.members },
                |m: &mut Binding| { &mut m.members },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Binding>(
                "Binding",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Binding {
        static instance: ::protobuf::rt::LazyV2<Binding> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Binding::new)
    }
}

impl ::protobuf::Clear for Binding {
    fn clear(&mut self) {
        self.role.clear();
        self.members.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Binding {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Binding {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PolicyDelta {
    // message fields
    pub binding_deltas: ::protobuf::RepeatedField<BindingDelta>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PolicyDelta {
    fn default() -> &'a PolicyDelta {
        <PolicyDelta as ::protobuf::Message>::default_instance()
    }
}

impl PolicyDelta {
    pub fn new() -> PolicyDelta {
        ::std::default::Default::default()
    }

    // repeated .google.iam.v1.BindingDelta binding_deltas = 1;


    pub fn get_binding_deltas(&self) -> &[BindingDelta] {
        &self.binding_deltas
    }
    pub fn clear_binding_deltas(&mut self) {
        self.binding_deltas.clear();
    }

    // Param is passed by value, moved
    pub fn set_binding_deltas(&mut self, v: ::protobuf::RepeatedField<BindingDelta>) {
        self.binding_deltas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_binding_deltas(&mut self) -> &mut ::protobuf::RepeatedField<BindingDelta> {
        &mut self.binding_deltas
    }

    // Take field
    pub fn take_binding_deltas(&mut self) -> ::protobuf::RepeatedField<BindingDelta> {
        ::std::mem::replace(&mut self.binding_deltas, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PolicyDelta {
    fn is_initialized(&self) -> bool {
        for v in &self.binding_deltas {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.binding_deltas)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.binding_deltas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.binding_deltas {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PolicyDelta {
        PolicyDelta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BindingDelta>>(
                "binding_deltas",
                |m: &PolicyDelta| { &m.binding_deltas },
                |m: &mut PolicyDelta| { &mut m.binding_deltas },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PolicyDelta>(
                "PolicyDelta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PolicyDelta {
        static instance: ::protobuf::rt::LazyV2<PolicyDelta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PolicyDelta::new)
    }
}

impl ::protobuf::Clear for PolicyDelta {
    fn clear(&mut self) {
        self.binding_deltas.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PolicyDelta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PolicyDelta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BindingDelta {
    // message fields
    pub action: BindingDelta_Action,
    pub role: ::std::string::String,
    pub member: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BindingDelta {
    fn default() -> &'a BindingDelta {
        <BindingDelta as ::protobuf::Message>::default_instance()
    }
}

impl BindingDelta {
    pub fn new() -> BindingDelta {
        ::std::default::Default::default()
    }

    // .google.iam.v1.BindingDelta.Action action = 1;


    pub fn get_action(&self) -> BindingDelta_Action {
        self.action
    }
    pub fn clear_action(&mut self) {
        self.action = BindingDelta_Action::ACTION_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: BindingDelta_Action) {
        self.action = v;
    }

    // string role = 2;


    pub fn get_role(&self) -> &str {
        &self.role
    }
    pub fn clear_role(&mut self) {
        self.role.clear();
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: ::std::string::String) {
        self.role = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_role(&mut self) -> &mut ::std::string::String {
        &mut self.role
    }

    // Take field
    pub fn take_role(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.role, ::std::string::String::new())
    }

    // string member = 3;


    pub fn get_member(&self) -> &str {
        &self.member
    }
    pub fn clear_member(&mut self) {
        self.member.clear();
    }

    // Param is passed by value, moved
    pub fn set_member(&mut self, v: ::std::string::String) {
        self.member = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_member(&mut self) -> &mut ::std::string::String {
        &mut self.member
    }

    // Take field
    pub fn take_member(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.member, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BindingDelta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.role)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.member)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.action != BindingDelta_Action::ACTION_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.action);
        }
        if !self.role.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.role);
        }
        if !self.member.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.member);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.action != BindingDelta_Action::ACTION_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.action))?;
        }
        if !self.role.is_empty() {
            os.write_string(2, &self.role)?;
        }
        if !self.member.is_empty() {
            os.write_string(3, &self.member)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BindingDelta {
        BindingDelta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BindingDelta_Action>>(
                "action",
                |m: &BindingDelta| { &m.action },
                |m: &mut BindingDelta| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "role",
                |m: &BindingDelta| { &m.role },
                |m: &mut BindingDelta| { &mut m.role },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "member",
                |m: &BindingDelta| { &m.member },
                |m: &mut BindingDelta| { &mut m.member },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BindingDelta>(
                "BindingDelta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BindingDelta {
        static instance: ::protobuf::rt::LazyV2<BindingDelta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BindingDelta::new)
    }
}

impl ::protobuf::Clear for BindingDelta {
    fn clear(&mut self) {
        self.action = BindingDelta_Action::ACTION_UNSPECIFIED;
        self.role.clear();
        self.member.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BindingDelta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BindingDelta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BindingDelta_Action {
    ACTION_UNSPECIFIED = 0,
    ADD = 1,
    REMOVE = 2,
}

impl ::protobuf::ProtobufEnum for BindingDelta_Action {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BindingDelta_Action> {
        match value {
            0 => ::std::option::Option::Some(BindingDelta_Action::ACTION_UNSPECIFIED),
            1 => ::std::option::Option::Some(BindingDelta_Action::ADD),
            2 => ::std::option::Option::Some(BindingDelta_Action::REMOVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BindingDelta_Action] = &[
            BindingDelta_Action::ACTION_UNSPECIFIED,
            BindingDelta_Action::ADD,
            BindingDelta_Action::REMOVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BindingDelta_Action>("BindingDelta.Action", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BindingDelta_Action {
}

impl ::std::default::Default for BindingDelta_Action {
    fn default() -> Self {
        BindingDelta_Action::ACTION_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for BindingDelta_Action {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1agoogle/iam/v1/policy.proto\x12\rgoogle.iam.v1\x1a\x1cgoogle/api/an\
    notations.proto\"j\n\x06Policy\x12\x18\n\x07version\x18\x01\x20\x01(\x05\
    R\x07version\x122\n\x08bindings\x18\x04\x20\x03(\x0b2\x16.google.iam.v1.\
    BindingR\x08bindings\x12\x12\n\x04etag\x18\x03\x20\x01(\x0cR\x04etag\"7\
    \n\x07Binding\x12\x12\n\x04role\x18\x01\x20\x01(\tR\x04role\x12\x18\n\
    \x07members\x18\x02\x20\x03(\tR\x07members\"Q\n\x0bPolicyDelta\x12B\n\
    \x0ebinding_deltas\x18\x01\x20\x03(\x0b2\x1b.google.iam.v1.BindingDeltaR\
    \rbindingDeltas\"\xad\x01\n\x0cBindingDelta\x12:\n\x06action\x18\x01\x20\
    \x01(\x0e2\".google.iam.v1.BindingDelta.ActionR\x06action\x12\x12\n\x04r\
    ole\x18\x02\x20\x01(\tR\x04role\x12\x16\n\x06member\x18\x03\x20\x01(\tR\
    \x06member\"5\n\x06Action\x12\x16\n\x12ACTION_UNSPECIFIED\x10\0\x12\x07\
    \n\x03ADD\x10\x01\x12\n\n\x06REMOVE\x10\x02B\x83\x01\n\x11com.google.iam\
    .v1B\x0bPolicyProtoP\x01Z0google.golang.org/genproto/googleapis/iam/v1;i\
    am\xf8\x01\x01\xaa\x02\x13Google.Cloud.Iam.V1\xca\x02\x13Google\\Cloud\\\
    Iam\\V1J\xb5(\n\x07\x12\x05\x0e\0\x95\x01\x01\n\xbd\x04\n\x01\x0c\x12\
    \x03\x0e\0\x122\xb2\x04\x20Copyright\x202016\x20Google\x20Inc.\n\n\x20Li\
    censed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\x08\n\x01\x02\x12\x03\x10\0\x16\n\t\n\x02\x03\0\x12\x03\x12\0&\n\
    \x08\n\x01\x08\x12\x03\x14\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x14\0\x1f\n\
    \x08\n\x01\x08\x12\x03\x15\00\n\t\n\x02\x08%\x12\x03\x15\00\n\x08\n\x01\
    \x08\x12\x03\x16\0G\n\t\n\x02\x08\x0b\x12\x03\x16\0G\n\x08\n\x01\x08\x12\
    \x03\x17\0\"\n\t\n\x02\x08\n\x12\x03\x17\0\"\n\x08\n\x01\x08\x12\x03\x18\
    \0,\n\t\n\x02\x08\x08\x12\x03\x18\0,\n\x08\n\x01\x08\x12\x03\x19\0*\n\t\
    \n\x02\x08\x01\x12\x03\x19\0*\n\x08\n\x01\x08\x12\x03\x1a\00\n\t\n\x02\
    \x08)\x12\x03\x1a\00\n\xb6\x07\n\x02\x04\0\x12\x04<\0P\x01\x1a\xa9\x07\
    \x20Defines\x20an\x20Identity\x20and\x20Access\x20Management\x20(IAM)\
    \x20policy.\x20It\x20is\x20used\x20to\n\x20specify\x20access\x20control\
    \x20policies\x20for\x20Cloud\x20Platform\x20resources.\n\n\n\x20A\x20`Po\
    licy`\x20consists\x20of\x20a\x20list\x20of\x20`bindings`.\x20A\x20`Bindi\
    ng`\x20binds\x20a\x20list\x20of\n\x20`members`\x20to\x20a\x20`role`,\x20\
    where\x20the\x20members\x20can\x20be\x20user\x20accounts,\x20Google\x20g\
    roups,\n\x20Google\x20domains,\x20and\x20service\x20accounts.\x20A\x20`r\
    ole`\x20is\x20a\x20named\x20list\x20of\x20permissions\n\x20defined\x20by\
    \x20IAM.\n\n\x20**Example**\n\n\x20\x20\x20\x20\x20{\n\x20\x20\x20\x20\
    \x20\x20\x20\"bindings\":\x20[\n\x20\x20\x20\x20\x20\x20\x20\x20\x20{\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"role\":\x20\"roles/owner\"\
    ,\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"members\":\x20[\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"user:mike@example.com\
    \",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"group:admins@\
    example.com\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\"do\
    main:google.com\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \"serviceAccount:my-other-app@appspot.gserviceaccount.com\",\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20]\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20},\n\x20\x20\x20\x20\x20\x20\x20\x20\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\"role\":\x20\"roles/viewer\",\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\"members\":\x20[\"user:sean@example.com\"]\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20\x20\x20]\n\
    \x20\x20\x20\x20\x20}\n\n\x20For\x20a\x20description\x20of\x20IAM\x20and\
    \x20its\x20features,\x20see\x20the\n\x20[IAM\x20developer's\x20guide](ht\
    tps://cloud.google.com/iam).\n\n\n\n\x03\x04\0\x01\x12\x03<\x08\x0e\nA\n\
    \x04\x04\0\x02\0\x12\x03>\x02\x14\x1a4\x20Version\x20of\x20the\x20`Polic\
    y`.\x20The\x20default\x20version\x20is\x200.\n\n\r\n\x05\x04\0\x02\0\x04\
    \x12\x04>\x02<\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03>\x02\x07\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03>\x08\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03>\x12\x13\n\xb0\x01\n\x04\x04\0\x02\x01\x12\x03C\x02\x20\x1a\xa2\x01\
    \x20Associates\x20a\x20list\x20of\x20`members`\x20to\x20a\x20`role`.\n\
    \x20Multiple\x20`bindings`\x20must\x20not\x20be\x20specified\x20for\x20t\
    he\x20same\x20`role`.\n\x20`bindings`\x20with\x20no\x20members\x20will\
    \x20result\x20in\x20an\x20error.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    C\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03C\x0b\x12\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03C\x13\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03C\x1e\
    \x1f\n\xf6\x04\n\x04\x04\0\x02\x02\x12\x03O\x02\x11\x1a\xe8\x04\x20`etag\
    `\x20is\x20used\x20for\x20optimistic\x20concurrency\x20control\x20as\x20\
    a\x20way\x20to\x20help\n\x20prevent\x20simultaneous\x20updates\x20of\x20\
    a\x20policy\x20from\x20overwriting\x20each\x20other.\n\x20It\x20is\x20st\
    rongly\x20suggested\x20that\x20systems\x20make\x20use\x20of\x20the\x20`e\
    tag`\x20in\x20the\n\x20read-modify-write\x20cycle\x20to\x20perform\x20po\
    licy\x20updates\x20in\x20order\x20to\x20avoid\x20race\n\x20conditions:\
    \x20An\x20`etag`\x20is\x20returned\x20in\x20the\x20response\x20to\x20`ge\
    tIamPolicy`,\x20and\n\x20systems\x20are\x20expected\x20to\x20put\x20that\
    \x20etag\x20in\x20the\x20request\x20to\x20`setIamPolicy`\x20to\n\x20ensu\
    re\x20that\x20their\x20change\x20will\x20be\x20applied\x20to\x20the\x20s\
    ame\x20version\x20of\x20the\x20policy.\n\n\x20If\x20no\x20`etag`\x20is\
    \x20provided\x20in\x20the\x20call\x20to\x20`setIamPolicy`,\x20then\x20th\
    e\x20existing\n\x20policy\x20is\x20overwritten\x20blindly.\n\n\r\n\x05\
    \x04\0\x02\x02\x04\x12\x04O\x02C\x20\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03O\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03O\x08\x0c\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03O\x0f\x10\n1\n\x02\x04\x01\x12\x04S\0q\x01\x1a\
    %\x20Associates\x20`members`\x20with\x20a\x20`role`.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03S\x08\x0f\n|\n\x04\x04\x01\x02\0\x12\x03W\x02\x12\x1ao\x20Ro\
    le\x20that\x20is\x20assigned\x20to\x20`members`.\n\x20For\x20example,\
    \x20`roles/viewer`,\x20`roles/editor`,\x20or\x20`roles/owner`.\n\x20Requ\
    ired\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04W\x02S\x11\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03W\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03W\t\r\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03W\x10\x11\n\xa8\x07\n\x04\x04\x01\
    \x02\x01\x12\x03p\x02\x1e\x1a\x9a\x07\x20Specifies\x20the\x20identities\
    \x20requesting\x20access\x20for\x20a\x20Cloud\x20Platform\x20resource.\n\
    \x20`members`\x20can\x20have\x20the\x20following\x20values:\n\n\x20*\x20\
    `allUsers`:\x20A\x20special\x20identifier\x20that\x20represents\x20anyon\
    e\x20who\x20is\n\x20\x20\x20\x20on\x20the\x20internet;\x20with\x20or\x20\
    without\x20a\x20Google\x20account.\n\n\x20*\x20`allAuthenticatedUsers`:\
    \x20A\x20special\x20identifier\x20that\x20represents\x20anyone\n\x20\x20\
    \x20\x20who\x20is\x20authenticated\x20with\x20a\x20Google\x20account\x20\
    or\x20a\x20service\x20account.\n\n\x20*\x20`user:{emailid}`:\x20An\x20em\
    ail\x20address\x20that\x20represents\x20a\x20specific\x20Google\n\x20\
    \x20\x20\x20account.\x20For\x20example,\x20`alice@gmail.com`\x20or\x20`j\
    oe@example.com`.\n\n\n\x20*\x20`serviceAccount:{emailid}`:\x20An\x20emai\
    l\x20address\x20that\x20represents\x20a\x20service\n\x20\x20\x20\x20acco\
    unt.\x20For\x20example,\x20`my-other-app@appspot.gserviceaccount.com`.\n\
    \n\x20*\x20`group:{emailid}`:\x20An\x20email\x20address\x20that\x20repre\
    sents\x20a\x20Google\x20group.\n\x20\x20\x20\x20For\x20example,\x20`admi\
    ns@example.com`.\n\n\x20*\x20`domain:{domain}`:\x20A\x20Google\x20Apps\
    \x20domain\x20name\x20that\x20represents\x20all\x20the\n\x20\x20\x20\x20\
    users\x20of\x20that\x20domain.\x20For\x20example,\x20`google.com`\x20or\
    \x20`example.com`.\n\n\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03p\x02\n\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03p\x0b\x11\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03p\x12\x19\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03p\
    \x1c\x1d\n8\n\x02\x04\x02\x12\x04t\0w\x01\x1a,\x20The\x20difference\x20d\
    elta\x20between\x20two\x20policies.\n\n\n\n\x03\x04\x02\x01\x12\x03t\x08\
    \x13\n;\n\x04\x04\x02\x02\0\x12\x03v\x02+\x1a.\x20The\x20delta\x20for\
    \x20Bindings\x20between\x20two\x20policies.\n\n\x0c\n\x05\x04\x02\x02\0\
    \x04\x12\x03v\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03v\x0b\x17\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03v\x18&\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03v)*\n\x8a\x01\n\x02\x04\x03\x12\x05{\0\x95\x01\x01\x1a}\x20One\x20de\
    lta\x20entry\x20for\x20Binding.\x20Each\x20individual\x20change\x20(only\
    \x20one\x20member\x20in\x20each\n\x20entry)\x20to\x20a\x20binding\x20wil\
    l\x20be\x20a\x20separate\x20entry.\n\n\n\n\x03\x04\x03\x01\x12\x03{\x08\
    \x14\nG\n\x04\x04\x03\x04\0\x12\x05}\x02\x86\x01\x03\x1a8\x20The\x20type\
    \x20of\x20action\x20performed\x20on\x20a\x20Binding\x20in\x20a\x20policy\
    .\n\n\x0c\n\x05\x04\x03\x04\0\x01\x12\x03}\x07\r\n\x1d\n\x06\x04\x03\x04\
    \0\x02\0\x12\x03\x7f\x04\x1b\x1a\x0e\x20Unspecified.\n\n\x0e\n\x07\x04\
    \x03\x04\0\x02\0\x01\x12\x03\x7f\x04\x16\n\x0e\n\x07\x04\x03\x04\0\x02\0\
    \x02\x12\x03\x7f\x19\x1a\n(\n\x06\x04\x03\x04\0\x02\x01\x12\x04\x82\x01\
    \x04\x0c\x1a\x18\x20Addition\x20of\x20a\x20Binding.\n\n\x0f\n\x07\x04\
    \x03\x04\0\x02\x01\x01\x12\x04\x82\x01\x04\x07\n\x0f\n\x07\x04\x03\x04\0\
    \x02\x01\x02\x12\x04\x82\x01\n\x0b\n'\n\x06\x04\x03\x04\0\x02\x02\x12\
    \x04\x85\x01\x04\x0f\x1a\x17\x20Removal\x20of\x20a\x20Binding.\n\n\x0f\n\
    \x07\x04\x03\x04\0\x02\x02\x01\x12\x04\x85\x01\x04\n\n\x0f\n\x07\x04\x03\
    \x04\0\x02\x02\x02\x12\x04\x85\x01\r\x0e\nE\n\x04\x04\x03\x02\0\x12\x04\
    \x8a\x01\x02\x14\x1a7\x20The\x20action\x20that\x20was\x20performed\x20on\
    \x20a\x20Binding.\n\x20Required\n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\
    \x8a\x01\x02\x86\x01\x03\n\r\n\x05\x04\x03\x02\0\x06\x12\x04\x8a\x01\x02\
    \x08\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x8a\x01\t\x0f\n\r\n\x05\x04\x03\
    \x02\0\x03\x12\x04\x8a\x01\x12\x13\n}\n\x04\x04\x03\x02\x01\x12\x04\x8f\
    \x01\x02\x12\x1ao\x20Role\x20that\x20is\x20assigned\x20to\x20`members`.\
    \n\x20For\x20example,\x20`roles/viewer`,\x20`roles/editor`,\x20or\x20`ro\
    les/owner`.\n\x20Required\n\n\x0f\n\x05\x04\x03\x02\x01\x04\x12\x06\x8f\
    \x01\x02\x8a\x01\x14\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\x8f\x01\x02\
    \x08\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x8f\x01\t\r\n\r\n\x05\x04\x03\
    \x02\x01\x03\x12\x04\x8f\x01\x10\x11\n\x89\x01\n\x04\x04\x03\x02\x02\x12\
    \x04\x94\x01\x02\x14\x1a{\x20A\x20single\x20identity\x20requesting\x20ac\
    cess\x20for\x20a\x20Cloud\x20Platform\x20resource.\n\x20Follows\x20the\
    \x20same\x20format\x20of\x20Binding.members.\n\x20Required\n\n\x0f\n\x05\
    \x04\x03\x02\x02\x04\x12\x06\x94\x01\x02\x8f\x01\x12\n\r\n\x05\x04\x03\
    \x02\x02\x05\x12\x04\x94\x01\x02\x08\n\r\n\x05\x04\x03\x02\x02\x01\x12\
    \x04\x94\x01\t\x0f\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\x94\x01\x12\x13\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
