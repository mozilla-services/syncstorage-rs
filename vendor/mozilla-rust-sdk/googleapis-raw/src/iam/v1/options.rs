// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/iam/v1/options.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct GetPolicyOptions {
    // message fields
    pub requested_policy_version: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetPolicyOptions {
    fn default() -> &'a GetPolicyOptions {
        <GetPolicyOptions as ::protobuf::Message>::default_instance()
    }
}

impl GetPolicyOptions {
    pub fn new() -> GetPolicyOptions {
        ::std::default::Default::default()
    }

    // int32 requested_policy_version = 1;


    pub fn get_requested_policy_version(&self) -> i32 {
        self.requested_policy_version
    }
    pub fn clear_requested_policy_version(&mut self) {
        self.requested_policy_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_requested_policy_version(&mut self, v: i32) {
        self.requested_policy_version = v;
    }
}

impl ::protobuf::Message for GetPolicyOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.requested_policy_version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.requested_policy_version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.requested_policy_version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.requested_policy_version != 0 {
            os.write_int32(1, self.requested_policy_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPolicyOptions {
        GetPolicyOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "requested_policy_version",
                |m: &GetPolicyOptions| { &m.requested_policy_version },
                |m: &mut GetPolicyOptions| { &mut m.requested_policy_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetPolicyOptions>(
                "GetPolicyOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetPolicyOptions {
        static instance: ::protobuf::rt::LazyV2<GetPolicyOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetPolicyOptions::new)
    }
}

impl ::protobuf::Clear for GetPolicyOptions {
    fn clear(&mut self) {
        self.requested_policy_version = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPolicyOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPolicyOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bgoogle/iam/v1/options.proto\x12\rgoogle.iam.v1\x1a\x1cgoogle/api/a\
    nnotations.proto\"L\n\x10GetPolicyOptions\x128\n\x18requested_policy_ver\
    sion\x18\x01\x20\x01(\x05R\x16requestedPolicyVersionB\x84\x01\n\x11com.g\
    oogle.iam.v1B\x0cOptionsProtoP\x01Z0google.golang.org/genproto/googleapi\
    s/iam/v1;iam\xf8\x01\x01\xaa\x02\x13Google.Cloud.Iam.V1\xca\x02\x13Googl\
    e\\Cloud\\Iam\\V1J\xc3\t\n\x06\x12\x04\x0f\0(\x01\n\xbe\x04\n\x01\x0c\
    \x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x16\n\t\n\x02\x03\0\x12\x03\x13\0\
    &\n\x08\n\x01\x08\x12\x03\x15\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x15\0\x1f\
    \n\x08\n\x01\x08\x12\x03\x16\00\n\t\n\x02\x08%\x12\x03\x16\00\n\x08\n\
    \x01\x08\x12\x03\x17\0G\n\t\n\x02\x08\x0b\x12\x03\x17\0G\n\x08\n\x01\x08\
    \x12\x03\x18\0\"\n\t\n\x02\x08\n\x12\x03\x18\0\"\n\x08\n\x01\x08\x12\x03\
    \x19\0-\n\t\n\x02\x08\x08\x12\x03\x19\0-\n\x08\n\x01\x08\x12\x03\x1a\0*\
    \n\t\n\x02\x08\x01\x12\x03\x1a\0*\n\x08\n\x01\x08\x12\x03\x1b\00\n\t\n\
    \x02\x08)\x12\x03\x1b\00\n=\n\x02\x04\0\x12\x04\x1e\0(\x01\x1a1\x20Encap\
    sulates\x20settings\x20provided\x20to\x20GetIamPolicy.\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x1e\x08\x18\n\xcb\x02\n\x04\x04\0\x02\0\x12\x03'\x02%\x1a\
    \xbd\x02\x20Optional.\x20The\x20policy\x20format\x20version\x20to\x20be\
    \x20returned.\n\n\x20Valid\x20values\x20are\x200,\x201,\x20and\x203.\x20\
    Requests\x20specifying\x20an\x20invalid\x20value\x20will\x20be\n\x20reje\
    cted.\n\n\x20Requests\x20for\x20policies\x20with\x20any\x20conditional\
    \x20bindings\x20must\x20specify\x20version\x203.\n\x20Policies\x20withou\
    t\x20any\x20conditional\x20bindings\x20may\x20specify\x20any\x20valid\
    \x20value\x20or\n\x20leave\x20the\x20field\x20unset.\n\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04'\x02\x1e\x1a\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03'\x02\
    \x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03'\x08\x20\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03'#$b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
