// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/bigtable/admin/v2/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct OperationProgress {
    // message fields
    pub progress_percent: i32,
    pub start_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OperationProgress {
    fn default() -> &'a OperationProgress {
        <OperationProgress as ::protobuf::Message>::default_instance()
    }
}

impl OperationProgress {
    pub fn new() -> OperationProgress {
        ::std::default::Default::default()
    }

    // int32 progress_percent = 1;


    pub fn get_progress_percent(&self) -> i32 {
        self.progress_percent
    }
    pub fn clear_progress_percent(&mut self) {
        self.progress_percent = 0;
    }

    // Param is passed by value, moved
    pub fn set_progress_percent(&mut self, v: i32) {
        self.progress_percent = v;
    }

    // .google.protobuf.Timestamp start_time = 2;


    pub fn get_start_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end_time = 3;


    pub fn get_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end_time(&mut self) {
        self.end_time.clear();
    }

    pub fn has_end_time(&self) -> bool {
        self.end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_time.is_none() {
            self.end_time.set_default();
        }
        self.end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for OperationProgress {
    fn is_initialized(&self) -> bool {
        for v in &self.start_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.progress_percent = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.progress_percent != 0 {
            my_size += ::protobuf::rt::value_size(1, self.progress_percent, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.progress_percent != 0 {
            os.write_int32(1, self.progress_percent)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OperationProgress {
        OperationProgress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "progress_percent",
                |m: &OperationProgress| { &m.progress_percent },
                |m: &mut OperationProgress| { &mut m.progress_percent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start_time",
                |m: &OperationProgress| { &m.start_time },
                |m: &mut OperationProgress| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "end_time",
                |m: &OperationProgress| { &m.end_time },
                |m: &mut OperationProgress| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OperationProgress>(
                "OperationProgress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OperationProgress {
        static instance: ::protobuf::rt::LazyV2<OperationProgress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OperationProgress::new)
    }
}

impl ::protobuf::Clear for OperationProgress {
    fn clear(&mut self) {
        self.progress_percent = 0;
        self.start_time.clear();
        self.end_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OperationProgress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OperationProgress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum StorageType {
    STORAGE_TYPE_UNSPECIFIED = 0,
    SSD = 1,
    HDD = 2,
}

impl ::protobuf::ProtobufEnum for StorageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StorageType> {
        match value {
            0 => ::std::option::Option::Some(StorageType::STORAGE_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(StorageType::SSD),
            2 => ::std::option::Option::Some(StorageType::HDD),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [StorageType] = &[
            StorageType::STORAGE_TYPE_UNSPECIFIED,
            StorageType::SSD,
            StorageType::HDD,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<StorageType>("StorageType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for StorageType {
}

impl ::std::default::Default for StorageType {
    fn default() -> Self {
        StorageType::STORAGE_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%google/bigtable/admin/v2/common.proto\x12\x18google.bigtable.admin.v2\
    \x1a\x1fgoogle/protobuf/timestamp.proto\"\xb0\x01\n\x11OperationProgress\
    \x12)\n\x10progress_percent\x18\x01\x20\x01(\x05R\x0fprogressPercent\x12\
    9\n\nstart_time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tst\
    artTime\x125\n\x08end_time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.Tim\
    estampR\x07endTime*=\n\x0bStorageType\x12\x1c\n\x18STORAGE_TYPE_UNSPECIF\
    IED\x10\0\x12\x07\n\x03SSD\x10\x01\x12\x07\n\x03HDD\x10\x02B\xd3\x01\n\
    \x1ccom.google.bigtable.admin.v2B\x0bCommonProtoP\x01Z=google.golang.org\
    /genproto/googleapis/bigtable/admin/v2;admin\xaa\x02\x1eGoogle.Cloud.Big\
    table.Admin.V2\xca\x02\x1eGoogle\\Cloud\\Bigtable\\Admin\\V2\xea\x02\"Go\
    ogle::Cloud::Bigtable::Admin::V2J\xc5\x0c\n\x06\x12\x04\x0e\05\x01\n\xbc\
    \x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202020\x20Google\
    \x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\
    \x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\
    \x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\
    \x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20w\
    riting,\x20software\n\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WA\
    RRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\
    \x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0!\n\t\n\x02\x03\0\
    \x12\x03\x12\0)\n\x08\n\x01\x08\x12\x03\x14\0;\n\t\n\x02\x08%\x12\x03\
    \x14\0;\n\x08\n\x01\x08\x12\x03\x15\0T\n\t\n\x02\x08\x0b\x12\x03\x15\0T\
    \n\x08\n\x01\x08\x12\x03\x16\0\"\n\t\n\x02\x08\n\x12\x03\x16\0\"\n\x08\n\
    \x01\x08\x12\x03\x17\0,\n\t\n\x02\x08\x08\x12\x03\x17\0,\n\x08\n\x01\x08\
    \x12\x03\x18\05\n\t\n\x02\x08\x01\x12\x03\x18\05\n\x08\n\x01\x08\x12\x03\
    \x19\0<\n\t\n\x02\x08)\x12\x03\x19\0<\n\x08\n\x01\x08\x12\x03\x1a\0;\n\t\
    \n\x02\x08-\x12\x03\x1a\0;\n?\n\x02\x05\0\x12\x04\x1d\0&\x01\x1a3\x20Sto\
    rage\x20media\x20types\x20for\x20persisting\x20Bigtable\x20data.\n\n\n\n\
    \x03\x05\0\x01\x12\x03\x1d\x05\x10\n7\n\x04\x05\0\x02\0\x12\x03\x1f\x02\
    \x1f\x1a*\x20The\x20user\x20did\x20not\x20specify\x20a\x20storage\x20typ\
    e.\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x1f\x02\x1a\n\x0c\n\x05\x05\0\
    \x02\0\x02\x12\x03\x1f\x1d\x1e\n2\n\x04\x05\0\x02\x01\x12\x03\"\x02\n\
    \x1a%\x20Flash\x20(SSD)\x20storage\x20should\x20be\x20used.\n\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\"\x02\x05\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\"\x08\t\n;\n\x04\x05\0\x02\x02\x12\x03%\x02\n\x1a.\x20Magnetic\
    \x20drive\x20(HDD)\x20storage\x20should\x20be\x20used.\n\n\x0c\n\x05\x05\
    \0\x02\x02\x01\x12\x03%\x02\x05\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03%\
    \x08\t\ne\n\x02\x04\0\x12\x04*\05\x01\x1aY\x20Encapsulates\x20progress\
    \x20related\x20information\x20for\x20a\x20Cloud\x20Bigtable\x20long\n\
    \x20running\x20operation.\n\n\n\n\x03\x04\0\x01\x12\x03*\x08\x19\n\\\n\
    \x04\x04\0\x02\0\x12\x03-\x02\x1d\x1aO\x20Percent\x20completion\x20of\
    \x20the\x20operation.\n\x20Values\x20are\x20between\x200\x20and\x20100\
    \x20inclusive.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04-\x02*\x1b\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03-\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03-\
    \x08\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03-\x1b\x1c\n-\n\x04\x04\0\x02\
    \x01\x12\x030\x02+\x1a\x20\x20Time\x20the\x20request\x20was\x20received.\
    \n\n\r\n\x05\x04\0\x02\x01\x04\x12\x040\x02-\x1d\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x030\x02\x1b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x030\x1c&\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x030)*\n^\n\x04\x04\0\x02\x02\x12\x034\
    \x02)\x1aQ\x20If\x20set,\x20the\x20time\x20at\x20which\x20this\x20operat\
    ion\x20failed\x20or\x20was\x20completed\n\x20successfully.\n\n\r\n\x05\
    \x04\0\x02\x02\x04\x12\x044\x020+\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x034\
    \x02\x1b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x034\x1c$\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x034'(b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
