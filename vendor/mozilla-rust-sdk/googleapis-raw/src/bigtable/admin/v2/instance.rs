// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/bigtable/admin/v2/instance.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct Instance {
    // message fields
    pub name: ::std::string::String,
    pub display_name: ::std::string::String,
    pub state: Instance_State,
    pub field_type: Instance_Type,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Instance {
    fn default() -> &'a Instance {
        <Instance as ::protobuf::Message>::default_instance()
    }
}

impl Instance {
    pub fn new() -> Instance {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string display_name = 2;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // .google.bigtable.admin.v2.Instance.State state = 3;


    pub fn get_state(&self) -> Instance_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = Instance_State::STATE_NOT_KNOWN;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: Instance_State) {
        self.state = v;
    }

    // .google.bigtable.admin.v2.Instance.Type type = 4;


    pub fn get_field_type(&self) -> Instance_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Instance_Type::TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Instance_Type) {
        self.field_type = v;
    }

    // repeated .google.bigtable.admin.v2.Instance.LabelsEntry labels = 5;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Instance {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        if self.state != Instance_State::STATE_NOT_KNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.state);
        }
        if self.field_type != Instance_Type::TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.field_type);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.labels);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        if self.state != Instance_State::STATE_NOT_KNOWN {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if self.field_type != Instance_Type::TYPE_UNSPECIFIED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.labels, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Instance {
        Instance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Instance| { &m.name },
                |m: &mut Instance| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &Instance| { &m.display_name },
                |m: &mut Instance| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Instance_State>>(
                "state",
                |m: &Instance| { &m.state },
                |m: &mut Instance| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Instance_Type>>(
                "type",
                |m: &Instance| { &m.field_type },
                |m: &mut Instance| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &Instance| { &m.labels },
                |m: &mut Instance| { &mut m.labels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Instance>(
                "Instance",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Instance {
        static instance: ::protobuf::rt::LazyV2<Instance> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Instance::new)
    }
}

impl ::protobuf::Clear for Instance {
    fn clear(&mut self) {
        self.name.clear();
        self.display_name.clear();
        self.state = Instance_State::STATE_NOT_KNOWN;
        self.field_type = Instance_Type::TYPE_UNSPECIFIED;
        self.labels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Instance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Instance_State {
    STATE_NOT_KNOWN = 0,
    READY = 1,
    CREATING = 2,
}

impl ::protobuf::ProtobufEnum for Instance_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Instance_State> {
        match value {
            0 => ::std::option::Option::Some(Instance_State::STATE_NOT_KNOWN),
            1 => ::std::option::Option::Some(Instance_State::READY),
            2 => ::std::option::Option::Some(Instance_State::CREATING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Instance_State] = &[
            Instance_State::STATE_NOT_KNOWN,
            Instance_State::READY,
            Instance_State::CREATING,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Instance_State>("Instance.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Instance_State {
}

impl ::std::default::Default for Instance_State {
    fn default() -> Self {
        Instance_State::STATE_NOT_KNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Instance_Type {
    TYPE_UNSPECIFIED = 0,
    PRODUCTION = 1,
    DEVELOPMENT = 2,
}

impl ::protobuf::ProtobufEnum for Instance_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Instance_Type> {
        match value {
            0 => ::std::option::Option::Some(Instance_Type::TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Instance_Type::PRODUCTION),
            2 => ::std::option::Option::Some(Instance_Type::DEVELOPMENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Instance_Type] = &[
            Instance_Type::TYPE_UNSPECIFIED,
            Instance_Type::PRODUCTION,
            Instance_Type::DEVELOPMENT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Instance_Type>("Instance.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Instance_Type {
}

impl ::std::default::Default for Instance_Type {
    fn default() -> Self {
        Instance_Type::TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Instance_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster {
    // message fields
    pub name: ::std::string::String,
    pub location: ::std::string::String,
    pub state: Cluster_State,
    pub serve_nodes: i32,
    pub default_storage_type: super::common::StorageType,
    pub encryption_config: ::protobuf::SingularPtrField<Cluster_EncryptionConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster {
    fn default() -> &'a Cluster {
        <Cluster as ::protobuf::Message>::default_instance()
    }
}

impl Cluster {
    pub fn new() -> Cluster {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string location = 2;


    pub fn get_location(&self) -> &str {
        &self.location
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        &mut self.location
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.location, ::std::string::String::new())
    }

    // .google.bigtable.admin.v2.Cluster.State state = 3;


    pub fn get_state(&self) -> Cluster_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = Cluster_State::STATE_NOT_KNOWN;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: Cluster_State) {
        self.state = v;
    }

    // int32 serve_nodes = 4;


    pub fn get_serve_nodes(&self) -> i32 {
        self.serve_nodes
    }
    pub fn clear_serve_nodes(&mut self) {
        self.serve_nodes = 0;
    }

    // Param is passed by value, moved
    pub fn set_serve_nodes(&mut self, v: i32) {
        self.serve_nodes = v;
    }

    // .google.bigtable.admin.v2.StorageType default_storage_type = 5;


    pub fn get_default_storage_type(&self) -> super::common::StorageType {
        self.default_storage_type
    }
    pub fn clear_default_storage_type(&mut self) {
        self.default_storage_type = super::common::StorageType::STORAGE_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_default_storage_type(&mut self, v: super::common::StorageType) {
        self.default_storage_type = v;
    }

    // .google.bigtable.admin.v2.Cluster.EncryptionConfig encryption_config = 6;


    pub fn get_encryption_config(&self) -> &Cluster_EncryptionConfig {
        self.encryption_config.as_ref().unwrap_or_else(|| <Cluster_EncryptionConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_encryption_config(&mut self) {
        self.encryption_config.clear();
    }

    pub fn has_encryption_config(&self) -> bool {
        self.encryption_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryption_config(&mut self, v: Cluster_EncryptionConfig) {
        self.encryption_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encryption_config(&mut self) -> &mut Cluster_EncryptionConfig {
        if self.encryption_config.is_none() {
            self.encryption_config.set_default();
        }
        self.encryption_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_encryption_config(&mut self) -> Cluster_EncryptionConfig {
        self.encryption_config.take().unwrap_or_else(|| Cluster_EncryptionConfig::new())
    }
}

impl ::protobuf::Message for Cluster {
    fn is_initialized(&self) -> bool {
        for v in &self.encryption_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.location)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.serve_nodes = tmp;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.default_storage_type, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.encryption_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.location.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.location);
        }
        if self.state != Cluster_State::STATE_NOT_KNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.state);
        }
        if self.serve_nodes != 0 {
            my_size += ::protobuf::rt::value_size(4, self.serve_nodes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.default_storage_type != super::common::StorageType::STORAGE_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(5, self.default_storage_type);
        }
        if let Some(ref v) = self.encryption_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.location.is_empty() {
            os.write_string(2, &self.location)?;
        }
        if self.state != Cluster_State::STATE_NOT_KNOWN {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if self.serve_nodes != 0 {
            os.write_int32(4, self.serve_nodes)?;
        }
        if self.default_storage_type != super::common::StorageType::STORAGE_TYPE_UNSPECIFIED {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.default_storage_type))?;
        }
        if let Some(ref v) = self.encryption_config.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster {
        Cluster::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Cluster| { &m.name },
                |m: &mut Cluster| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "location",
                |m: &Cluster| { &m.location },
                |m: &mut Cluster| { &mut m.location },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Cluster_State>>(
                "state",
                |m: &Cluster| { &m.state },
                |m: &mut Cluster| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "serve_nodes",
                |m: &Cluster| { &m.serve_nodes },
                |m: &mut Cluster| { &mut m.serve_nodes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::StorageType>>(
                "default_storage_type",
                |m: &Cluster| { &m.default_storage_type },
                |m: &mut Cluster| { &mut m.default_storage_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster_EncryptionConfig>>(
                "encryption_config",
                |m: &Cluster| { &m.encryption_config },
                |m: &mut Cluster| { &mut m.encryption_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster>(
                "Cluster",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster {
        static instance: ::protobuf::rt::LazyV2<Cluster> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster::new)
    }
}

impl ::protobuf::Clear for Cluster {
    fn clear(&mut self) {
        self.name.clear();
        self.location.clear();
        self.state = Cluster_State::STATE_NOT_KNOWN;
        self.serve_nodes = 0;
        self.default_storage_type = super::common::StorageType::STORAGE_TYPE_UNSPECIFIED;
        self.encryption_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_EncryptionConfig {
    // message fields
    pub kms_key_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_EncryptionConfig {
    fn default() -> &'a Cluster_EncryptionConfig {
        <Cluster_EncryptionConfig as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_EncryptionConfig {
    pub fn new() -> Cluster_EncryptionConfig {
        ::std::default::Default::default()
    }

    // string kms_key_name = 1;


    pub fn get_kms_key_name(&self) -> &str {
        &self.kms_key_name
    }
    pub fn clear_kms_key_name(&mut self) {
        self.kms_key_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_kms_key_name(&mut self, v: ::std::string::String) {
        self.kms_key_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kms_key_name(&mut self) -> &mut ::std::string::String {
        &mut self.kms_key_name
    }

    // Take field
    pub fn take_kms_key_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kms_key_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Cluster_EncryptionConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kms_key_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.kms_key_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.kms_key_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.kms_key_name.is_empty() {
            os.write_string(1, &self.kms_key_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_EncryptionConfig {
        Cluster_EncryptionConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kms_key_name",
                |m: &Cluster_EncryptionConfig| { &m.kms_key_name },
                |m: &mut Cluster_EncryptionConfig| { &mut m.kms_key_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_EncryptionConfig>(
                "Cluster.EncryptionConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_EncryptionConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_EncryptionConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_EncryptionConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_EncryptionConfig {
    fn clear(&mut self) {
        self.kms_key_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_EncryptionConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_EncryptionConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Cluster_State {
    STATE_NOT_KNOWN = 0,
    READY = 1,
    CREATING = 2,
    RESIZING = 3,
    DISABLED = 4,
}

impl ::protobuf::ProtobufEnum for Cluster_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Cluster_State> {
        match value {
            0 => ::std::option::Option::Some(Cluster_State::STATE_NOT_KNOWN),
            1 => ::std::option::Option::Some(Cluster_State::READY),
            2 => ::std::option::Option::Some(Cluster_State::CREATING),
            3 => ::std::option::Option::Some(Cluster_State::RESIZING),
            4 => ::std::option::Option::Some(Cluster_State::DISABLED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Cluster_State] = &[
            Cluster_State::STATE_NOT_KNOWN,
            Cluster_State::READY,
            Cluster_State::CREATING,
            Cluster_State::RESIZING,
            Cluster_State::DISABLED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Cluster_State>("Cluster.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Cluster_State {
}

impl ::std::default::Default for Cluster_State {
    fn default() -> Self {
        Cluster_State::STATE_NOT_KNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppProfile {
    // message fields
    pub name: ::std::string::String,
    pub etag: ::std::string::String,
    pub description: ::std::string::String,
    // message oneof groups
    pub routing_policy: ::std::option::Option<AppProfile_oneof_routing_policy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppProfile {
    fn default() -> &'a AppProfile {
        <AppProfile as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AppProfile_oneof_routing_policy {
    multi_cluster_routing_use_any(AppProfile_MultiClusterRoutingUseAny),
    single_cluster_routing(AppProfile_SingleClusterRouting),
}

impl AppProfile {
    pub fn new() -> AppProfile {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string etag = 2;


    pub fn get_etag(&self) -> &str {
        &self.etag
    }
    pub fn clear_etag(&mut self) {
        self.etag.clear();
    }

    // Param is passed by value, moved
    pub fn set_etag(&mut self, v: ::std::string::String) {
        self.etag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_etag(&mut self) -> &mut ::std::string::String {
        &mut self.etag
    }

    // Take field
    pub fn take_etag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.etag, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAny multi_cluster_routing_use_any = 5;


    pub fn get_multi_cluster_routing_use_any(&self) -> &AppProfile_MultiClusterRoutingUseAny {
        match self.routing_policy {
            ::std::option::Option::Some(AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(ref v)) => v,
            _ => <AppProfile_MultiClusterRoutingUseAny as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_multi_cluster_routing_use_any(&mut self) {
        self.routing_policy = ::std::option::Option::None;
    }

    pub fn has_multi_cluster_routing_use_any(&self) -> bool {
        match self.routing_policy {
            ::std::option::Option::Some(AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_multi_cluster_routing_use_any(&mut self, v: AppProfile_MultiClusterRoutingUseAny) {
        self.routing_policy = ::std::option::Option::Some(AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(v))
    }

    // Mutable pointer to the field.
    pub fn mut_multi_cluster_routing_use_any(&mut self) -> &mut AppProfile_MultiClusterRoutingUseAny {
        if let ::std::option::Option::Some(AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(_)) = self.routing_policy {
        } else {
            self.routing_policy = ::std::option::Option::Some(AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(AppProfile_MultiClusterRoutingUseAny::new()));
        }
        match self.routing_policy {
            ::std::option::Option::Some(AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_multi_cluster_routing_use_any(&mut self) -> AppProfile_MultiClusterRoutingUseAny {
        if self.has_multi_cluster_routing_use_any() {
            match self.routing_policy.take() {
                ::std::option::Option::Some(AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(v)) => v,
                _ => panic!(),
            }
        } else {
            AppProfile_MultiClusterRoutingUseAny::new()
        }
    }

    // .google.bigtable.admin.v2.AppProfile.SingleClusterRouting single_cluster_routing = 6;


    pub fn get_single_cluster_routing(&self) -> &AppProfile_SingleClusterRouting {
        match self.routing_policy {
            ::std::option::Option::Some(AppProfile_oneof_routing_policy::single_cluster_routing(ref v)) => v,
            _ => <AppProfile_SingleClusterRouting as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_single_cluster_routing(&mut self) {
        self.routing_policy = ::std::option::Option::None;
    }

    pub fn has_single_cluster_routing(&self) -> bool {
        match self.routing_policy {
            ::std::option::Option::Some(AppProfile_oneof_routing_policy::single_cluster_routing(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_single_cluster_routing(&mut self, v: AppProfile_SingleClusterRouting) {
        self.routing_policy = ::std::option::Option::Some(AppProfile_oneof_routing_policy::single_cluster_routing(v))
    }

    // Mutable pointer to the field.
    pub fn mut_single_cluster_routing(&mut self) -> &mut AppProfile_SingleClusterRouting {
        if let ::std::option::Option::Some(AppProfile_oneof_routing_policy::single_cluster_routing(_)) = self.routing_policy {
        } else {
            self.routing_policy = ::std::option::Option::Some(AppProfile_oneof_routing_policy::single_cluster_routing(AppProfile_SingleClusterRouting::new()));
        }
        match self.routing_policy {
            ::std::option::Option::Some(AppProfile_oneof_routing_policy::single_cluster_routing(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_single_cluster_routing(&mut self) -> AppProfile_SingleClusterRouting {
        if self.has_single_cluster_routing() {
            match self.routing_policy.take() {
                ::std::option::Option::Some(AppProfile_oneof_routing_policy::single_cluster_routing(v)) => v,
                _ => panic!(),
            }
        } else {
            AppProfile_SingleClusterRouting::new()
        }
    }
}

impl ::protobuf::Message for AppProfile {
    fn is_initialized(&self) -> bool {
        if let Some(AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(ref v)) = self.routing_policy {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AppProfile_oneof_routing_policy::single_cluster_routing(ref v)) = self.routing_policy {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.etag)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.routing_policy = ::std::option::Option::Some(AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.routing_policy = ::std::option::Option::Some(AppProfile_oneof_routing_policy::single_cluster_routing(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.etag.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.etag);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if let ::std::option::Option::Some(ref v) = self.routing_policy {
            match v {
                &AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AppProfile_oneof_routing_policy::single_cluster_routing(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.etag.is_empty() {
            os.write_string(2, &self.etag)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if let ::std::option::Option::Some(ref v) = self.routing_policy {
            match v {
                &AppProfile_oneof_routing_policy::multi_cluster_routing_use_any(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AppProfile_oneof_routing_policy::single_cluster_routing(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppProfile {
        AppProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &AppProfile| { &m.name },
                |m: &mut AppProfile| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "etag",
                |m: &AppProfile| { &m.etag },
                |m: &mut AppProfile| { &mut m.etag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &AppProfile| { &m.description },
                |m: &mut AppProfile| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AppProfile_MultiClusterRoutingUseAny>(
                "multi_cluster_routing_use_any",
                AppProfile::has_multi_cluster_routing_use_any,
                AppProfile::get_multi_cluster_routing_use_any,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AppProfile_SingleClusterRouting>(
                "single_cluster_routing",
                AppProfile::has_single_cluster_routing,
                AppProfile::get_single_cluster_routing,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppProfile>(
                "AppProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AppProfile {
        static instance: ::protobuf::rt::LazyV2<AppProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AppProfile::new)
    }
}

impl ::protobuf::Clear for AppProfile {
    fn clear(&mut self) {
        self.name.clear();
        self.etag.clear();
        self.description.clear();
        self.routing_policy = ::std::option::Option::None;
        self.routing_policy = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppProfile_MultiClusterRoutingUseAny {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppProfile_MultiClusterRoutingUseAny {
    fn default() -> &'a AppProfile_MultiClusterRoutingUseAny {
        <AppProfile_MultiClusterRoutingUseAny as ::protobuf::Message>::default_instance()
    }
}

impl AppProfile_MultiClusterRoutingUseAny {
    pub fn new() -> AppProfile_MultiClusterRoutingUseAny {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AppProfile_MultiClusterRoutingUseAny {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppProfile_MultiClusterRoutingUseAny {
        AppProfile_MultiClusterRoutingUseAny::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppProfile_MultiClusterRoutingUseAny>(
                "AppProfile.MultiClusterRoutingUseAny",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AppProfile_MultiClusterRoutingUseAny {
        static instance: ::protobuf::rt::LazyV2<AppProfile_MultiClusterRoutingUseAny> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AppProfile_MultiClusterRoutingUseAny::new)
    }
}

impl ::protobuf::Clear for AppProfile_MultiClusterRoutingUseAny {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppProfile_MultiClusterRoutingUseAny {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppProfile_MultiClusterRoutingUseAny {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppProfile_SingleClusterRouting {
    // message fields
    pub cluster_id: ::std::string::String,
    pub allow_transactional_writes: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppProfile_SingleClusterRouting {
    fn default() -> &'a AppProfile_SingleClusterRouting {
        <AppProfile_SingleClusterRouting as ::protobuf::Message>::default_instance()
    }
}

impl AppProfile_SingleClusterRouting {
    pub fn new() -> AppProfile_SingleClusterRouting {
        ::std::default::Default::default()
    }

    // string cluster_id = 1;


    pub fn get_cluster_id(&self) -> &str {
        &self.cluster_id
    }
    pub fn clear_cluster_id(&mut self) {
        self.cluster_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: ::std::string::String) {
        self.cluster_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_id(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_id
    }

    // Take field
    pub fn take_cluster_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_id, ::std::string::String::new())
    }

    // bool allow_transactional_writes = 2;


    pub fn get_allow_transactional_writes(&self) -> bool {
        self.allow_transactional_writes
    }
    pub fn clear_allow_transactional_writes(&mut self) {
        self.allow_transactional_writes = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_transactional_writes(&mut self, v: bool) {
        self.allow_transactional_writes = v;
    }
}

impl ::protobuf::Message for AppProfile_SingleClusterRouting {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_transactional_writes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster_id);
        }
        if self.allow_transactional_writes != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster_id.is_empty() {
            os.write_string(1, &self.cluster_id)?;
        }
        if self.allow_transactional_writes != false {
            os.write_bool(2, self.allow_transactional_writes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppProfile_SingleClusterRouting {
        AppProfile_SingleClusterRouting::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_id",
                |m: &AppProfile_SingleClusterRouting| { &m.cluster_id },
                |m: &mut AppProfile_SingleClusterRouting| { &mut m.cluster_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_transactional_writes",
                |m: &AppProfile_SingleClusterRouting| { &m.allow_transactional_writes },
                |m: &mut AppProfile_SingleClusterRouting| { &mut m.allow_transactional_writes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppProfile_SingleClusterRouting>(
                "AppProfile.SingleClusterRouting",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AppProfile_SingleClusterRouting {
        static instance: ::protobuf::rt::LazyV2<AppProfile_SingleClusterRouting> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AppProfile_SingleClusterRouting::new)
    }
}

impl ::protobuf::Clear for AppProfile_SingleClusterRouting {
    fn clear(&mut self) {
        self.cluster_id.clear();
        self.allow_transactional_writes = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppProfile_SingleClusterRouting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppProfile_SingleClusterRouting {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'google/bigtable/admin/v2/instance.proto\x12\x18google.bigtable.admin.\
    v2\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.pro\
    to\x1a%google/bigtable/admin/v2/common.proto\"\x91\x04\n\x08Instance\x12\
    \x17\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x03\xe0A\x03\x12&\n\x0cdispl\
    ay_name\x18\x02\x20\x01(\tR\x0bdisplayNameB\x03\xe0A\x02\x12>\n\x05state\
    \x18\x03\x20\x01(\x0e2(.google.bigtable.admin.v2.Instance.StateR\x05stat\
    e\x12;\n\x04type\x18\x04\x20\x01(\x0e2'.google.bigtable.admin.v2.Instanc\
    e.TypeR\x04type\x12F\n\x06labels\x18\x05\x20\x03(\x0b2..google.bigtable.\
    admin.v2.Instance.LabelsEntryR\x06labels\x1a9\n\x0bLabelsEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\"5\n\x05State\x12\x13\n\x0fSTATE_NOT_KNOWN\x10\0\
    \x12\t\n\x05READY\x10\x01\x12\x0c\n\x08CREATING\x10\x02\"=\n\x04Type\x12\
    \x14\n\x10TYPE_UNSPECIFIED\x10\0\x12\x0e\n\nPRODUCTION\x10\x01\x12\x0f\n\
    \x0bDEVELOPMENT\x10\x02:N\xeaAK\n\x20bigtable.googleapis.com/Instance\
    \x12'projects/{project}/instances/{instance}\"\xa2\x05\n\x07Cluster\x12\
    \x17\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x03\xe0A\x03\x12B\n\x08locat\
    ion\x18\x02\x20\x01(\tR\x08locationB&\xfaA#\n!locations.googleapis.com/L\
    ocation\x12B\n\x05state\x18\x03\x20\x01(\x0e2'.google.bigtable.admin.v2.\
    Cluster.StateR\x05stateB\x03\xe0A\x03\x12$\n\x0bserve_nodes\x18\x04\x20\
    \x01(\x05R\nserveNodesB\x03\xe0A\x02\x12W\n\x14default_storage_type\x18\
    \x05\x20\x01(\x0e2%.google.bigtable.admin.v2.StorageTypeR\x12defaultStor\
    ageType\x12d\n\x11encryption_config\x18\x06\x20\x01(\x0b22.google.bigtab\
    le.admin.v2.Cluster.EncryptionConfigR\x10encryptionConfigB\x03\xe0A\x05\
    \x1a\\\n\x10EncryptionConfig\x12H\n\x0ckms_key_name\x18\x01\x20\x01(\tR\
    \nkmsKeyNameB&\xfaA#\n!cloudkms.googleapis.com/CryptoKey\"Q\n\x05State\
    \x12\x13\n\x0fSTATE_NOT_KNOWN\x10\0\x12\t\n\x05READY\x10\x01\x12\x0c\n\
    \x08CREATING\x10\x02\x12\x0c\n\x08RESIZING\x10\x03\x12\x0c\n\x08DISABLED\
    \x10\x04:`\xeaA]\n\x1fbigtable.googleapis.com/Cluster\x12:projects/{proj\
    ect}/instances/{instance}/clusters/{cluster}\"\xde\x04\n\nAppProfile\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x12\n\x04etag\x18\x02\x20\
    \x01(\tR\x04etag\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescrip\
    tion\x12\x82\x01\n\x1dmulti_cluster_routing_use_any\x18\x05\x20\x01(\x0b\
    2>.google.bigtable.admin.v2.AppProfile.MultiClusterRoutingUseAnyH\0R\x19\
    multiClusterRoutingUseAny\x12q\n\x16single_cluster_routing\x18\x06\x20\
    \x01(\x0b29.google.bigtable.admin.v2.AppProfile.SingleClusterRoutingH\0R\
    \x14singleClusterRouting\x1a\x1b\n\x19MultiClusterRoutingUseAny\x1as\n\
    \x14SingleClusterRouting\x12\x1d\n\ncluster_id\x18\x01\x20\x01(\tR\tclus\
    terId\x12<\n\x1aallow_transactional_writes\x18\x02\x20\x01(\x08R\x18allo\
    wTransactionalWritesB\x10\n\x0erouting_policy:j\xeaAg\n\"bigtable.google\
    apis.com/AppProfile\x12Aprojects/{project}/instances/{instance}/appProfi\
    les/{app_profile}B\xd0\x02\n\x1ccom.google.bigtable.admin.v2B\rInstanceP\
    rotoP\x01Z=google.golang.org/genproto/googleapis/bigtable/admin/v2;admin\
    \xaa\x02\x1eGoogle.Cloud.Bigtable.Admin.V2\xca\x02\x1eGoogle\\Cloud\\Big\
    table\\Admin\\V2\xea\x02\"Google::Cloud::Bigtable::Admin::V2\xeaAx\n!clo\
    udkms.googleapis.com/CryptoKey\x12Sprojects/{project}/locations/{locatio\
    n}/keyRings/{key_ring}/cryptoKeys/{crypto_key}J\xdbK\n\x07\x12\x05\x0e\0\
    \xf4\x01\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\
    \x202021\x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20L\
    icense,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20no\
    t\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\
    \x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20Lice\
    nse\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-\
    2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0!\n\t\
    \n\x02\x03\0\x12\x03\x12\0)\n\t\n\x02\x03\x01\x12\x03\x13\0#\n\t\n\x02\
    \x03\x02\x12\x03\x14\0/\n\x08\n\x01\x08\x12\x03\x16\0;\n\t\n\x02\x08%\
    \x12\x03\x16\0;\n\x08\n\x01\x08\x12\x03\x17\0T\n\t\n\x02\x08\x0b\x12\x03\
    \x17\0T\n\x08\n\x01\x08\x12\x03\x18\0\"\n\t\n\x02\x08\n\x12\x03\x18\0\"\
    \n\x08\n\x01\x08\x12\x03\x19\0.\n\t\n\x02\x08\x08\x12\x03\x19\0.\n\x08\n\
    \x01\x08\x12\x03\x1a\05\n\t\n\x02\x08\x01\x12\x03\x1a\05\n\x08\n\x01\x08\
    \x12\x03\x1b\0<\n\t\n\x02\x08)\x12\x03\x1b\0<\n\x08\n\x01\x08\x12\x03\
    \x1c\0;\n\t\n\x02\x08-\x12\x03\x1c\0;\n\t\n\x01\x08\x12\x04\x1d\0\x20\
    \x02\n\x0c\n\x04\x08\x9d\x08\0\x12\x04\x1d\0\x20\x02\n\xe2\x01\n\x02\x04\
    \0\x12\x04&\0k\x01\x1a\xd5\x01\x20A\x20collection\x20of\x20Bigtable\x20[\
    Tables][google.bigtable.admin.v2.Table]\x20and\n\x20the\x20resources\x20\
    that\x20serve\x20them.\n\x20All\x20tables\x20in\x20an\x20instance\x20are\
    \x20served\x20from\x20all\n\x20[Clusters][google.bigtable.admin.v2.Clust\
    er]\x20in\x20the\x20instance.\n\n\n\n\x03\x04\0\x01\x12\x03&\x08\x10\n\
    \x0b\n\x03\x04\0\x07\x12\x04'\x02*\x04\n\r\n\x05\x04\0\x07\x9d\x08\x12\
    \x04'\x02*\x04\n/\n\x04\x04\0\x04\0\x12\x04-\x028\x03\x1a!\x20Possible\
    \x20states\x20of\x20an\x20instance.\n\n\x0c\n\x05\x04\0\x04\0\x01\x12\
    \x03-\x07\x0c\nC\n\x06\x04\0\x04\0\x02\0\x12\x03/\x04\x18\x1a4\x20The\
    \x20state\x20of\x20the\x20instance\x20could\x20not\x20be\x20determined.\
    \n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03/\x04\x13\n\x0e\n\x07\x04\0\
    \x04\0\x02\0\x02\x12\x03/\x16\x17\nb\n\x06\x04\0\x04\0\x02\x01\x12\x033\
    \x04\x0e\x1aS\x20The\x20instance\x20has\x20been\x20successfully\x20creat\
    ed\x20and\x20can\x20serve\x20requests\n\x20to\x20its\x20tables.\n\n\x0e\
    \n\x07\x04\0\x04\0\x02\x01\x01\x12\x033\x04\t\n\x0e\n\x07\x04\0\x04\0\
    \x02\x01\x02\x12\x033\x0c\r\n|\n\x06\x04\0\x04\0\x02\x02\x12\x037\x04\
    \x11\x1am\x20The\x20instance\x20is\x20currently\x20being\x20created,\x20\
    and\x20may\x20be\x20destroyed\n\x20if\x20the\x20creation\x20process\x20e\
    ncounters\x20an\x20error.\n\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x037\
    \x04\x0c\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x037\x0f\x10\n)\n\x04\
    \x04\0\x04\x01\x12\x04;\x02M\x03\x1a\x1b\x20The\x20type\x20of\x20the\x20\
    instance.\n\n\x0c\n\x05\x04\0\x04\x01\x01\x12\x03;\x07\x0b\n\xca\x01\n\
    \x06\x04\0\x04\x01\x02\0\x12\x03?\x04\x19\x1a\xba\x01\x20The\x20type\x20\
    of\x20the\x20instance\x20is\x20unspecified.\x20If\x20set\x20when\x20crea\
    ting\x20an\n\x20instance,\x20a\x20`PRODUCTION`\x20instance\x20will\x20be\
    \x20created.\x20If\x20set\x20when\x20updating\n\x20an\x20instance,\x20th\
    e\x20type\x20will\x20be\x20left\x20unchanged.\n\n\x0e\n\x07\x04\0\x04\
    \x01\x02\0\x01\x12\x03?\x04\x14\n\x0e\n\x07\x04\0\x04\x01\x02\0\x02\x12\
    \x03?\x17\x18\na\n\x06\x04\0\x04\x01\x02\x01\x12\x03C\x04\x13\x1aR\x20An\
    \x20instance\x20meant\x20for\x20production\x20use.\x20`serve_nodes`\x20m\
    ust\x20be\x20set\n\x20on\x20the\x20cluster.\n\n\x0e\n\x07\x04\0\x04\x01\
    \x02\x01\x01\x12\x03C\x04\x0e\n\x0e\n\x07\x04\0\x04\x01\x02\x01\x02\x12\
    \x03C\x11\x12\n\xb7\x03\n\x06\x04\0\x04\x01\x02\x02\x12\x03L\x04\x14\x1a\
    \xa7\x03\x20The\x20instance\x20is\x20meant\x20for\x20development\x20and\
    \x20testing\x20purposes\x20only;\x20it\x20has\n\x20no\x20performance\x20\
    or\x20uptime\x20guarantees\x20and\x20is\x20not\x20covered\x20by\x20SLA.\
    \n\x20After\x20a\x20development\x20instance\x20is\x20created,\x20it\x20c\
    an\x20be\x20upgraded\x20by\n\x20updating\x20the\x20instance\x20to\x20typ\
    e\x20`PRODUCTION`.\x20An\x20instance\x20created\n\x20as\x20a\x20producti\
    on\x20instance\x20cannot\x20be\x20changed\x20to\x20a\x20development\x20i\
    nstance.\n\x20When\x20creating\x20a\x20development\x20instance,\x20`serv\
    e_nodes`\x20on\x20the\x20cluster\x20must\n\x20not\x20be\x20set.\n\n\x0e\
    \n\x07\x04\0\x04\x01\x02\x02\x01\x12\x03L\x04\x0f\n\x0e\n\x07\x04\0\x04\
    \x01\x02\x02\x02\x12\x03L\x12\x13\n\x81\x01\n\x04\x04\0\x02\0\x12\x03Q\
    \x02>\x1at\x20The\x20unique\x20name\x20of\x20the\x20instance.\x20Values\
    \x20are\x20of\x20the\x20form\n\x20`projects/{project}/instances/[a-z][a-\
    z0-9\\\\-]+[a-z0-9]`.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04Q\x02M\x03\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03Q\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03Q\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03Q\x10\x11\n\x0c\n\x05\
    \x04\0\x02\0\x08\x12\x03Q\x12=\n\x0f\n\x08\x04\0\x02\0\x08\x9c\x08\0\x12\
    \x03Q\x13<\n\xab\x01\n\x04\x04\0\x02\x01\x12\x03V\x02C\x1a\x9d\x01\x20Re\
    quired.\x20The\x20descriptive\x20name\x20for\x20this\x20instance\x20as\
    \x20it\x20appears\x20in\x20UIs.\n\x20Can\x20be\x20changed\x20at\x20any\
    \x20time,\x20but\x20should\x20be\x20kept\x20globally\x20unique\n\x20to\
    \x20avoid\x20confusion.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04V\x02Q>\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03V\x02\x08\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03V\t\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03V\x18\x19\n\x0c\
    \n\x05\x04\0\x02\x01\x08\x12\x03V\x1aB\n\x0f\n\x08\x04\0\x02\x01\x08\x9c\
    \x08\0\x12\x03V\x1bA\nA\n\x04\x04\0\x02\x02\x12\x03Z\x02\x12\x1a4\x20(`O\
    utputOnly`)\n\x20The\x20current\x20state\x20of\x20the\x20instance.\n\n\r\
    \n\x05\x04\0\x02\x02\x04\x12\x04Z\x02VC\n\x0c\n\x05\x04\0\x02\x02\x06\
    \x12\x03Z\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03Z\x08\r\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03Z\x10\x11\nB\n\x04\x04\0\x02\x03\x12\x03]\
    \x02\x10\x1a5\x20The\x20type\x20of\x20the\x20instance.\x20Defaults\x20to\
    \x20`PRODUCTION`.\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04]\x02Z\x12\n\x0c\
    \n\x05\x04\0\x02\x03\x06\x12\x03]\x02\x06\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03]\x07\x0b\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03]\x0e\x0f\n\x82\
    \x05\n\x04\x04\0\x02\x04\x12\x03j\x02!\x1a\xf4\x04\x20Labels\x20are\x20a\
    \x20flexible\x20and\x20lightweight\x20mechanism\x20for\x20organizing\x20\
    cloud\n\x20resources\x20into\x20groups\x20that\x20reflect\x20a\x20custom\
    er's\x20organizational\x20needs\x20and\n\x20deployment\x20strategies.\
    \x20They\x20can\x20be\x20used\x20to\x20filter\x20resources\x20and\x20agg\
    regate\n\x20metrics.\n\n\x20*\x20Label\x20keys\x20must\x20be\x20between\
    \x201\x20and\x2063\x20characters\x20long\x20and\x20must\x20conform\x20to\
    \n\x20\x20\x20the\x20regular\x20expression:\x20`[\\p{Ll}\\p{Lo}][\\p{Ll}\
    \\p{Lo}\\p{N}_-]{0,62}`.\n\x20*\x20Label\x20values\x20must\x20be\x20betw\
    een\x200\x20and\x2063\x20characters\x20long\x20and\x20must\x20conform\
    \x20to\n\x20\x20\x20the\x20regular\x20expression:\x20`[\\p{Ll}\\p{Lo}\\p\
    {N}_-]{0,63}`.\n\x20*\x20No\x20more\x20than\x2064\x20labels\x20can\x20be\
    \x20associated\x20with\x20a\x20given\x20resource.\n\x20*\x20Keys\x20and\
    \x20values\x20must\x20both\x20be\x20under\x20128\x20bytes.\n\n\r\n\x05\
    \x04\0\x02\x04\x04\x12\x04j\x02]\x10\n\x0c\n\x05\x04\0\x02\x04\x06\x12\
    \x03j\x02\x15\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03j\x16\x1c\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03j\x1f\x20\n\xc9\x01\n\x02\x04\x01\x12\x05p\0\
    \xbb\x01\x01\x1a\xbb\x01\x20A\x20resizable\x20group\x20of\x20nodes\x20in\
    \x20a\x20particular\x20cloud\x20location,\x20capable\n\x20of\x20serving\
    \x20all\x20[Tables][google.bigtable.admin.v2.Table]\x20in\x20the\x20pare\
    nt\n\x20[Instance][google.bigtable.admin.v2.Instance].\n\n\n\n\x03\x04\
    \x01\x01\x12\x03p\x08\x0f\n\x0b\n\x03\x04\x01\x07\x12\x04q\x02t\x04\n\r\
    \n\x05\x04\x01\x07\x9d\x08\x12\x04q\x02t\x04\na\n\x04\x04\x01\x03\0\x12\
    \x05x\x02\x84\x01\x03\x1aR\x20Cloud\x20Key\x20Management\x20Service\x20(\
    Cloud\x20KMS)\x20settings\x20for\x20a\x20CMEK-protected\n\x20cluster.\n\
    \n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03x\n\x1a\n\xfd\x03\n\x06\x04\x01\
    \x03\0\x02\0\x12\x06\x81\x01\x04\x83\x01\x07\x1a\xea\x03\x20Describes\
    \x20the\x20Cloud\x20KMS\x20encryption\x20key\x20that\x20will\x20be\x20us\
    ed\x20to\x20protect\x20the\n\x20destination\x20Bigtable\x20cluster.\x20T\
    he\x20requirements\x20for\x20this\x20key\x20are:\n\x20\x201)\x20The\x20C\
    loud\x20Bigtable\x20service\x20account\x20associated\x20with\x20the\x20p\
    roject\x20that\n\x20\x20contains\x20this\x20cluster\x20must\x20be\x20gra\
    nted\x20the\n\x20\x20`cloudkms.cryptoKeyEncrypterDecrypter`\x20role\x20o\
    n\x20the\x20CMEK\x20key.\n\x20\x202)\x20Only\x20regional\x20keys\x20can\
    \x20be\x20used\x20and\x20the\x20region\x20of\x20the\x20CMEK\x20key\x20mu\
    st\n\x20\x20match\x20the\x20region\x20of\x20the\x20cluster.\n\x203)\x20A\
    ll\x20clusters\x20within\x20an\x20instance\x20must\x20use\x20the\x20same\
    \x20CMEK\x20key.\n\n\x10\n\x07\x04\x01\x03\0\x02\0\x04\x12\x05\x81\x01\
    \x04x\x1c\n\x0f\n\x07\x04\x01\x03\0\x02\0\x05\x12\x04\x81\x01\x04\n\n\
    \x0f\n\x07\x04\x01\x03\0\x02\0\x01\x12\x04\x81\x01\x0b\x17\n\x0f\n\x07\
    \x04\x01\x03\0\x02\0\x03\x12\x04\x81\x01\x1a\x1b\n\x11\n\x07\x04\x01\x03\
    \0\x02\0\x08\x12\x06\x81\x01\x1c\x83\x01\x06\n\x13\n\t\x04\x01\x03\0\x02\
    \0\x08\x9f\x08\x12\x06\x81\x01\x1d\x83\x01\x05\n/\n\x04\x04\x01\x04\0\
    \x12\x06\x87\x01\x02\x9d\x01\x03\x1a\x1f\x20Possible\x20states\x20of\x20\
    a\x20cluster.\n\n\r\n\x05\x04\x01\x04\0\x01\x12\x04\x87\x01\x07\x0c\nC\n\
    \x06\x04\x01\x04\0\x02\0\x12\x04\x89\x01\x04\x18\x1a3\x20The\x20state\
    \x20of\x20the\x20cluster\x20could\x20not\x20be\x20determined.\n\n\x0f\n\
    \x07\x04\x01\x04\0\x02\0\x01\x12\x04\x89\x01\x04\x13\n\x0f\n\x07\x04\x01\
    \x04\0\x02\0\x02\x12\x04\x89\x01\x16\x17\n[\n\x06\x04\x01\x04\0\x02\x01\
    \x12\x04\x8c\x01\x04\x0e\x1aK\x20The\x20cluster\x20has\x20been\x20succes\
    sfully\x20created\x20and\x20is\x20ready\x20to\x20serve\x20requests.\n\n\
    \x0f\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x04\x8c\x01\x04\t\n\x0f\n\x07\
    \x04\x01\x04\0\x02\x01\x02\x12\x04\x8c\x01\x0c\r\n\xbf\x01\n\x06\x04\x01\
    \x04\0\x02\x02\x12\x04\x91\x01\x04\x11\x1a\xae\x01\x20The\x20cluster\x20\
    is\x20currently\x20being\x20created,\x20and\x20may\x20be\x20destroyed\n\
    \x20if\x20the\x20creation\x20process\x20encounters\x20an\x20error.\n\x20\
    A\x20cluster\x20may\x20not\x20be\x20able\x20to\x20serve\x20requests\x20w\
    hile\x20being\x20created.\n\n\x0f\n\x07\x04\x01\x04\0\x02\x02\x01\x12\
    \x04\x91\x01\x04\x0c\n\x0f\n\x07\x04\x01\x04\0\x02\x02\x02\x12\x04\x91\
    \x01\x0f\x10\n\xbe\x02\n\x06\x04\x01\x04\0\x02\x03\x12\x04\x98\x01\x04\
    \x11\x1a\xad\x02\x20The\x20cluster\x20is\x20currently\x20being\x20resize\
    d,\x20and\x20may\x20revert\x20to\x20its\x20previous\n\x20node\x20count\
    \x20if\x20the\x20process\x20encounters\x20an\x20error.\n\x20A\x20cluster\
    \x20is\x20still\x20capable\x20of\x20serving\x20requests\x20while\x20bein\
    g\x20resized,\n\x20but\x20may\x20exhibit\x20performance\x20as\x20if\x20i\
    ts\x20number\x20of\x20allocated\x20nodes\x20is\n\x20between\x20the\x20st\
    arting\x20and\x20requested\x20states.\n\n\x0f\n\x07\x04\x01\x04\0\x02\
    \x03\x01\x12\x04\x98\x01\x04\x0c\n\x0f\n\x07\x04\x01\x04\0\x02\x03\x02\
    \x12\x04\x98\x01\x0f\x10\n\x86\x01\n\x06\x04\x01\x04\0\x02\x04\x12\x04\
    \x9c\x01\x04\x11\x1av\x20The\x20cluster\x20has\x20no\x20backing\x20nodes\
    .\x20The\x20data\x20(tables)\x20still\n\x20exist,\x20but\x20no\x20operat\
    ions\x20can\x20be\x20performed\x20on\x20the\x20cluster.\n\n\x0f\n\x07\
    \x04\x01\x04\0\x02\x04\x01\x12\x04\x9c\x01\x04\x0c\n\x0f\n\x07\x04\x01\
    \x04\0\x02\x04\x02\x12\x04\x9c\x01\x0f\x10\n\x8b\x01\n\x04\x04\x01\x02\0\
    \x12\x04\xa1\x01\x02>\x1a}\x20The\x20unique\x20name\x20of\x20the\x20clus\
    ter.\x20Values\x20are\x20of\x20the\x20form\n\x20`projects/{project}/inst\
    ances/{instance}/clusters/[a-z][-a-z0-9]*`.\n\n\x0f\n\x05\x04\x01\x02\0\
    \x04\x12\x06\xa1\x01\x02\x9d\x01\x03\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\
    \xa1\x01\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xa1\x01\t\r\n\r\n\
    \x05\x04\x01\x02\0\x03\x12\x04\xa1\x01\x10\x11\n\r\n\x05\x04\x01\x02\0\
    \x08\x12\x04\xa1\x01\x12=\n\x10\n\x08\x04\x01\x02\0\x08\x9c\x08\0\x12\
    \x04\xa1\x01\x13<\n\xa4\x02\n\x04\x04\x01\x02\x01\x12\x06\xa8\x01\x02\
    \xaa\x01\x05\x1a\x93\x02\x20(`CreationOnly`)\n\x20The\x20location\x20whe\
    re\x20this\x20cluster's\x20nodes\x20and\x20storage\x20reside.\x20For\x20\
    best\n\x20performance,\x20clients\x20should\x20be\x20located\x20as\x20cl\
    ose\x20as\x20possible\x20to\x20this\n\x20cluster.\x20Currently\x20only\
    \x20zones\x20are\x20supported,\x20so\x20values\x20should\x20be\x20of\x20\
    the\n\x20form\x20`projects/{project}/locations/{zone}`.\n\n\x0f\n\x05\
    \x04\x01\x02\x01\x04\x12\x06\xa8\x01\x02\xa1\x01>\n\r\n\x05\x04\x01\x02\
    \x01\x05\x12\x04\xa8\x01\x02\x08\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\
    \xa8\x01\t\x11\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\xa8\x01\x14\x15\n\
    \x0f\n\x05\x04\x01\x02\x01\x08\x12\x06\xa8\x01\x16\xaa\x01\x04\n\x11\n\
    \x07\x04\x01\x02\x01\x08\x9f\x08\x12\x06\xa8\x01\x17\xaa\x01\x03\n1\n\
    \x04\x04\x01\x02\x02\x12\x04\xad\x01\x02>\x1a#\x20The\x20current\x20stat\
    e\x20of\x20the\x20cluster.\n\n\x0f\n\x05\x04\x01\x02\x02\x04\x12\x06\xad\
    \x01\x02\xaa\x01\x05\n\r\n\x05\x04\x01\x02\x02\x06\x12\x04\xad\x01\x02\
    \x07\n\r\n\x05\x04\x01\x02\x02\x01\x12\x04\xad\x01\x08\r\n\r\n\x05\x04\
    \x01\x02\x02\x03\x12\x04\xad\x01\x10\x11\n\r\n\x05\x04\x01\x02\x02\x08\
    \x12\x04\xad\x01\x12=\n\x10\n\x08\x04\x01\x02\x02\x08\x9c\x08\0\x12\x04\
    \xad\x01\x13<\n\x8f\x01\n\x04\x04\x01\x02\x03\x12\x04\xb1\x01\x02A\x1a\
    \x80\x01\x20Required.\x20The\x20number\x20of\x20nodes\x20allocated\x20to\
    \x20this\x20cluster.\x20More\x20nodes\x20enable\n\x20higher\x20throughpu\
    t\x20and\x20more\x20consistent\x20performance.\n\n\x0f\n\x05\x04\x01\x02\
    \x03\x04\x12\x06\xb1\x01\x02\xad\x01>\n\r\n\x05\x04\x01\x02\x03\x05\x12\
    \x04\xb1\x01\x02\x07\n\r\n\x05\x04\x01\x02\x03\x01\x12\x04\xb1\x01\x08\
    \x13\n\r\n\x05\x04\x01\x02\x03\x03\x12\x04\xb1\x01\x16\x17\n\r\n\x05\x04\
    \x01\x02\x03\x08\x12\x04\xb1\x01\x18@\n\x10\n\x08\x04\x01\x02\x03\x08\
    \x9c\x08\0\x12\x04\xb1\x01\x19?\n\x91\x01\n\x04\x04\x01\x02\x04\x12\x04\
    \xb6\x01\x02'\x1a\x82\x01\x20(`CreationOnly`)\n\x20The\x20type\x20of\x20\
    storage\x20used\x20by\x20this\x20cluster\x20to\x20serve\x20its\n\x20pare\
    nt\x20instance's\x20tables,\x20unless\x20explicitly\x20overridden.\n\n\
    \x0f\n\x05\x04\x01\x02\x04\x04\x12\x06\xb6\x01\x02\xb1\x01A\n\r\n\x05\
    \x04\x01\x02\x04\x06\x12\x04\xb6\x01\x02\r\n\r\n\x05\x04\x01\x02\x04\x01\
    \x12\x04\xb6\x01\x0e\"\n\r\n\x05\x04\x01\x02\x04\x03\x12\x04\xb6\x01%&\n\
    V\n\x04\x04\x01\x02\x05\x12\x06\xb9\x01\x02\xba\x010\x1aF\x20Immutable.\
    \x20The\x20encryption\x20configuration\x20for\x20CMEK-protected\x20clust\
    ers.\n\n\x0f\n\x05\x04\x01\x02\x05\x04\x12\x06\xb9\x01\x02\xb6\x01'\n\r\
    \n\x05\x04\x01\x02\x05\x06\x12\x04\xb9\x01\x02\x12\n\r\n\x05\x04\x01\x02\
    \x05\x01\x12\x04\xb9\x01\x13$\n\r\n\x05\x04\x01\x02\x05\x03\x12\x04\xb9\
    \x01'(\n\r\n\x05\x04\x01\x02\x05\x08\x12\x04\xba\x01\x06/\n\x10\n\x08\
    \x04\x01\x02\x05\x08\x9c\x08\0\x12\x04\xba\x01\x07.\n\x82\x01\n\x02\x04\
    \x02\x12\x06\xbf\x01\0\xf4\x01\x01\x1at\x20A\x20configuration\x20object\
    \x20describing\x20how\x20Cloud\x20Bigtable\x20should\x20treat\x20traffic\
    \n\x20from\x20a\x20particular\x20end\x20user\x20application.\n\n\x0b\n\
    \x03\x04\x02\x01\x12\x04\xbf\x01\x08\x12\n\r\n\x03\x04\x02\x07\x12\x06\
    \xc0\x01\x02\xc3\x01\x04\n\x0f\n\x05\x04\x02\x07\x9d\x08\x12\x06\xc0\x01\
    \x02\xc3\x01\x04\n\xca\x02\n\x04\x04\x02\x03\0\x12\x04\xca\x01\x02&\x1a\
    \xbb\x02\x20Read/write\x20requests\x20are\x20routed\x20to\x20the\x20near\
    est\x20cluster\x20in\x20the\x20instance,\x20and\n\x20will\x20fail\x20ove\
    r\x20to\x20the\x20nearest\x20cluster\x20that\x20is\x20available\x20in\
    \x20the\x20event\x20of\n\x20transient\x20errors\x20or\x20delays.\x20Clus\
    ters\x20in\x20a\x20region\x20are\x20considered\n\x20equidistant.\x20Choo\
    sing\x20this\x20option\x20sacrifices\x20read-your-writes\x20consistency\
    \n\x20to\x20improve\x20availability.\n\n\r\n\x05\x04\x02\x03\0\x01\x12\
    \x04\xca\x01\n#\n\xb0\x01\n\x04\x04\x02\x03\x01\x12\x06\xcf\x01\x02\xd7\
    \x01\x03\x1a\x9f\x01\x20Unconditionally\x20routes\x20all\x20read/write\
    \x20requests\x20to\x20a\x20specific\x20cluster.\n\x20This\x20option\x20p\
    reserves\x20read-your-writes\x20consistency\x20but\x20does\x20not\x20imp\
    rove\n\x20availability.\n\n\r\n\x05\x04\x02\x03\x01\x01\x12\x04\xcf\x01\
    \n\x1e\nL\n\x06\x04\x02\x03\x01\x02\0\x12\x04\xd1\x01\x04\x1a\x1a<\x20Th\
    e\x20cluster\x20to\x20which\x20read/write\x20requests\x20should\x20be\
    \x20routed.\n\n\x11\n\x07\x04\x02\x03\x01\x02\0\x04\x12\x06\xd1\x01\x04\
    \xcf\x01\x20\n\x0f\n\x07\x04\x02\x03\x01\x02\0\x05\x12\x04\xd1\x01\x04\n\
    \n\x0f\n\x07\x04\x02\x03\x01\x02\0\x01\x12\x04\xd1\x01\x0b\x15\n\x0f\n\
    \x07\x04\x02\x03\x01\x02\0\x03\x12\x04\xd1\x01\x18\x19\n\xd1\x01\n\x06\
    \x04\x02\x03\x01\x02\x01\x12\x04\xd6\x01\x04(\x1a\xc0\x01\x20Whether\x20\
    or\x20not\x20`CheckAndMutateRow`\x20and\x20`ReadModifyWriteRow`\x20reque\
    sts\x20are\n\x20allowed\x20by\x20this\x20app\x20profile.\x20It\x20is\x20\
    unsafe\x20to\x20send\x20these\x20requests\x20to\n\x20the\x20same\x20tabl\
    e/row/column\x20in\x20multiple\x20clusters.\n\n\x11\n\x07\x04\x02\x03\
    \x01\x02\x01\x04\x12\x06\xd6\x01\x04\xd1\x01\x1a\n\x0f\n\x07\x04\x02\x03\
    \x01\x02\x01\x05\x12\x04\xd6\x01\x04\x08\n\x0f\n\x07\x04\x02\x03\x01\x02\
    \x01\x01\x12\x04\xd6\x01\t#\n\x0f\n\x07\x04\x02\x03\x01\x02\x01\x03\x12\
    \x04\xd6\x01&'\n\xaf\x01\n\x04\x04\x02\x02\0\x12\x04\xdc\x01\x02\x12\x1a\
    \xa0\x01\x20(`OutputOnly`)\n\x20The\x20unique\x20name\x20of\x20the\x20ap\
    p\x20profile.\x20Values\x20are\x20of\x20the\x20form\n\x20`projects/{proj\
    ect}/instances/{instance}/appProfiles/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.\n\n\
    \x0f\n\x05\x04\x02\x02\0\x04\x12\x06\xdc\x01\x02\xd7\x01\x03\n\r\n\x05\
    \x04\x02\x02\0\x05\x12\x04\xdc\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\
    \x12\x04\xdc\x01\t\r\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xdc\x01\x10\x11\
    \n\xcd\x03\n\x04\x04\x02\x02\x01\x12\x04\xe6\x01\x02\x12\x1a\xbe\x03\x20\
    Strongly\x20validated\x20etag\x20for\x20optimistic\x20concurrency\x20con\
    trol.\x20Preserve\x20the\n\x20value\x20returned\x20from\x20`GetAppProfil\
    e`\x20when\x20calling\x20`UpdateAppProfile`\x20to\n\x20fail\x20the\x20re\
    quest\x20if\x20there\x20has\x20been\x20a\x20modification\x20in\x20the\
    \x20mean\x20time.\x20The\n\x20`update_mask`\x20of\x20the\x20request\x20n\
    eed\x20not\x20include\x20`etag`\x20for\x20this\x20protection\n\x20to\x20\
    apply.\n\x20See\x20[Wikipedia](https://en.wikipedia.org/wiki/HTTP_ETag)\
    \x20and\n\x20[RFC\x207232](https://tools.ietf.org/html/rfc7232#section-2\
    .3)\x20for\x20more\n\x20details.\n\n\x0f\n\x05\x04\x02\x02\x01\x04\x12\
    \x06\xe6\x01\x02\xdc\x01\x12\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\xe6\
    \x01\x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\xe6\x01\t\r\n\r\n\x05\
    \x04\x02\x02\x01\x03\x12\x04\xe6\x01\x10\x11\nS\n\x04\x04\x02\x02\x02\
    \x12\x04\xe9\x01\x02\x19\x1aE\x20Optional\x20long\x20form\x20description\
    \x20of\x20the\x20use\x20case\x20for\x20this\x20AppProfile.\n\n\x0f\n\x05\
    \x04\x02\x02\x02\x04\x12\x06\xe9\x01\x02\xe6\x01\x12\n\r\n\x05\x04\x02\
    \x02\x02\x05\x12\x04\xe9\x01\x02\x08\n\r\n\x05\x04\x02\x02\x02\x01\x12\
    \x04\xe9\x01\t\x14\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\xe9\x01\x17\x18\
    \n|\n\x04\x04\x02\x08\0\x12\x06\xed\x01\x02\xf3\x01\x03\x1al\x20The\x20r\
    outing\x20policy\x20for\x20all\x20read/write\x20requests\x20that\x20use\
    \x20this\x20app\x20profile.\n\x20A\x20value\x20must\x20be\x20explicitly\
    \x20set.\n\n\r\n\x05\x04\x02\x08\0\x01\x12\x04\xed\x01\x08\x16\n3\n\x04\
    \x04\x02\x02\x03\x12\x04\xef\x01\x04@\x1a%\x20Use\x20a\x20multi-cluster\
    \x20routing\x20policy.\n\n\r\n\x05\x04\x02\x02\x03\x06\x12\x04\xef\x01\
    \x04\x1d\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\xef\x01\x1e;\n\r\n\x05\
    \x04\x02\x02\x03\x03\x12\x04\xef\x01>?\n4\n\x04\x04\x02\x02\x04\x12\x04\
    \xf2\x01\x044\x1a&\x20Use\x20a\x20single-cluster\x20routing\x20policy.\n\
    \n\r\n\x05\x04\x02\x02\x04\x06\x12\x04\xf2\x01\x04\x18\n\r\n\x05\x04\x02\
    \x02\x04\x01\x12\x04\xf2\x01\x19/\n\r\n\x05\x04\x02\x02\x04\x03\x12\x04\
    \xf2\x0123b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
