// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/bigtable/admin/v2/table.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct Table {
    // message fields
    pub name: ::std::string::String,
    pub cluster_states: ::std::collections::HashMap<::std::string::String, Table_ClusterState>,
    pub column_families: ::std::collections::HashMap<::std::string::String, ColumnFamily>,
    pub granularity: Table_TimestampGranularity,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Table {
    fn default() -> &'a Table {
        <Table as ::protobuf::Message>::default_instance()
    }
}

impl Table {
    pub fn new() -> Table {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .google.bigtable.admin.v2.Table.ClusterStatesEntry cluster_states = 2;


    pub fn get_cluster_states(&self) -> &::std::collections::HashMap<::std::string::String, Table_ClusterState> {
        &self.cluster_states
    }
    pub fn clear_cluster_states(&mut self) {
        self.cluster_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_states(&mut self, v: ::std::collections::HashMap<::std::string::String, Table_ClusterState>) {
        self.cluster_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_states(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Table_ClusterState> {
        &mut self.cluster_states
    }

    // Take field
    pub fn take_cluster_states(&mut self) -> ::std::collections::HashMap<::std::string::String, Table_ClusterState> {
        ::std::mem::replace(&mut self.cluster_states, ::std::collections::HashMap::new())
    }

    // repeated .google.bigtable.admin.v2.Table.ColumnFamiliesEntry column_families = 3;


    pub fn get_column_families(&self) -> &::std::collections::HashMap<::std::string::String, ColumnFamily> {
        &self.column_families
    }
    pub fn clear_column_families(&mut self) {
        self.column_families.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_families(&mut self, v: ::std::collections::HashMap<::std::string::String, ColumnFamily>) {
        self.column_families = v;
    }

    // Mutable pointer to the field.
    pub fn mut_column_families(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ColumnFamily> {
        &mut self.column_families
    }

    // Take field
    pub fn take_column_families(&mut self) -> ::std::collections::HashMap<::std::string::String, ColumnFamily> {
        ::std::mem::replace(&mut self.column_families, ::std::collections::HashMap::new())
    }

    // .google.bigtable.admin.v2.Table.TimestampGranularity granularity = 4;


    pub fn get_granularity(&self) -> Table_TimestampGranularity {
        self.granularity
    }
    pub fn clear_granularity(&mut self) {
        self.granularity = Table_TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_granularity(&mut self, v: Table_TimestampGranularity) {
        self.granularity = v;
    }
}

impl ::protobuf::Message for Table {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Table_ClusterState>>(wire_type, is, &mut self.cluster_states)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ColumnFamily>>(wire_type, is, &mut self.column_families)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.granularity, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Table_ClusterState>>(2, &self.cluster_states);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ColumnFamily>>(3, &self.column_families);
        if self.granularity != Table_TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.granularity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Table_ClusterState>>(2, &self.cluster_states, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ColumnFamily>>(3, &self.column_families, os)?;
        if self.granularity != Table_TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.granularity))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Table {
        Table::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Table| { &m.name },
                |m: &mut Table| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Table_ClusterState>>(
                "cluster_states",
                |m: &Table| { &m.cluster_states },
                |m: &mut Table| { &mut m.cluster_states },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ColumnFamily>>(
                "column_families",
                |m: &Table| { &m.column_families },
                |m: &mut Table| { &mut m.column_families },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Table_TimestampGranularity>>(
                "granularity",
                |m: &Table| { &m.granularity },
                |m: &mut Table| { &mut m.granularity },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Table>(
                "Table",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Table {
        static instance: ::protobuf::rt::LazyV2<Table> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Table::new)
    }
}

impl ::protobuf::Clear for Table {
    fn clear(&mut self) {
        self.name.clear();
        self.cluster_states.clear();
        self.column_families.clear();
        self.granularity = Table_TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Table {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Table {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Table_ClusterState {
    // message fields
    pub replication_state: Table_ClusterState_ReplicationState,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Table_ClusterState {
    fn default() -> &'a Table_ClusterState {
        <Table_ClusterState as ::protobuf::Message>::default_instance()
    }
}

impl Table_ClusterState {
    pub fn new() -> Table_ClusterState {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.Table.ClusterState.ReplicationState replication_state = 1;


    pub fn get_replication_state(&self) -> Table_ClusterState_ReplicationState {
        self.replication_state
    }
    pub fn clear_replication_state(&mut self) {
        self.replication_state = Table_ClusterState_ReplicationState::STATE_NOT_KNOWN;
    }

    // Param is passed by value, moved
    pub fn set_replication_state(&mut self, v: Table_ClusterState_ReplicationState) {
        self.replication_state = v;
    }
}

impl ::protobuf::Message for Table_ClusterState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.replication_state, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.replication_state != Table_ClusterState_ReplicationState::STATE_NOT_KNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.replication_state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.replication_state != Table_ClusterState_ReplicationState::STATE_NOT_KNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.replication_state))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Table_ClusterState {
        Table_ClusterState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Table_ClusterState_ReplicationState>>(
                "replication_state",
                |m: &Table_ClusterState| { &m.replication_state },
                |m: &mut Table_ClusterState| { &mut m.replication_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Table_ClusterState>(
                "Table.ClusterState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Table_ClusterState {
        static instance: ::protobuf::rt::LazyV2<Table_ClusterState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Table_ClusterState::new)
    }
}

impl ::protobuf::Clear for Table_ClusterState {
    fn clear(&mut self) {
        self.replication_state = Table_ClusterState_ReplicationState::STATE_NOT_KNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Table_ClusterState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Table_ClusterState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Table_ClusterState_ReplicationState {
    STATE_NOT_KNOWN = 0,
    INITIALIZING = 1,
    PLANNED_MAINTENANCE = 2,
    UNPLANNED_MAINTENANCE = 3,
    READY = 4,
}

impl ::protobuf::ProtobufEnum for Table_ClusterState_ReplicationState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Table_ClusterState_ReplicationState> {
        match value {
            0 => ::std::option::Option::Some(Table_ClusterState_ReplicationState::STATE_NOT_KNOWN),
            1 => ::std::option::Option::Some(Table_ClusterState_ReplicationState::INITIALIZING),
            2 => ::std::option::Option::Some(Table_ClusterState_ReplicationState::PLANNED_MAINTENANCE),
            3 => ::std::option::Option::Some(Table_ClusterState_ReplicationState::UNPLANNED_MAINTENANCE),
            4 => ::std::option::Option::Some(Table_ClusterState_ReplicationState::READY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Table_ClusterState_ReplicationState] = &[
            Table_ClusterState_ReplicationState::STATE_NOT_KNOWN,
            Table_ClusterState_ReplicationState::INITIALIZING,
            Table_ClusterState_ReplicationState::PLANNED_MAINTENANCE,
            Table_ClusterState_ReplicationState::UNPLANNED_MAINTENANCE,
            Table_ClusterState_ReplicationState::READY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Table_ClusterState_ReplicationState>("Table.ClusterState.ReplicationState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Table_ClusterState_ReplicationState {
}

impl ::std::default::Default for Table_ClusterState_ReplicationState {
    fn default() -> Self {
        Table_ClusterState_ReplicationState::STATE_NOT_KNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Table_ClusterState_ReplicationState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Table_TimestampGranularity {
    TIMESTAMP_GRANULARITY_UNSPECIFIED = 0,
    MILLIS = 1,
}

impl ::protobuf::ProtobufEnum for Table_TimestampGranularity {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Table_TimestampGranularity> {
        match value {
            0 => ::std::option::Option::Some(Table_TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED),
            1 => ::std::option::Option::Some(Table_TimestampGranularity::MILLIS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Table_TimestampGranularity] = &[
            Table_TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED,
            Table_TimestampGranularity::MILLIS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Table_TimestampGranularity>("Table.TimestampGranularity", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Table_TimestampGranularity {
}

impl ::std::default::Default for Table_TimestampGranularity {
    fn default() -> Self {
        Table_TimestampGranularity::TIMESTAMP_GRANULARITY_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Table_TimestampGranularity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Table_View {
    VIEW_UNSPECIFIED = 0,
    NAME_ONLY = 1,
    SCHEMA_VIEW = 2,
    REPLICATION_VIEW = 3,
    FULL = 4,
}

impl ::protobuf::ProtobufEnum for Table_View {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Table_View> {
        match value {
            0 => ::std::option::Option::Some(Table_View::VIEW_UNSPECIFIED),
            1 => ::std::option::Option::Some(Table_View::NAME_ONLY),
            2 => ::std::option::Option::Some(Table_View::SCHEMA_VIEW),
            3 => ::std::option::Option::Some(Table_View::REPLICATION_VIEW),
            4 => ::std::option::Option::Some(Table_View::FULL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Table_View] = &[
            Table_View::VIEW_UNSPECIFIED,
            Table_View::NAME_ONLY,
            Table_View::SCHEMA_VIEW,
            Table_View::REPLICATION_VIEW,
            Table_View::FULL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Table_View>("Table.View", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Table_View {
}

impl ::std::default::Default for Table_View {
    fn default() -> Self {
        Table_View::VIEW_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Table_View {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ColumnFamily {
    // message fields
    pub gc_rule: ::protobuf::SingularPtrField<GcRule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ColumnFamily {
    fn default() -> &'a ColumnFamily {
        <ColumnFamily as ::protobuf::Message>::default_instance()
    }
}

impl ColumnFamily {
    pub fn new() -> ColumnFamily {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.GcRule gc_rule = 1;


    pub fn get_gc_rule(&self) -> &GcRule {
        self.gc_rule.as_ref().unwrap_or_else(|| <GcRule as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gc_rule(&mut self) {
        self.gc_rule.clear();
    }

    pub fn has_gc_rule(&self) -> bool {
        self.gc_rule.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_rule(&mut self, v: GcRule) {
        self.gc_rule = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gc_rule(&mut self) -> &mut GcRule {
        if self.gc_rule.is_none() {
            self.gc_rule.set_default();
        }
        self.gc_rule.as_mut().unwrap()
    }

    // Take field
    pub fn take_gc_rule(&mut self) -> GcRule {
        self.gc_rule.take().unwrap_or_else(|| GcRule::new())
    }
}

impl ::protobuf::Message for ColumnFamily {
    fn is_initialized(&self) -> bool {
        for v in &self.gc_rule {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gc_rule)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gc_rule.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gc_rule.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ColumnFamily {
        ColumnFamily::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GcRule>>(
                "gc_rule",
                |m: &ColumnFamily| { &m.gc_rule },
                |m: &mut ColumnFamily| { &mut m.gc_rule },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ColumnFamily>(
                "ColumnFamily",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ColumnFamily {
        static instance: ::protobuf::rt::LazyV2<ColumnFamily> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ColumnFamily::new)
    }
}

impl ::protobuf::Clear for ColumnFamily {
    fn clear(&mut self) {
        self.gc_rule.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ColumnFamily {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ColumnFamily {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GcRule {
    // message oneof groups
    pub rule: ::std::option::Option<GcRule_oneof_rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GcRule {
    fn default() -> &'a GcRule {
        <GcRule as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GcRule_oneof_rule {
    max_num_versions(i32),
    max_age(::protobuf::well_known_types::Duration),
    intersection(GcRule_Intersection),
    union(GcRule_Union),
}

impl GcRule {
    pub fn new() -> GcRule {
        ::std::default::Default::default()
    }

    // int32 max_num_versions = 1;


    pub fn get_max_num_versions(&self) -> i32 {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::max_num_versions(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_max_num_versions(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_max_num_versions(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::max_num_versions(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_max_num_versions(&mut self, v: i32) {
        self.rule = ::std::option::Option::Some(GcRule_oneof_rule::max_num_versions(v))
    }

    // .google.protobuf.Duration max_age = 2;


    pub fn get_max_age(&self) -> &::protobuf::well_known_types::Duration {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::max_age(ref v)) => v,
            _ => <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_max_age(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_max_age(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::max_age(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_max_age(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.rule = ::std::option::Option::Some(GcRule_oneof_rule::max_age(v))
    }

    // Mutable pointer to the field.
    pub fn mut_max_age(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if let ::std::option::Option::Some(GcRule_oneof_rule::max_age(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(GcRule_oneof_rule::max_age(::protobuf::well_known_types::Duration::new()));
        }
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::max_age(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_max_age(&mut self) -> ::protobuf::well_known_types::Duration {
        if self.has_max_age() {
            match self.rule.take() {
                ::std::option::Option::Some(GcRule_oneof_rule::max_age(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Duration::new()
        }
    }

    // .google.bigtable.admin.v2.GcRule.Intersection intersection = 3;


    pub fn get_intersection(&self) -> &GcRule_Intersection {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::intersection(ref v)) => v,
            _ => <GcRule_Intersection as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_intersection(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_intersection(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::intersection(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_intersection(&mut self, v: GcRule_Intersection) {
        self.rule = ::std::option::Option::Some(GcRule_oneof_rule::intersection(v))
    }

    // Mutable pointer to the field.
    pub fn mut_intersection(&mut self) -> &mut GcRule_Intersection {
        if let ::std::option::Option::Some(GcRule_oneof_rule::intersection(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(GcRule_oneof_rule::intersection(GcRule_Intersection::new()));
        }
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::intersection(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_intersection(&mut self) -> GcRule_Intersection {
        if self.has_intersection() {
            match self.rule.take() {
                ::std::option::Option::Some(GcRule_oneof_rule::intersection(v)) => v,
                _ => panic!(),
            }
        } else {
            GcRule_Intersection::new()
        }
    }

    // .google.bigtable.admin.v2.GcRule.Union union = 4;


    pub fn get_union(&self) -> &GcRule_Union {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::union(ref v)) => v,
            _ => <GcRule_Union as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_union(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_union(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::union(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_union(&mut self, v: GcRule_Union) {
        self.rule = ::std::option::Option::Some(GcRule_oneof_rule::union(v))
    }

    // Mutable pointer to the field.
    pub fn mut_union(&mut self) -> &mut GcRule_Union {
        if let ::std::option::Option::Some(GcRule_oneof_rule::union(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(GcRule_oneof_rule::union(GcRule_Union::new()));
        }
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::union(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_union(&mut self) -> GcRule_Union {
        if self.has_union() {
            match self.rule.take() {
                ::std::option::Option::Some(GcRule_oneof_rule::union(v)) => v,
                _ => panic!(),
            }
        } else {
            GcRule_Union::new()
        }
    }
}

impl ::protobuf::Message for GcRule {
    fn is_initialized(&self) -> bool {
        if let Some(GcRule_oneof_rule::max_age(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GcRule_oneof_rule::intersection(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GcRule_oneof_rule::union(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(GcRule_oneof_rule::max_num_versions(is.read_int32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(GcRule_oneof_rule::max_age(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(GcRule_oneof_rule::intersection(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(GcRule_oneof_rule::union(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &GcRule_oneof_rule::max_num_versions(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &GcRule_oneof_rule::max_age(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GcRule_oneof_rule::intersection(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GcRule_oneof_rule::union(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &GcRule_oneof_rule::max_num_versions(v) => {
                    os.write_int32(1, v)?;
                },
                &GcRule_oneof_rule::max_age(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GcRule_oneof_rule::intersection(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GcRule_oneof_rule::union(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GcRule {
        GcRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "max_num_versions",
                GcRule::has_max_num_versions,
                GcRule::get_max_num_versions,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Duration>(
                "max_age",
                GcRule::has_max_age,
                GcRule::get_max_age,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GcRule_Intersection>(
                "intersection",
                GcRule::has_intersection,
                GcRule::get_intersection,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GcRule_Union>(
                "union",
                GcRule::has_union,
                GcRule::get_union,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GcRule>(
                "GcRule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GcRule {
        static instance: ::protobuf::rt::LazyV2<GcRule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GcRule::new)
    }
}

impl ::protobuf::Clear for GcRule {
    fn clear(&mut self) {
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GcRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GcRule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GcRule_Intersection {
    // message fields
    pub rules: ::protobuf::RepeatedField<GcRule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GcRule_Intersection {
    fn default() -> &'a GcRule_Intersection {
        <GcRule_Intersection as ::protobuf::Message>::default_instance()
    }
}

impl GcRule_Intersection {
    pub fn new() -> GcRule_Intersection {
        ::std::default::Default::default()
    }

    // repeated .google.bigtable.admin.v2.GcRule rules = 1;


    pub fn get_rules(&self) -> &[GcRule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<GcRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<GcRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<GcRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GcRule_Intersection {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GcRule_Intersection {
        GcRule_Intersection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GcRule>>(
                "rules",
                |m: &GcRule_Intersection| { &m.rules },
                |m: &mut GcRule_Intersection| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GcRule_Intersection>(
                "GcRule.Intersection",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GcRule_Intersection {
        static instance: ::protobuf::rt::LazyV2<GcRule_Intersection> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GcRule_Intersection::new)
    }
}

impl ::protobuf::Clear for GcRule_Intersection {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GcRule_Intersection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GcRule_Intersection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GcRule_Union {
    // message fields
    pub rules: ::protobuf::RepeatedField<GcRule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GcRule_Union {
    fn default() -> &'a GcRule_Union {
        <GcRule_Union as ::protobuf::Message>::default_instance()
    }
}

impl GcRule_Union {
    pub fn new() -> GcRule_Union {
        ::std::default::Default::default()
    }

    // repeated .google.bigtable.admin.v2.GcRule rules = 1;


    pub fn get_rules(&self) -> &[GcRule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<GcRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<GcRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<GcRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GcRule_Union {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GcRule_Union {
        GcRule_Union::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GcRule>>(
                "rules",
                |m: &GcRule_Union| { &m.rules },
                |m: &mut GcRule_Union| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GcRule_Union>(
                "GcRule.Union",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GcRule_Union {
        static instance: ::protobuf::rt::LazyV2<GcRule_Union> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GcRule_Union::new)
    }
}

impl ::protobuf::Clear for GcRule_Union {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GcRule_Union {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GcRule_Union {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Snapshot {
    // message fields
    pub name: ::std::string::String,
    pub source_table: ::protobuf::SingularPtrField<Table>,
    pub data_size_bytes: i64,
    pub create_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub delete_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub state: Snapshot_State,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Snapshot {
    fn default() -> &'a Snapshot {
        <Snapshot as ::protobuf::Message>::default_instance()
    }
}

impl Snapshot {
    pub fn new() -> Snapshot {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.bigtable.admin.v2.Table source_table = 2;


    pub fn get_source_table(&self) -> &Table {
        self.source_table.as_ref().unwrap_or_else(|| <Table as ::protobuf::Message>::default_instance())
    }
    pub fn clear_source_table(&mut self) {
        self.source_table.clear();
    }

    pub fn has_source_table(&self) -> bool {
        self.source_table.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_table(&mut self, v: Table) {
        self.source_table = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_table(&mut self) -> &mut Table {
        if self.source_table.is_none() {
            self.source_table.set_default();
        }
        self.source_table.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_table(&mut self) -> Table {
        self.source_table.take().unwrap_or_else(|| Table::new())
    }

    // int64 data_size_bytes = 3;


    pub fn get_data_size_bytes(&self) -> i64 {
        self.data_size_bytes
    }
    pub fn clear_data_size_bytes(&mut self) {
        self.data_size_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_data_size_bytes(&mut self, v: i64) {
        self.data_size_bytes = v;
    }

    // .google.protobuf.Timestamp create_time = 4;


    pub fn get_create_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.create_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_create_time(&mut self) {
        self.create_time.clear();
    }

    pub fn has_create_time(&self) -> bool {
        self.create_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.create_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.create_time.is_none() {
            self.create_time.set_default();
        }
        self.create_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.create_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp delete_time = 5;


    pub fn get_delete_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.delete_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_delete_time(&mut self) {
        self.delete_time.clear();
    }

    pub fn has_delete_time(&self) -> bool {
        self.delete_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delete_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.delete_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delete_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.delete_time.is_none() {
            self.delete_time.set_default();
        }
        self.delete_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_delete_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.delete_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.bigtable.admin.v2.Snapshot.State state = 6;


    pub fn get_state(&self) -> Snapshot_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = Snapshot_State::STATE_NOT_KNOWN;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: Snapshot_State) {
        self.state = v;
    }

    // string description = 7;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Snapshot {
    fn is_initialized(&self) -> bool {
        for v in &self.source_table {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delete_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source_table)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.data_size_bytes = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_time)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.delete_time)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.source_table.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.data_size_bytes != 0 {
            my_size += ::protobuf::rt::value_size(3, self.data_size_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.create_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.delete_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.state != Snapshot_State::STATE_NOT_KNOWN {
            my_size += ::protobuf::rt::enum_size(6, self.state);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.source_table.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.data_size_bytes != 0 {
            os.write_int64(3, self.data_size_bytes)?;
        }
        if let Some(ref v) = self.create_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.delete_time.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.state != Snapshot_State::STATE_NOT_KNOWN {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if !self.description.is_empty() {
            os.write_string(7, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Snapshot {
        Snapshot::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Snapshot| { &m.name },
                |m: &mut Snapshot| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Table>>(
                "source_table",
                |m: &Snapshot| { &m.source_table },
                |m: &mut Snapshot| { &mut m.source_table },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "data_size_bytes",
                |m: &Snapshot| { &m.data_size_bytes },
                |m: &mut Snapshot| { &mut m.data_size_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "create_time",
                |m: &Snapshot| { &m.create_time },
                |m: &mut Snapshot| { &mut m.create_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "delete_time",
                |m: &Snapshot| { &m.delete_time },
                |m: &mut Snapshot| { &mut m.delete_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Snapshot_State>>(
                "state",
                |m: &Snapshot| { &m.state },
                |m: &mut Snapshot| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Snapshot| { &m.description },
                |m: &mut Snapshot| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Snapshot>(
                "Snapshot",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Snapshot {
        static instance: ::protobuf::rt::LazyV2<Snapshot> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Snapshot::new)
    }
}

impl ::protobuf::Clear for Snapshot {
    fn clear(&mut self) {
        self.name.clear();
        self.source_table.clear();
        self.data_size_bytes = 0;
        self.create_time.clear();
        self.delete_time.clear();
        self.state = Snapshot_State::STATE_NOT_KNOWN;
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Snapshot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Snapshot {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Snapshot_State {
    STATE_NOT_KNOWN = 0,
    READY = 1,
    CREATING = 2,
}

impl ::protobuf::ProtobufEnum for Snapshot_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Snapshot_State> {
        match value {
            0 => ::std::option::Option::Some(Snapshot_State::STATE_NOT_KNOWN),
            1 => ::std::option::Option::Some(Snapshot_State::READY),
            2 => ::std::option::Option::Some(Snapshot_State::CREATING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Snapshot_State] = &[
            Snapshot_State::STATE_NOT_KNOWN,
            Snapshot_State::READY,
            Snapshot_State::CREATING,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Snapshot_State>("Snapshot.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Snapshot_State {
}

impl ::std::default::Default for Snapshot_State {
    fn default() -> Self {
        Snapshot_State::STATE_NOT_KNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Snapshot_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$google/bigtable/admin/v2/table.proto\x12\x18google.bigtable.admin.v2\
    \x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobuf/duration.pro\
    to\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa7\x07\n\x05Table\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12Y\n\x0ecluster_states\x18\x02\
    \x20\x03(\x0b22.google.bigtable.admin.v2.Table.ClusterStatesEntryR\rclus\
    terStates\x12\\\n\x0fcolumn_families\x18\x03\x20\x03(\x0b23.google.bigta\
    ble.admin.v2.Table.ColumnFamiliesEntryR\x0ecolumnFamilies\x12V\n\x0bgran\
    ularity\x18\x04\x20\x01(\x0e24.google.bigtable.admin.v2.Table.TimestampG\
    ranularityR\x0bgranularity\x1a\xf4\x01\n\x0cClusterState\x12j\n\x11repli\
    cation_state\x18\x01\x20\x01(\x0e2=.google.bigtable.admin.v2.Table.Clust\
    erState.ReplicationStateR\x10replicationState\"x\n\x10ReplicationState\
    \x12\x13\n\x0fSTATE_NOT_KNOWN\x10\0\x12\x10\n\x0cINITIALIZING\x10\x01\
    \x12\x17\n\x13PLANNED_MAINTENANCE\x10\x02\x12\x19\n\x15UNPLANNED_MAINTEN\
    ANCE\x10\x03\x12\t\n\x05READY\x10\x04\x1an\n\x12ClusterStatesEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12B\n\x05value\x18\x02\x20\x01\
    (\x0b2,.google.bigtable.admin.v2.Table.ClusterStateR\x05value:\x028\x01\
    \x1ai\n\x13ColumnFamiliesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03k\
    ey\x12<\n\x05value\x18\x02\x20\x01(\x0b2&.google.bigtable.admin.v2.Colum\
    nFamilyR\x05value:\x028\x01\"I\n\x14TimestampGranularity\x12%\n!TIMESTAM\
    P_GRANULARITY_UNSPECIFIED\x10\0\x12\n\n\x06MILLIS\x10\x01\"\\\n\x04View\
    \x12\x14\n\x10VIEW_UNSPECIFIED\x10\0\x12\r\n\tNAME_ONLY\x10\x01\x12\x0f\
    \n\x0bSCHEMA_VIEW\x10\x02\x12\x14\n\x10REPLICATION_VIEW\x10\x03\x12\x08\
    \n\x04FULL\x10\x04\"I\n\x0cColumnFamily\x129\n\x07gc_rule\x18\x01\x20\
    \x01(\x0b2\x20.google.bigtable.admin.v2.GcRuleR\x06gcRule\"\x90\x03\n\
    \x06GcRule\x12*\n\x10max_num_versions\x18\x01\x20\x01(\x05H\0R\x0emaxNum\
    Versions\x124\n\x07max_age\x18\x02\x20\x01(\x0b2\x19.google.protobuf.Dur\
    ationH\0R\x06maxAge\x12S\n\x0cintersection\x18\x03\x20\x01(\x0b2-.google\
    .bigtable.admin.v2.GcRule.IntersectionH\0R\x0cintersection\x12>\n\x05uni\
    on\x18\x04\x20\x01(\x0b2&.google.bigtable.admin.v2.GcRule.UnionH\0R\x05u\
    nion\x1aF\n\x0cIntersection\x126\n\x05rules\x18\x01\x20\x03(\x0b2\x20.go\
    ogle.bigtable.admin.v2.GcRuleR\x05rules\x1a?\n\x05Union\x126\n\x05rules\
    \x18\x01\x20\x03(\x0b2\x20.google.bigtable.admin.v2.GcRuleR\x05rulesB\
    \x06\n\x04rule\"\x9d\x03\n\x08Snapshot\x12\x12\n\x04name\x18\x01\x20\x01\
    (\tR\x04name\x12B\n\x0csource_table\x18\x02\x20\x01(\x0b2\x1f.google.big\
    table.admin.v2.TableR\x0bsourceTable\x12&\n\x0fdata_size_bytes\x18\x03\
    \x20\x01(\x03R\rdataSizeBytes\x12;\n\x0bcreate_time\x18\x04\x20\x01(\x0b\
    2\x1a.google.protobuf.TimestampR\ncreateTime\x12;\n\x0bdelete_time\x18\
    \x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ndeleteTime\x12>\n\x05\
    state\x18\x06\x20\x01(\x0e2(.google.bigtable.admin.v2.Snapshot.StateR\
    \x05state\x12\x20\n\x0bdescription\x18\x07\x20\x01(\tR\x0bdescription\"5\
    \n\x05State\x12\x13\n\x0fSTATE_NOT_KNOWN\x10\0\x12\t\n\x05READY\x10\x01\
    \x12\x0c\n\x08CREATING\x10\x02B\xad\x01\n\x1ccom.google.bigtable.admin.v\
    2B\nTableProtoP\x01Z=google.golang.org/genproto/googleapis/bigtable/admi\
    n/v2;admin\xaa\x02\x1eGoogle.Cloud.Bigtable.Admin.V2\xca\x02\x1eGoogle\\\
    Cloud\\Bigtable\\Admin\\V2J\xb4A\n\x07\x12\x05\x0f\0\xdb\x01\x01\n\xbe\
    \x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202018\x20Google\
    \x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Versio\
    n\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\
    \x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\
    \x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20w\
    riting,\x20software\n\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WA\
    RRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\
    \x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0!\n\t\n\x02\x03\0\
    \x12\x03\x13\0&\n\t\n\x02\x03\x01\x12\x03\x14\0(\n\t\n\x02\x03\x02\x12\
    \x03\x15\0)\n\x08\n\x01\x08\x12\x03\x17\0;\n\t\n\x02\x08%\x12\x03\x17\0;\
    \n\x08\n\x01\x08\x12\x03\x18\0T\n\t\n\x02\x08\x0b\x12\x03\x18\0T\n\x08\n\
    \x01\x08\x12\x03\x19\0\"\n\t\n\x02\x08\n\x12\x03\x19\0\"\n\x08\n\x01\x08\
    \x12\x03\x1a\0+\n\t\n\x02\x08\x08\x12\x03\x1a\0+\n\x08\n\x01\x08\x12\x03\
    \x1b\05\n\t\n\x02\x08\x01\x12\x03\x1b\05\n\x08\n\x01\x08\x12\x03\x1c\0<\
    \n\t\n\x02\x08)\x12\x03\x1c\0<\n\x90\x01\n\x02\x04\0\x12\x04\x20\0w\x01\
    \x1a\x83\x01\x20A\x20collection\x20of\x20user\x20data\x20indexed\x20by\
    \x20row,\x20column,\x20and\x20timestamp.\n\x20Each\x20table\x20is\x20ser\
    ved\x20using\x20the\x20resources\x20of\x20its\x20parent\x20cluster.\n\n\
    \n\n\x03\x04\0\x01\x12\x03\x20\x08\r\nD\n\x04\x04\0\x03\0\x12\x04\"\x02>\
    \x03\x1a6\x20The\x20state\x20of\x20a\x20table's\x20data\x20in\x20a\x20pa\
    rticular\x20cluster.\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\"\n\x16\n+\n\
    \x06\x04\0\x03\0\x04\0\x12\x04$\x049\x05\x1a\x1b\x20Table\x20replication\
    \x20states.\n\n\x0e\n\x07\x04\0\x03\0\x04\0\x01\x12\x03$\t\x19\nQ\n\x08\
    \x04\0\x03\0\x04\0\x02\0\x12\x03&\x06\x1a\x1a@\x20The\x20replication\x20\
    state\x20of\x20the\x20table\x20is\x20unknown\x20in\x20this\x20cluster.\n\
    \n\x10\n\t\x04\0\x03\0\x04\0\x02\0\x01\x12\x03&\x06\x15\n\x10\n\t\x04\0\
    \x03\0\x04\0\x02\0\x02\x12\x03&\x18\x19\n\xda\x01\n\x08\x04\0\x03\0\x04\
    \0\x02\x01\x12\x03+\x06\x17\x1a\xc8\x01\x20The\x20cluster\x20was\x20rece\
    ntly\x20created,\x20and\x20the\x20table\x20must\x20finish\x20copying\n\
    \x20over\x20pre-existing\x20data\x20from\x20other\x20clusters\x20before\
    \x20it\x20can\x20begin\n\x20receiving\x20live\x20replication\x20updates\
    \x20and\x20serving\x20Data\x20API\x20requests.\n\n\x10\n\t\x04\0\x03\0\
    \x04\0\x02\x01\x01\x12\x03+\x06\x12\n\x10\n\t\x04\0\x03\0\x04\0\x02\x01\
    \x02\x12\x03+\x15\x16\n\x85\x01\n\x08\x04\0\x03\0\x04\0\x02\x02\x12\x03/\
    \x06\x1e\x1at\x20The\x20table\x20is\x20temporarily\x20unable\x20to\x20se\
    rve\x20Data\x20API\x20requests\x20from\x20this\n\x20cluster\x20due\x20to\
    \x20planned\x20internal\x20maintenance.\n\n\x10\n\t\x04\0\x03\0\x04\0\
    \x02\x02\x01\x12\x03/\x06\x19\n\x10\n\t\x04\0\x03\0\x04\0\x02\x02\x02\
    \x12\x03/\x1c\x1d\n\x8b\x01\n\x08\x04\0\x03\0\x04\0\x02\x03\x12\x033\x06\
    \x20\x1az\x20The\x20table\x20is\x20temporarily\x20unable\x20to\x20serve\
    \x20Data\x20API\x20requests\x20from\x20this\n\x20cluster\x20due\x20to\
    \x20unplanned\x20or\x20emergency\x20maintenance.\n\n\x10\n\t\x04\0\x03\0\
    \x04\0\x02\x03\x01\x12\x033\x06\x1b\n\x10\n\t\x04\0\x03\0\x04\0\x02\x03\
    \x02\x12\x033\x1e\x1f\n\xba\x01\n\x08\x04\0\x03\0\x04\0\x02\x04\x12\x038\
    \x06\x10\x1a\xa8\x01\x20The\x20table\x20can\x20serve\x20Data\x20API\x20r\
    equests\x20from\x20this\x20cluster.\x20Depending\x20on\n\x20replication\
    \x20delay,\x20reads\x20may\x20not\x20immediately\x20reflect\x20the\x20st\
    ate\x20of\x20the\n\x20table\x20in\x20other\x20clusters.\n\n\x10\n\t\x04\
    \0\x03\0\x04\0\x02\x04\x01\x12\x038\x06\x0b\n\x10\n\t\x04\0\x03\0\x04\0\
    \x02\x04\x02\x12\x038\x0e\x0f\nX\n\x06\x04\0\x03\0\x02\0\x12\x03=\x04+\
    \x1aI\x20(`OutputOnly`)\n\x20The\x20state\x20of\x20replication\x20for\
    \x20the\x20table\x20in\x20this\x20cluster.\n\n\x0f\n\x07\x04\0\x03\0\x02\
    \0\x04\x12\x04=\x049\x05\n\x0e\n\x07\x04\0\x03\0\x02\0\x06\x12\x03=\x04\
    \x14\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03=\x15&\n\x0e\n\x07\x04\0\
    \x03\0\x02\0\x03\x12\x03=)*\nk\n\x04\x04\0\x04\0\x12\x04B\x02I\x03\x1a]\
    \x20Possible\x20timestamp\x20granularities\x20to\x20use\x20when\x20keepi\
    ng\x20multiple\x20versions\n\x20of\x20data\x20in\x20a\x20table.\n\n\x0c\
    \n\x05\x04\0\x04\0\x01\x12\x03B\x07\x1b\n\x8c\x01\n\x06\x04\0\x04\0\x02\
    \0\x12\x03E\x04*\x1a}\x20The\x20user\x20did\x20not\x20specify\x20a\x20gr\
    anularity.\x20Should\x20not\x20be\x20returned.\n\x20When\x20specified\
    \x20during\x20table\x20creation,\x20MILLIS\x20will\x20be\x20used.\n\n\
    \x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03E\x04%\n\x0e\n\x07\x04\0\x04\0\
    \x02\0\x02\x12\x03E()\nH\n\x06\x04\0\x04\0\x02\x01\x12\x03H\x04\x0f\x1a9\
    \x20The\x20table\x20keeps\x20data\x20versioned\x20at\x20a\x20granularity\
    \x20of\x201ms.\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03H\x04\n\n\
    \x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03H\r\x0e\n5\n\x04\x04\0\x04\x01\
    \x12\x04L\x02\\\x03\x1a'\x20Defines\x20a\x20view\x20over\x20a\x20table's\
    \x20fields.\n\n\x0c\n\x05\x04\0\x04\x01\x01\x12\x03L\x07\x0b\nT\n\x06\
    \x04\0\x04\x01\x02\0\x12\x03N\x04\x19\x1aE\x20Uses\x20the\x20default\x20\
    view\x20for\x20each\x20method\x20as\x20documented\x20in\x20its\x20reques\
    t.\n\n\x0e\n\x07\x04\0\x04\x01\x02\0\x01\x12\x03N\x04\x14\n\x0e\n\x07\
    \x04\0\x04\x01\x02\0\x02\x12\x03N\x17\x18\n'\n\x06\x04\0\x04\x01\x02\x01\
    \x12\x03Q\x04\x12\x1a\x18\x20Only\x20populates\x20`name`.\n\n\x0e\n\x07\
    \x04\0\x04\x01\x02\x01\x01\x12\x03Q\x04\r\n\x0e\n\x07\x04\0\x04\x01\x02\
    \x01\x02\x12\x03Q\x10\x11\nP\n\x06\x04\0\x04\x01\x02\x02\x12\x03T\x04\
    \x14\x1aA\x20Only\x20populates\x20`name`\x20and\x20fields\x20related\x20\
    to\x20the\x20table's\x20schema.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x02\x01\
    \x12\x03T\x04\x0f\n\x0e\n\x07\x04\0\x04\x01\x02\x02\x02\x12\x03T\x12\x13\
    \n\\\n\x06\x04\0\x04\x01\x02\x03\x12\x03X\x04\x19\x1aM\x20Only\x20popula\
    tes\x20`name`\x20and\x20fields\x20related\x20to\x20the\x20table's\n\x20r\
    eplication\x20state.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x03\x01\x12\x03X\
    \x04\x14\n\x0e\n\x07\x04\0\x04\x01\x02\x03\x02\x12\x03X\x17\x18\n&\n\x06\
    \x04\0\x04\x01\x02\x04\x12\x03[\x04\r\x1a\x17\x20Populates\x20all\x20fie\
    lds.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x04\x01\x12\x03[\x04\x08\n\x0e\n\
    \x07\x04\0\x04\x01\x02\x04\x02\x12\x03[\x0b\x0c\n\xe2\x01\n\x04\x04\0\
    \x02\0\x12\x03b\x02\x12\x1a\xd4\x01\x20(`OutputOnly`)\n\x20The\x20unique\
    \x20name\x20of\x20the\x20table.\x20Values\x20are\x20of\x20the\x20form\n\
    \x20`projects/<project>/instances/<instance>/tables/[_a-zA-Z0-9][-_.a-zA\
    -Z0-9]*`.\n\x20Views:\x20`NAME_ONLY`,\x20`SCHEMA_VIEW`,\x20`REPLICATION_\
    VIEW`,\x20`FULL`\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04b\x02\\\x03\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03b\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03b\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03b\x10\x11\n\xc7\x02\n\x04\
    \x04\0\x02\x01\x12\x03j\x02/\x1a\xb9\x02\x20(`OutputOnly`)\n\x20Map\x20f\
    rom\x20cluster\x20ID\x20to\x20per-cluster\x20table\x20state.\n\x20If\x20\
    it\x20could\x20not\x20be\x20determined\x20whether\x20or\x20not\x20the\
    \x20table\x20has\x20data\x20in\x20a\n\x20particular\x20cluster\x20(for\
    \x20example,\x20if\x20its\x20zone\x20is\x20unavailable),\x20then\n\x20th\
    ere\x20will\x20be\x20an\x20entry\x20for\x20the\x20cluster\x20with\x20UNK\
    NOWN\x20`replication_status`.\n\x20Views:\x20`REPLICATION_VIEW`,\x20`FUL\
    L`\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04j\x02b\x12\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03j\x02\x1b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03j\x1c*\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03j-.\n\x89\x01\n\x04\x04\0\x02\x02\
    \x12\x03o\x020\x1a|\x20(`CreationOnly`)\n\x20The\x20column\x20families\
    \x20configured\x20for\x20this\x20table,\x20mapped\x20by\x20column\x20fam\
    ily\x20ID.\n\x20Views:\x20`SCHEMA_VIEW`,\x20`FULL`\n\n\r\n\x05\x04\0\x02\
    \x02\x04\x12\x04o\x02j/\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03o\x02\x1b\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03o\x1c+\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03o./\n\x8d\x02\n\x04\x04\0\x02\x03\x12\x03v\x02'\x1a\xff\x01\x20(\
    `CreationOnly`)\n\x20The\x20granularity\x20(i.e.\x20`MILLIS`)\x20at\x20w\
    hich\x20timestamps\x20are\x20stored\x20in\n\x20this\x20table.\x20Timesta\
    mps\x20not\x20matching\x20the\x20granularity\x20will\x20be\x20rejected.\
    \n\x20If\x20unspecified\x20at\x20creation\x20time,\x20the\x20value\x20wi\
    ll\x20be\x20set\x20to\x20`MILLIS`.\n\x20Views:\x20`SCHEMA_VIEW`,\x20`FUL\
    L`\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04v\x02o0\n\x0c\n\x05\x04\0\x02\
    \x03\x06\x12\x03v\x02\x16\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03v\x17\"\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03v%&\nR\n\x02\x04\x01\x12\x05z\0\x82\
    \x01\x01\x1aE\x20A\x20set\x20of\x20columns\x20within\x20a\x20table\x20wh\
    ich\x20share\x20a\x20common\x20configuration.\n\n\n\n\x03\x04\x01\x01\
    \x12\x03z\x08\x14\n\x9e\x02\n\x04\x04\x01\x02\0\x12\x04\x81\x01\x02\x15\
    \x1a\x8f\x02\x20Garbage\x20collection\x20rule\x20specified\x20as\x20a\
    \x20protobuf.\n\x20Must\x20serialize\x20to\x20at\x20most\x20500\x20bytes\
    .\n\n\x20NOTE:\x20Garbage\x20collection\x20executes\x20opportunistically\
    \x20in\x20the\x20background,\x20and\n\x20so\x20it's\x20possible\x20for\
    \x20reads\x20to\x20return\x20a\x20cell\x20even\x20if\x20it\x20matches\
    \x20the\x20active\n\x20GC\x20expression\x20for\x20its\x20family.\n\n\x0e\
    \n\x05\x04\x01\x02\0\x04\x12\x05\x81\x01\x02z\x16\n\r\n\x05\x04\x01\x02\
    \0\x06\x12\x04\x81\x01\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x81\
    \x01\t\x10\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\x81\x01\x13\x14\nU\n\x02\
    \x04\x02\x12\x06\x85\x01\0\xa2\x01\x01\x1aG\x20Rule\x20for\x20determinin\
    g\x20which\x20cells\x20to\x20delete\x20during\x20garbage\x20collection.\
    \n\n\x0b\n\x03\x04\x02\x01\x12\x04\x85\x01\x08\x0e\nO\n\x04\x04\x02\x03\
    \0\x12\x06\x87\x01\x02\x8a\x01\x03\x1a?\x20A\x20GcRule\x20which\x20delet\
    es\x20cells\x20matching\x20all\x20of\x20the\x20given\x20rules.\n\n\r\n\
    \x05\x04\x02\x03\0\x01\x12\x04\x87\x01\n\x16\nW\n\x06\x04\x02\x03\0\x02\
    \0\x12\x04\x89\x01\x04\x1e\x1aG\x20Only\x20delete\x20cells\x20which\x20w\
    ould\x20be\x20deleted\x20by\x20every\x20element\x20of\x20`rules`.\n\n\
    \x0f\n\x07\x04\x02\x03\0\x02\0\x04\x12\x04\x89\x01\x04\x0c\n\x0f\n\x07\
    \x04\x02\x03\0\x02\0\x06\x12\x04\x89\x01\r\x13\n\x0f\n\x07\x04\x02\x03\0\
    \x02\0\x01\x12\x04\x89\x01\x14\x19\n\x0f\n\x07\x04\x02\x03\0\x02\0\x03\
    \x12\x04\x89\x01\x1c\x1d\nO\n\x04\x04\x02\x03\x01\x12\x06\x8d\x01\x02\
    \x90\x01\x03\x1a?\x20A\x20GcRule\x20which\x20deletes\x20cells\x20matchin\
    g\x20any\x20of\x20the\x20given\x20rules.\n\n\r\n\x05\x04\x02\x03\x01\x01\
    \x12\x04\x8d\x01\n\x0f\nP\n\x06\x04\x02\x03\x01\x02\0\x12\x04\x8f\x01\
    \x04\x1e\x1a@\x20Delete\x20cells\x20which\x20would\x20be\x20deleted\x20b\
    y\x20any\x20element\x20of\x20`rules`.\n\n\x0f\n\x07\x04\x02\x03\x01\x02\
    \0\x04\x12\x04\x8f\x01\x04\x0c\n\x0f\n\x07\x04\x02\x03\x01\x02\0\x06\x12\
    \x04\x8f\x01\r\x13\n\x0f\n\x07\x04\x02\x03\x01\x02\0\x01\x12\x04\x8f\x01\
    \x14\x19\n\x0f\n\x07\x04\x02\x03\x01\x02\0\x03\x12\x04\x8f\x01\x1c\x1d\n\
    +\n\x04\x04\x02\x08\0\x12\x06\x93\x01\x02\xa1\x01\x03\x1a\x1b\x20Garbage\
    \x20collection\x20rules.\n\n\r\n\x05\x04\x02\x08\0\x01\x12\x04\x93\x01\
    \x08\x0c\nF\n\x04\x04\x02\x02\0\x12\x04\x95\x01\x04\x1f\x1a8\x20Delete\
    \x20all\x20cells\x20in\x20a\x20column\x20except\x20the\x20most\x20recent\
    \x20N.\n\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\x95\x01\x04\t\n\r\n\x05\x04\
    \x02\x02\0\x01\x12\x04\x95\x01\n\x1a\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\
    \x95\x01\x1d\x1e\n\xa0\x01\n\x04\x04\x02\x02\x01\x12\x04\x9a\x01\x04)\
    \x1a\x91\x01\x20Delete\x20cells\x20in\x20a\x20column\x20older\x20than\
    \x20the\x20given\x20age.\n\x20Values\x20must\x20be\x20at\x20least\x20one\
    \x20millisecond,\x20and\x20will\x20be\x20truncated\x20to\n\x20microsecon\
    d\x20granularity.\n\n\r\n\x05\x04\x02\x02\x01\x06\x12\x04\x9a\x01\x04\
    \x1c\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x9a\x01\x1d$\n\r\n\x05\x04\
    \x02\x02\x01\x03\x12\x04\x9a\x01'(\nH\n\x04\x04\x02\x02\x02\x12\x04\x9d\
    \x01\x04\"\x1a:\x20Delete\x20cells\x20that\x20would\x20be\x20deleted\x20\
    by\x20every\x20nested\x20rule.\n\n\r\n\x05\x04\x02\x02\x02\x06\x12\x04\
    \x9d\x01\x04\x10\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\x9d\x01\x11\x1d\n\
    \r\n\x05\x04\x02\x02\x02\x03\x12\x04\x9d\x01\x20!\nF\n\x04\x04\x02\x02\
    \x03\x12\x04\xa0\x01\x04\x14\x1a8\x20Delete\x20cells\x20that\x20would\
    \x20be\x20deleted\x20by\x20any\x20nested\x20rule.\n\n\r\n\x05\x04\x02\
    \x02\x03\x06\x12\x04\xa0\x01\x04\t\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\
    \xa0\x01\n\x0f\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\xa0\x01\x12\x13\n\
    \xc8\x03\n\x02\x04\x03\x12\x06\xab\x01\0\xdb\x01\x01\x1a\xb9\x03\x20A\
    \x20snapshot\x20of\x20a\x20table\x20at\x20a\x20particular\x20time.\x20A\
    \x20snapshot\x20can\x20be\x20used\x20as\x20a\n\x20checkpoint\x20for\x20d\
    ata\x20restoration\x20or\x20a\x20data\x20source\x20for\x20a\x20new\x20ta\
    ble.\n\n\x20Note:\x20This\x20is\x20a\x20private\x20alpha\x20release\x20o\
    f\x20Cloud\x20Bigtable\x20snapshots.\x20This\n\x20feature\x20is\x20not\
    \x20currently\x20available\x20to\x20most\x20Cloud\x20Bigtable\x20custome\
    rs.\x20This\n\x20feature\x20might\x20be\x20changed\x20in\x20backward-inc\
    ompatible\x20ways\x20and\x20is\x20not\x20recommended\n\x20for\x20product\
    ion\x20use.\x20It\x20is\x20not\x20subject\x20to\x20any\x20SLA\x20or\x20d\
    eprecation\x20policy.\n\n\x0b\n\x03\x04\x03\x01\x12\x04\xab\x01\x08\x10\
    \n0\n\x04\x04\x03\x04\0\x12\x06\xad\x01\x02\xb8\x01\x03\x1a\x20\x20Possi\
    ble\x20states\x20of\x20a\x20snapshot.\n\n\r\n\x05\x04\x03\x04\0\x01\x12\
    \x04\xad\x01\x07\x0c\nD\n\x06\x04\x03\x04\0\x02\0\x12\x04\xaf\x01\x04\
    \x18\x1a4\x20The\x20state\x20of\x20the\x20snapshot\x20could\x20not\x20be\
    \x20determined.\n\n\x0f\n\x07\x04\x03\x04\0\x02\0\x01\x12\x04\xaf\x01\
    \x04\x13\n\x0f\n\x07\x04\x03\x04\0\x02\0\x02\x12\x04\xaf\x01\x16\x17\nX\
    \n\x06\x04\x03\x04\0\x02\x01\x12\x04\xb2\x01\x04\x0e\x1aH\x20The\x20snap\
    shot\x20has\x20been\x20successfully\x20created\x20and\x20can\x20serve\
    \x20all\x20requests.\n\n\x0f\n\x07\x04\x03\x04\0\x02\x01\x01\x12\x04\xb2\
    \x01\x04\t\n\x0f\n\x07\x04\x03\x04\0\x02\x01\x02\x12\x04\xb2\x01\x0c\r\n\
    \xc4\x01\n\x06\x04\x03\x04\0\x02\x02\x12\x04\xb7\x01\x04\x11\x1a\xb3\x01\
    \x20The\x20snapshot\x20is\x20currently\x20being\x20created,\x20and\x20ma\
    y\x20be\x20destroyed\x20if\x20the\n\x20creation\x20process\x20encounters\
    \x20an\x20error.\x20A\x20snapshot\x20may\x20not\x20be\x20restored\x20to\
    \x20a\n\x20table\x20while\x20it\x20is\x20being\x20created.\n\n\x0f\n\x07\
    \x04\x03\x04\0\x02\x02\x01\x12\x04\xb7\x01\x04\x0c\n\x0f\n\x07\x04\x03\
    \x04\0\x02\x02\x02\x12\x04\xb7\x01\x0f\x10\n\xad\x01\n\x04\x04\x03\x02\0\
    \x12\x04\xbe\x01\x02\x12\x1a\x9e\x01\x20(`OutputOnly`)\n\x20The\x20uniqu\
    e\x20name\x20of\x20the\x20snapshot.\n\x20Values\x20are\x20of\x20the\x20f\
    orm\n\x20`projects/<project>/instances/<instance>/clusters/<cluster>/sna\
    pshots/<snapshot>`.\n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\xbe\x01\x02\
    \xb8\x01\x03\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\xbe\x01\x02\x08\n\r\n\
    \x05\x04\x03\x02\0\x01\x12\x04\xbe\x01\t\r\n\r\n\x05\x04\x03\x02\0\x03\
    \x12\x04\xbe\x01\x10\x11\nT\n\x04\x04\x03\x02\x01\x12\x04\xc2\x01\x02\
    \x19\x1aF\x20(`OutputOnly`)\n\x20The\x20source\x20table\x20at\x20the\x20\
    time\x20the\x20snapshot\x20was\x20taken.\n\n\x0f\n\x05\x04\x03\x02\x01\
    \x04\x12\x06\xc2\x01\x02\xbe\x01\x12\n\r\n\x05\x04\x03\x02\x01\x06\x12\
    \x04\xc2\x01\x02\x07\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xc2\x01\x08\
    \x14\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xc2\x01\x17\x18\n\xf6\x01\n\
    \x04\x04\x03\x02\x02\x12\x04\xc8\x01\x02\x1c\x1a\xe7\x01\x20(`OutputOnly\
    `)\n\x20The\x20size\x20of\x20the\x20data\x20in\x20the\x20source\x20table\
    \x20at\x20the\x20time\x20the\x20snapshot\x20was\n\x20taken.\x20In\x20som\
    e\x20cases,\x20this\x20value\x20may\x20be\x20computed\x20asynchronously\
    \x20via\x20a\n\x20background\x20process\x20and\x20a\x20placeholder\x20of\
    \x200\x20will\x20be\x20used\x20in\x20the\x20meantime.\n\n\x0f\n\x05\x04\
    \x03\x02\x02\x04\x12\x06\xc8\x01\x02\xc2\x01\x19\n\r\n\x05\x04\x03\x02\
    \x02\x05\x12\x04\xc8\x01\x02\x07\n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\
    \xc8\x01\x08\x17\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\xc8\x01\x1a\x1b\n\
    F\n\x04\x04\x03\x02\x03\x12\x04\xcc\x01\x02,\x1a8\x20(`OutputOnly`)\n\
    \x20The\x20time\x20when\x20the\x20snapshot\x20is\x20created.\n\n\x0f\n\
    \x05\x04\x03\x02\x03\x04\x12\x06\xcc\x01\x02\xc8\x01\x1c\n\r\n\x05\x04\
    \x03\x02\x03\x06\x12\x04\xcc\x01\x02\x1b\n\r\n\x05\x04\x03\x02\x03\x01\
    \x12\x04\xcc\x01\x1c'\n\r\n\x05\x04\x03\x02\x03\x03\x12\x04\xcc\x01*+\n\
    \xda\x01\n\x04\x04\x03\x02\x04\x12\x04\xd2\x01\x02,\x1a\xcb\x01\x20(`Out\
    putOnly`)\n\x20The\x20time\x20when\x20the\x20snapshot\x20will\x20be\x20d\
    eleted.\x20The\x20maximum\x20amount\x20of\x20time\x20a\n\x20snapshot\x20\
    can\x20stay\x20active\x20is\x20365\x20days.\x20If\x20'ttl'\x20is\x20not\
    \x20specified,\n\x20the\x20default\x20maximum\x20of\x20365\x20days\x20wi\
    ll\x20be\x20used.\n\n\x0f\n\x05\x04\x03\x02\x04\x04\x12\x06\xd2\x01\x02\
    \xcc\x01,\n\r\n\x05\x04\x03\x02\x04\x06\x12\x04\xd2\x01\x02\x1b\n\r\n\
    \x05\x04\x03\x02\x04\x01\x12\x04\xd2\x01\x1c'\n\r\n\x05\x04\x03\x02\x04\
    \x03\x12\x04\xd2\x01*+\nB\n\x04\x04\x03\x02\x05\x12\x04\xd6\x01\x02\x12\
    \x1a4\x20(`OutputOnly`)\n\x20The\x20current\x20state\x20of\x20the\x20sna\
    pshot.\n\n\x0f\n\x05\x04\x03\x02\x05\x04\x12\x06\xd6\x01\x02\xd2\x01,\n\
    \r\n\x05\x04\x03\x02\x05\x06\x12\x04\xd6\x01\x02\x07\n\r\n\x05\x04\x03\
    \x02\x05\x01\x12\x04\xd6\x01\x08\r\n\r\n\x05\x04\x03\x02\x05\x03\x12\x04\
    \xd6\x01\x10\x11\n<\n\x04\x04\x03\x02\x06\x12\x04\xda\x01\x02\x19\x1a.\
    \x20(`OutputOnly`)\n\x20Description\x20of\x20the\x20snapshot.\n\n\x0f\n\
    \x05\x04\x03\x02\x06\x04\x12\x06\xda\x01\x02\xd6\x01\x12\n\r\n\x05\x04\
    \x03\x02\x06\x05\x12\x04\xda\x01\x02\x08\n\r\n\x05\x04\x03\x02\x06\x01\
    \x12\x04\xda\x01\t\x14\n\r\n\x05\x04\x03\x02\x06\x03\x12\x04\xda\x01\x17\
    \x18b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
