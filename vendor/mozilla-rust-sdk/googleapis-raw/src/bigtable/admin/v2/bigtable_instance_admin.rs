// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/bigtable/admin/v2/bigtable_instance_admin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct CreateInstanceRequest {
    // message fields
    pub parent: ::std::string::String,
    pub instance_id: ::std::string::String,
    pub instance: ::protobuf::SingularPtrField<super::instance::Instance>,
    pub clusters: ::std::collections::HashMap<::std::string::String, super::instance::Cluster>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInstanceRequest {
    fn default() -> &'a CreateInstanceRequest {
        <CreateInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceRequest {
    pub fn new() -> CreateInstanceRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string instance_id = 2;


    pub fn get_instance_id(&self) -> &str {
        &self.instance_id
    }
    pub fn clear_instance_id(&mut self) {
        self.instance_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_id(&mut self, v: ::std::string::String) {
        self.instance_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_id(&mut self) -> &mut ::std::string::String {
        &mut self.instance_id
    }

    // Take field
    pub fn take_instance_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_id, ::std::string::String::new())
    }

    // .google.bigtable.admin.v2.Instance instance = 3;


    pub fn get_instance(&self) -> &super::instance::Instance {
        self.instance.as_ref().unwrap_or_else(|| <super::instance::Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: super::instance::Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut super::instance::Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> super::instance::Instance {
        self.instance.take().unwrap_or_else(|| super::instance::Instance::new())
    }

    // repeated .google.bigtable.admin.v2.CreateInstanceRequest.ClustersEntry clusters = 4;


    pub fn get_clusters(&self) -> &::std::collections::HashMap<::std::string::String, super::instance::Cluster> {
        &self.clusters
    }
    pub fn clear_clusters(&mut self) {
        self.clusters.clear();
    }

    // Param is passed by value, moved
    pub fn set_clusters(&mut self, v: ::std::collections::HashMap<::std::string::String, super::instance::Cluster>) {
        self.clusters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clusters(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::instance::Cluster> {
        &mut self.clusters
    }

    // Take field
    pub fn take_clusters(&mut self) -> ::std::collections::HashMap<::std::string::String, super::instance::Cluster> {
        ::std::mem::replace(&mut self.clusters, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for CreateInstanceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(wire_type, is, &mut self.clusters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.instance_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.instance_id);
        }
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(4, &self.clusters);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.instance_id.is_empty() {
            os.write_string(2, &self.instance_id)?;
        }
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(4, &self.clusters, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInstanceRequest {
        CreateInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateInstanceRequest| { &m.parent },
                |m: &mut CreateInstanceRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_id",
                |m: &CreateInstanceRequest| { &m.instance_id },
                |m: &mut CreateInstanceRequest| { &mut m.instance_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Instance>>(
                "instance",
                |m: &CreateInstanceRequest| { &m.instance },
                |m: &mut CreateInstanceRequest| { &mut m.instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(
                "clusters",
                |m: &CreateInstanceRequest| { &m.clusters },
                |m: &mut CreateInstanceRequest| { &mut m.clusters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateInstanceRequest>(
                "CreateInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<CreateInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateInstanceRequest::new)
    }
}

impl ::protobuf::Clear for CreateInstanceRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.instance_id.clear();
        self.instance.clear();
        self.clusters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetInstanceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetInstanceRequest {
    fn default() -> &'a GetInstanceRequest {
        <GetInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetInstanceRequest {
    pub fn new() -> GetInstanceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetInstanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetInstanceRequest {
        GetInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetInstanceRequest| { &m.name },
                |m: &mut GetInstanceRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetInstanceRequest>(
                "GetInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<GetInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetInstanceRequest::new)
    }
}

impl ::protobuf::Clear for GetInstanceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstancesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstancesRequest {
    fn default() -> &'a ListInstancesRequest {
        <ListInstancesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInstancesRequest {
    pub fn new() -> ListInstancesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string page_token = 2;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstancesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(2, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstancesRequest {
        ListInstancesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListInstancesRequest| { &m.parent },
                |m: &mut ListInstancesRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListInstancesRequest| { &m.page_token },
                |m: &mut ListInstancesRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstancesRequest>(
                "ListInstancesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstancesRequest {
        static instance: ::protobuf::rt::LazyV2<ListInstancesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstancesRequest::new)
    }
}

impl ::protobuf::Clear for ListInstancesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstancesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstancesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstancesResponse {
    // message fields
    pub instances: ::protobuf::RepeatedField<super::instance::Instance>,
    pub failed_locations: ::protobuf::RepeatedField<::std::string::String>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstancesResponse {
    fn default() -> &'a ListInstancesResponse {
        <ListInstancesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListInstancesResponse {
    pub fn new() -> ListInstancesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.bigtable.admin.v2.Instance instances = 1;


    pub fn get_instances(&self) -> &[super::instance::Instance] {
        &self.instances
    }
    pub fn clear_instances(&mut self) {
        self.instances.clear();
    }

    // Param is passed by value, moved
    pub fn set_instances(&mut self, v: ::protobuf::RepeatedField<super::instance::Instance>) {
        self.instances = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instances(&mut self) -> &mut ::protobuf::RepeatedField<super::instance::Instance> {
        &mut self.instances
    }

    // Take field
    pub fn take_instances(&mut self) -> ::protobuf::RepeatedField<super::instance::Instance> {
        ::std::mem::replace(&mut self.instances, ::protobuf::RepeatedField::new())
    }

    // repeated string failed_locations = 2;


    pub fn get_failed_locations(&self) -> &[::std::string::String] {
        &self.failed_locations
    }
    pub fn clear_failed_locations(&mut self) {
        self.failed_locations.clear();
    }

    // Param is passed by value, moved
    pub fn set_failed_locations(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.failed_locations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_failed_locations(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.failed_locations
    }

    // Take field
    pub fn take_failed_locations(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.failed_locations, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 3;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstancesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.instances {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instances)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.failed_locations)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.instances {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.failed_locations {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.instances {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.failed_locations {
            os.write_string(2, &v)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(3, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstancesResponse {
        ListInstancesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Instance>>(
                "instances",
                |m: &ListInstancesResponse| { &m.instances },
                |m: &mut ListInstancesResponse| { &mut m.instances },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "failed_locations",
                |m: &ListInstancesResponse| { &m.failed_locations },
                |m: &mut ListInstancesResponse| { &mut m.failed_locations },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListInstancesResponse| { &m.next_page_token },
                |m: &mut ListInstancesResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstancesResponse>(
                "ListInstancesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstancesResponse {
        static instance: ::protobuf::rt::LazyV2<ListInstancesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstancesResponse::new)
    }
}

impl ::protobuf::Clear for ListInstancesResponse {
    fn clear(&mut self) {
        self.instances.clear();
        self.failed_locations.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstancesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstancesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartialUpdateInstanceRequest {
    // message fields
    pub instance: ::protobuf::SingularPtrField<super::instance::Instance>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartialUpdateInstanceRequest {
    fn default() -> &'a PartialUpdateInstanceRequest {
        <PartialUpdateInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl PartialUpdateInstanceRequest {
    pub fn new() -> PartialUpdateInstanceRequest {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.Instance instance = 1;


    pub fn get_instance(&self) -> &super::instance::Instance {
        self.instance.as_ref().unwrap_or_else(|| <super::instance::Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: super::instance::Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut super::instance::Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> super::instance::Instance {
        self.instance.take().unwrap_or_else(|| super::instance::Instance::new())
    }

    // .google.protobuf.FieldMask update_mask = 2;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for PartialUpdateInstanceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartialUpdateInstanceRequest {
        PartialUpdateInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Instance>>(
                "instance",
                |m: &PartialUpdateInstanceRequest| { &m.instance },
                |m: &mut PartialUpdateInstanceRequest| { &mut m.instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &PartialUpdateInstanceRequest| { &m.update_mask },
                |m: &mut PartialUpdateInstanceRequest| { &mut m.update_mask },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartialUpdateInstanceRequest>(
                "PartialUpdateInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PartialUpdateInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<PartialUpdateInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PartialUpdateInstanceRequest::new)
    }
}

impl ::protobuf::Clear for PartialUpdateInstanceRequest {
    fn clear(&mut self) {
        self.instance.clear();
        self.update_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartialUpdateInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartialUpdateInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteInstanceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteInstanceRequest {
    fn default() -> &'a DeleteInstanceRequest {
        <DeleteInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteInstanceRequest {
    pub fn new() -> DeleteInstanceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteInstanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteInstanceRequest {
        DeleteInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteInstanceRequest| { &m.name },
                |m: &mut DeleteInstanceRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteInstanceRequest>(
                "DeleteInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteInstanceRequest::new)
    }
}

impl ::protobuf::Clear for DeleteInstanceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateClusterRequest {
    // message fields
    pub parent: ::std::string::String,
    pub cluster_id: ::std::string::String,
    pub cluster: ::protobuf::SingularPtrField<super::instance::Cluster>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateClusterRequest {
    fn default() -> &'a CreateClusterRequest {
        <CreateClusterRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateClusterRequest {
    pub fn new() -> CreateClusterRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string cluster_id = 2;


    pub fn get_cluster_id(&self) -> &str {
        &self.cluster_id
    }
    pub fn clear_cluster_id(&mut self) {
        self.cluster_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: ::std::string::String) {
        self.cluster_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_id(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_id
    }

    // Take field
    pub fn take_cluster_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_id, ::std::string::String::new())
    }

    // .google.bigtable.admin.v2.Cluster cluster = 3;


    pub fn get_cluster(&self) -> &super::instance::Cluster {
        self.cluster.as_ref().unwrap_or_else(|| <super::instance::Cluster as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cluster(&mut self) {
        self.cluster.clear();
    }

    pub fn has_cluster(&self) -> bool {
        self.cluster.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: super::instance::Cluster) {
        self.cluster = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster(&mut self) -> &mut super::instance::Cluster {
        if self.cluster.is_none() {
            self.cluster.set_default();
        }
        self.cluster.as_mut().unwrap()
    }

    // Take field
    pub fn take_cluster(&mut self) -> super::instance::Cluster {
        self.cluster.take().unwrap_or_else(|| super::instance::Cluster::new())
    }
}

impl ::protobuf::Message for CreateClusterRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.cluster {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cluster)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.cluster_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cluster_id);
        }
        if let Some(ref v) = self.cluster.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.cluster_id.is_empty() {
            os.write_string(2, &self.cluster_id)?;
        }
        if let Some(ref v) = self.cluster.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateClusterRequest {
        CreateClusterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateClusterRequest| { &m.parent },
                |m: &mut CreateClusterRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_id",
                |m: &CreateClusterRequest| { &m.cluster_id },
                |m: &mut CreateClusterRequest| { &mut m.cluster_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(
                "cluster",
                |m: &CreateClusterRequest| { &m.cluster },
                |m: &mut CreateClusterRequest| { &mut m.cluster },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateClusterRequest>(
                "CreateClusterRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateClusterRequest {
        static instance: ::protobuf::rt::LazyV2<CreateClusterRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateClusterRequest::new)
    }
}

impl ::protobuf::Clear for CreateClusterRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.cluster_id.clear();
        self.cluster.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateClusterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateClusterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetClusterRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetClusterRequest {
    fn default() -> &'a GetClusterRequest {
        <GetClusterRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetClusterRequest {
    pub fn new() -> GetClusterRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetClusterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetClusterRequest {
        GetClusterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetClusterRequest| { &m.name },
                |m: &mut GetClusterRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetClusterRequest>(
                "GetClusterRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetClusterRequest {
        static instance: ::protobuf::rt::LazyV2<GetClusterRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetClusterRequest::new)
    }
}

impl ::protobuf::Clear for GetClusterRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetClusterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetClusterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListClustersRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListClustersRequest {
    fn default() -> &'a ListClustersRequest {
        <ListClustersRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListClustersRequest {
    pub fn new() -> ListClustersRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string page_token = 2;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListClustersRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(2, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListClustersRequest {
        ListClustersRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListClustersRequest| { &m.parent },
                |m: &mut ListClustersRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListClustersRequest| { &m.page_token },
                |m: &mut ListClustersRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListClustersRequest>(
                "ListClustersRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListClustersRequest {
        static instance: ::protobuf::rt::LazyV2<ListClustersRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListClustersRequest::new)
    }
}

impl ::protobuf::Clear for ListClustersRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListClustersRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListClustersRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListClustersResponse {
    // message fields
    pub clusters: ::protobuf::RepeatedField<super::instance::Cluster>,
    pub failed_locations: ::protobuf::RepeatedField<::std::string::String>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListClustersResponse {
    fn default() -> &'a ListClustersResponse {
        <ListClustersResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListClustersResponse {
    pub fn new() -> ListClustersResponse {
        ::std::default::Default::default()
    }

    // repeated .google.bigtable.admin.v2.Cluster clusters = 1;


    pub fn get_clusters(&self) -> &[super::instance::Cluster] {
        &self.clusters
    }
    pub fn clear_clusters(&mut self) {
        self.clusters.clear();
    }

    // Param is passed by value, moved
    pub fn set_clusters(&mut self, v: ::protobuf::RepeatedField<super::instance::Cluster>) {
        self.clusters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clusters(&mut self) -> &mut ::protobuf::RepeatedField<super::instance::Cluster> {
        &mut self.clusters
    }

    // Take field
    pub fn take_clusters(&mut self) -> ::protobuf::RepeatedField<super::instance::Cluster> {
        ::std::mem::replace(&mut self.clusters, ::protobuf::RepeatedField::new())
    }

    // repeated string failed_locations = 2;


    pub fn get_failed_locations(&self) -> &[::std::string::String] {
        &self.failed_locations
    }
    pub fn clear_failed_locations(&mut self) {
        self.failed_locations.clear();
    }

    // Param is passed by value, moved
    pub fn set_failed_locations(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.failed_locations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_failed_locations(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.failed_locations
    }

    // Take field
    pub fn take_failed_locations(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.failed_locations, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 3;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListClustersResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.clusters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.clusters)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.failed_locations)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.clusters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.failed_locations {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.clusters {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.failed_locations {
            os.write_string(2, &v)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(3, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListClustersResponse {
        ListClustersResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(
                "clusters",
                |m: &ListClustersResponse| { &m.clusters },
                |m: &mut ListClustersResponse| { &mut m.clusters },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "failed_locations",
                |m: &ListClustersResponse| { &m.failed_locations },
                |m: &mut ListClustersResponse| { &mut m.failed_locations },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListClustersResponse| { &m.next_page_token },
                |m: &mut ListClustersResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListClustersResponse>(
                "ListClustersResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListClustersResponse {
        static instance: ::protobuf::rt::LazyV2<ListClustersResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListClustersResponse::new)
    }
}

impl ::protobuf::Clear for ListClustersResponse {
    fn clear(&mut self) {
        self.clusters.clear();
        self.failed_locations.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListClustersResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListClustersResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteClusterRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteClusterRequest {
    fn default() -> &'a DeleteClusterRequest {
        <DeleteClusterRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteClusterRequest {
    pub fn new() -> DeleteClusterRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteClusterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteClusterRequest {
        DeleteClusterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteClusterRequest| { &m.name },
                |m: &mut DeleteClusterRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteClusterRequest>(
                "DeleteClusterRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteClusterRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteClusterRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteClusterRequest::new)
    }
}

impl ::protobuf::Clear for DeleteClusterRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteClusterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteClusterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateInstanceMetadata {
    // message fields
    pub original_request: ::protobuf::SingularPtrField<CreateInstanceRequest>,
    pub request_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub finish_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInstanceMetadata {
    fn default() -> &'a CreateInstanceMetadata {
        <CreateInstanceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceMetadata {
    pub fn new() -> CreateInstanceMetadata {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.CreateInstanceRequest original_request = 1;


    pub fn get_original_request(&self) -> &CreateInstanceRequest {
        self.original_request.as_ref().unwrap_or_else(|| <CreateInstanceRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_original_request(&mut self) {
        self.original_request.clear();
    }

    pub fn has_original_request(&self) -> bool {
        self.original_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_request(&mut self, v: CreateInstanceRequest) {
        self.original_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_request(&mut self) -> &mut CreateInstanceRequest {
        if self.original_request.is_none() {
            self.original_request.set_default();
        }
        self.original_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_request(&mut self) -> CreateInstanceRequest {
        self.original_request.take().unwrap_or_else(|| CreateInstanceRequest::new())
    }

    // .google.protobuf.Timestamp request_time = 2;


    pub fn get_request_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.request_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_time(&mut self) {
        self.request_time.clear();
    }

    pub fn has_request_time(&self) -> bool {
        self.request_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.request_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.request_time.is_none() {
            self.request_time.set_default();
        }
        self.request_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.request_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp finish_time = 3;


    pub fn get_finish_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.finish_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_finish_time(&mut self) {
        self.finish_time.clear();
    }

    pub fn has_finish_time(&self) -> bool {
        self.finish_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.finish_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_finish_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.finish_time.is_none() {
            self.finish_time.set_default();
        }
        self.finish_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_finish_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.finish_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for CreateInstanceMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.original_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.finish_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.original_request)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.finish_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.original_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.original_request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInstanceMetadata {
        CreateInstanceMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateInstanceRequest>>(
                "original_request",
                |m: &CreateInstanceMetadata| { &m.original_request },
                |m: &mut CreateInstanceMetadata| { &mut m.original_request },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "request_time",
                |m: &CreateInstanceMetadata| { &m.request_time },
                |m: &mut CreateInstanceMetadata| { &mut m.request_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "finish_time",
                |m: &CreateInstanceMetadata| { &m.finish_time },
                |m: &mut CreateInstanceMetadata| { &mut m.finish_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateInstanceMetadata>(
                "CreateInstanceMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateInstanceMetadata {
        static instance: ::protobuf::rt::LazyV2<CreateInstanceMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateInstanceMetadata::new)
    }
}

impl ::protobuf::Clear for CreateInstanceMetadata {
    fn clear(&mut self) {
        self.original_request.clear();
        self.request_time.clear();
        self.finish_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInstanceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateInstanceMetadata {
    // message fields
    pub original_request: ::protobuf::SingularPtrField<PartialUpdateInstanceRequest>,
    pub request_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub finish_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateInstanceMetadata {
    fn default() -> &'a UpdateInstanceMetadata {
        <UpdateInstanceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInstanceMetadata {
    pub fn new() -> UpdateInstanceMetadata {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.PartialUpdateInstanceRequest original_request = 1;


    pub fn get_original_request(&self) -> &PartialUpdateInstanceRequest {
        self.original_request.as_ref().unwrap_or_else(|| <PartialUpdateInstanceRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_original_request(&mut self) {
        self.original_request.clear();
    }

    pub fn has_original_request(&self) -> bool {
        self.original_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_request(&mut self, v: PartialUpdateInstanceRequest) {
        self.original_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_request(&mut self) -> &mut PartialUpdateInstanceRequest {
        if self.original_request.is_none() {
            self.original_request.set_default();
        }
        self.original_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_request(&mut self) -> PartialUpdateInstanceRequest {
        self.original_request.take().unwrap_or_else(|| PartialUpdateInstanceRequest::new())
    }

    // .google.protobuf.Timestamp request_time = 2;


    pub fn get_request_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.request_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_time(&mut self) {
        self.request_time.clear();
    }

    pub fn has_request_time(&self) -> bool {
        self.request_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.request_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.request_time.is_none() {
            self.request_time.set_default();
        }
        self.request_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.request_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp finish_time = 3;


    pub fn get_finish_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.finish_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_finish_time(&mut self) {
        self.finish_time.clear();
    }

    pub fn has_finish_time(&self) -> bool {
        self.finish_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.finish_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_finish_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.finish_time.is_none() {
            self.finish_time.set_default();
        }
        self.finish_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_finish_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.finish_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for UpdateInstanceMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.original_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.finish_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.original_request)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.finish_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.original_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.original_request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateInstanceMetadata {
        UpdateInstanceMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PartialUpdateInstanceRequest>>(
                "original_request",
                |m: &UpdateInstanceMetadata| { &m.original_request },
                |m: &mut UpdateInstanceMetadata| { &mut m.original_request },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "request_time",
                |m: &UpdateInstanceMetadata| { &m.request_time },
                |m: &mut UpdateInstanceMetadata| { &mut m.request_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "finish_time",
                |m: &UpdateInstanceMetadata| { &m.finish_time },
                |m: &mut UpdateInstanceMetadata| { &mut m.finish_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateInstanceMetadata>(
                "UpdateInstanceMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateInstanceMetadata {
        static instance: ::protobuf::rt::LazyV2<UpdateInstanceMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateInstanceMetadata::new)
    }
}

impl ::protobuf::Clear for UpdateInstanceMetadata {
    fn clear(&mut self) {
        self.original_request.clear();
        self.request_time.clear();
        self.finish_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateInstanceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInstanceMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateClusterMetadata {
    // message fields
    pub original_request: ::protobuf::SingularPtrField<CreateClusterRequest>,
    pub request_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub finish_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateClusterMetadata {
    fn default() -> &'a CreateClusterMetadata {
        <CreateClusterMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CreateClusterMetadata {
    pub fn new() -> CreateClusterMetadata {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.CreateClusterRequest original_request = 1;


    pub fn get_original_request(&self) -> &CreateClusterRequest {
        self.original_request.as_ref().unwrap_or_else(|| <CreateClusterRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_original_request(&mut self) {
        self.original_request.clear();
    }

    pub fn has_original_request(&self) -> bool {
        self.original_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_request(&mut self, v: CreateClusterRequest) {
        self.original_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_request(&mut self) -> &mut CreateClusterRequest {
        if self.original_request.is_none() {
            self.original_request.set_default();
        }
        self.original_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_request(&mut self) -> CreateClusterRequest {
        self.original_request.take().unwrap_or_else(|| CreateClusterRequest::new())
    }

    // .google.protobuf.Timestamp request_time = 2;


    pub fn get_request_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.request_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_time(&mut self) {
        self.request_time.clear();
    }

    pub fn has_request_time(&self) -> bool {
        self.request_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.request_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.request_time.is_none() {
            self.request_time.set_default();
        }
        self.request_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.request_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp finish_time = 3;


    pub fn get_finish_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.finish_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_finish_time(&mut self) {
        self.finish_time.clear();
    }

    pub fn has_finish_time(&self) -> bool {
        self.finish_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.finish_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_finish_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.finish_time.is_none() {
            self.finish_time.set_default();
        }
        self.finish_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_finish_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.finish_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for CreateClusterMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.original_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.finish_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.original_request)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.finish_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.original_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.original_request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateClusterMetadata {
        CreateClusterMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateClusterRequest>>(
                "original_request",
                |m: &CreateClusterMetadata| { &m.original_request },
                |m: &mut CreateClusterMetadata| { &mut m.original_request },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "request_time",
                |m: &CreateClusterMetadata| { &m.request_time },
                |m: &mut CreateClusterMetadata| { &mut m.request_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "finish_time",
                |m: &CreateClusterMetadata| { &m.finish_time },
                |m: &mut CreateClusterMetadata| { &mut m.finish_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateClusterMetadata>(
                "CreateClusterMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateClusterMetadata {
        static instance: ::protobuf::rt::LazyV2<CreateClusterMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateClusterMetadata::new)
    }
}

impl ::protobuf::Clear for CreateClusterMetadata {
    fn clear(&mut self) {
        self.original_request.clear();
        self.request_time.clear();
        self.finish_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateClusterMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateClusterMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateClusterMetadata {
    // message fields
    pub original_request: ::protobuf::SingularPtrField<super::instance::Cluster>,
    pub request_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub finish_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateClusterMetadata {
    fn default() -> &'a UpdateClusterMetadata {
        <UpdateClusterMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateClusterMetadata {
    pub fn new() -> UpdateClusterMetadata {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.Cluster original_request = 1;


    pub fn get_original_request(&self) -> &super::instance::Cluster {
        self.original_request.as_ref().unwrap_or_else(|| <super::instance::Cluster as ::protobuf::Message>::default_instance())
    }
    pub fn clear_original_request(&mut self) {
        self.original_request.clear();
    }

    pub fn has_original_request(&self) -> bool {
        self.original_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_request(&mut self, v: super::instance::Cluster) {
        self.original_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_request(&mut self) -> &mut super::instance::Cluster {
        if self.original_request.is_none() {
            self.original_request.set_default();
        }
        self.original_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_request(&mut self) -> super::instance::Cluster {
        self.original_request.take().unwrap_or_else(|| super::instance::Cluster::new())
    }

    // .google.protobuf.Timestamp request_time = 2;


    pub fn get_request_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.request_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_time(&mut self) {
        self.request_time.clear();
    }

    pub fn has_request_time(&self) -> bool {
        self.request_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.request_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.request_time.is_none() {
            self.request_time.set_default();
        }
        self.request_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.request_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp finish_time = 3;


    pub fn get_finish_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.finish_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_finish_time(&mut self) {
        self.finish_time.clear();
    }

    pub fn has_finish_time(&self) -> bool {
        self.finish_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.finish_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_finish_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.finish_time.is_none() {
            self.finish_time.set_default();
        }
        self.finish_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_finish_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.finish_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for UpdateClusterMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.original_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.finish_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.original_request)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.finish_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.original_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.original_request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateClusterMetadata {
        UpdateClusterMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(
                "original_request",
                |m: &UpdateClusterMetadata| { &m.original_request },
                |m: &mut UpdateClusterMetadata| { &mut m.original_request },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "request_time",
                |m: &UpdateClusterMetadata| { &m.request_time },
                |m: &mut UpdateClusterMetadata| { &mut m.request_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "finish_time",
                |m: &UpdateClusterMetadata| { &m.finish_time },
                |m: &mut UpdateClusterMetadata| { &mut m.finish_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateClusterMetadata>(
                "UpdateClusterMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateClusterMetadata {
        static instance: ::protobuf::rt::LazyV2<UpdateClusterMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateClusterMetadata::new)
    }
}

impl ::protobuf::Clear for UpdateClusterMetadata {
    fn clear(&mut self) {
        self.original_request.clear();
        self.request_time.clear();
        self.finish_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateClusterMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateClusterMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateAppProfileRequest {
    // message fields
    pub parent: ::std::string::String,
    pub app_profile_id: ::std::string::String,
    pub app_profile: ::protobuf::SingularPtrField<super::instance::AppProfile>,
    pub ignore_warnings: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateAppProfileRequest {
    fn default() -> &'a CreateAppProfileRequest {
        <CreateAppProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateAppProfileRequest {
    pub fn new() -> CreateAppProfileRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string app_profile_id = 2;


    pub fn get_app_profile_id(&self) -> &str {
        &self.app_profile_id
    }
    pub fn clear_app_profile_id(&mut self) {
        self.app_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_profile_id(&mut self, v: ::std::string::String) {
        self.app_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_profile_id(&mut self) -> &mut ::std::string::String {
        &mut self.app_profile_id
    }

    // Take field
    pub fn take_app_profile_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app_profile_id, ::std::string::String::new())
    }

    // .google.bigtable.admin.v2.AppProfile app_profile = 3;


    pub fn get_app_profile(&self) -> &super::instance::AppProfile {
        self.app_profile.as_ref().unwrap_or_else(|| <super::instance::AppProfile as ::protobuf::Message>::default_instance())
    }
    pub fn clear_app_profile(&mut self) {
        self.app_profile.clear();
    }

    pub fn has_app_profile(&self) -> bool {
        self.app_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_profile(&mut self, v: super::instance::AppProfile) {
        self.app_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_profile(&mut self) -> &mut super::instance::AppProfile {
        if self.app_profile.is_none() {
            self.app_profile.set_default();
        }
        self.app_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_profile(&mut self) -> super::instance::AppProfile {
        self.app_profile.take().unwrap_or_else(|| super::instance::AppProfile::new())
    }

    // bool ignore_warnings = 4;


    pub fn get_ignore_warnings(&self) -> bool {
        self.ignore_warnings
    }
    pub fn clear_ignore_warnings(&mut self) {
        self.ignore_warnings = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_warnings(&mut self, v: bool) {
        self.ignore_warnings = v;
    }
}

impl ::protobuf::Message for CreateAppProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.app_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app_profile_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.app_profile)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_warnings = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.app_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.app_profile_id);
        }
        if let Some(ref v) = self.app_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.ignore_warnings != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.app_profile_id.is_empty() {
            os.write_string(2, &self.app_profile_id)?;
        }
        if let Some(ref v) = self.app_profile.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.ignore_warnings != false {
            os.write_bool(4, self.ignore_warnings)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAppProfileRequest {
        CreateAppProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateAppProfileRequest| { &m.parent },
                |m: &mut CreateAppProfileRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app_profile_id",
                |m: &CreateAppProfileRequest| { &m.app_profile_id },
                |m: &mut CreateAppProfileRequest| { &mut m.app_profile_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::AppProfile>>(
                "app_profile",
                |m: &CreateAppProfileRequest| { &m.app_profile },
                |m: &mut CreateAppProfileRequest| { &mut m.app_profile },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_warnings",
                |m: &CreateAppProfileRequest| { &m.ignore_warnings },
                |m: &mut CreateAppProfileRequest| { &mut m.ignore_warnings },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateAppProfileRequest>(
                "CreateAppProfileRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateAppProfileRequest {
        static instance: ::protobuf::rt::LazyV2<CreateAppProfileRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateAppProfileRequest::new)
    }
}

impl ::protobuf::Clear for CreateAppProfileRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.app_profile_id.clear();
        self.app_profile.clear();
        self.ignore_warnings = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAppProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAppProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetAppProfileRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetAppProfileRequest {
    fn default() -> &'a GetAppProfileRequest {
        <GetAppProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAppProfileRequest {
    pub fn new() -> GetAppProfileRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetAppProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetAppProfileRequest {
        GetAppProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetAppProfileRequest| { &m.name },
                |m: &mut GetAppProfileRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetAppProfileRequest>(
                "GetAppProfileRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetAppProfileRequest {
        static instance: ::protobuf::rt::LazyV2<GetAppProfileRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetAppProfileRequest::new)
    }
}

impl ::protobuf::Clear for GetAppProfileRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetAppProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAppProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListAppProfilesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAppProfilesRequest {
    fn default() -> &'a ListAppProfilesRequest {
        <ListAppProfilesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListAppProfilesRequest {
    pub fn new() -> ListAppProfilesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 2;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListAppProfilesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(2, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAppProfilesRequest {
        ListAppProfilesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListAppProfilesRequest| { &m.parent },
                |m: &mut ListAppProfilesRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListAppProfilesRequest| { &m.page_size },
                |m: &mut ListAppProfilesRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListAppProfilesRequest| { &m.page_token },
                |m: &mut ListAppProfilesRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListAppProfilesRequest>(
                "ListAppProfilesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListAppProfilesRequest {
        static instance: ::protobuf::rt::LazyV2<ListAppProfilesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListAppProfilesRequest::new)
    }
}

impl ::protobuf::Clear for ListAppProfilesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAppProfilesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAppProfilesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListAppProfilesResponse {
    // message fields
    pub app_profiles: ::protobuf::RepeatedField<super::instance::AppProfile>,
    pub next_page_token: ::std::string::String,
    pub failed_locations: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAppProfilesResponse {
    fn default() -> &'a ListAppProfilesResponse {
        <ListAppProfilesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListAppProfilesResponse {
    pub fn new() -> ListAppProfilesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.bigtable.admin.v2.AppProfile app_profiles = 1;


    pub fn get_app_profiles(&self) -> &[super::instance::AppProfile] {
        &self.app_profiles
    }
    pub fn clear_app_profiles(&mut self) {
        self.app_profiles.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_profiles(&mut self, v: ::protobuf::RepeatedField<super::instance::AppProfile>) {
        self.app_profiles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_app_profiles(&mut self) -> &mut ::protobuf::RepeatedField<super::instance::AppProfile> {
        &mut self.app_profiles
    }

    // Take field
    pub fn take_app_profiles(&mut self) -> ::protobuf::RepeatedField<super::instance::AppProfile> {
        ::std::mem::replace(&mut self.app_profiles, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }

    // repeated string failed_locations = 3;


    pub fn get_failed_locations(&self) -> &[::std::string::String] {
        &self.failed_locations
    }
    pub fn clear_failed_locations(&mut self) {
        self.failed_locations.clear();
    }

    // Param is passed by value, moved
    pub fn set_failed_locations(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.failed_locations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_failed_locations(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.failed_locations
    }

    // Take field
    pub fn take_failed_locations(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.failed_locations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListAppProfilesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.app_profiles {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.app_profiles)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.failed_locations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.app_profiles {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        for value in &self.failed_locations {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.app_profiles {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        for v in &self.failed_locations {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAppProfilesResponse {
        ListAppProfilesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::AppProfile>>(
                "app_profiles",
                |m: &ListAppProfilesResponse| { &m.app_profiles },
                |m: &mut ListAppProfilesResponse| { &mut m.app_profiles },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListAppProfilesResponse| { &m.next_page_token },
                |m: &mut ListAppProfilesResponse| { &mut m.next_page_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "failed_locations",
                |m: &ListAppProfilesResponse| { &m.failed_locations },
                |m: &mut ListAppProfilesResponse| { &mut m.failed_locations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListAppProfilesResponse>(
                "ListAppProfilesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListAppProfilesResponse {
        static instance: ::protobuf::rt::LazyV2<ListAppProfilesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListAppProfilesResponse::new)
    }
}

impl ::protobuf::Clear for ListAppProfilesResponse {
    fn clear(&mut self) {
        self.app_profiles.clear();
        self.next_page_token.clear();
        self.failed_locations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAppProfilesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAppProfilesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateAppProfileRequest {
    // message fields
    pub app_profile: ::protobuf::SingularPtrField<super::instance::AppProfile>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    pub ignore_warnings: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateAppProfileRequest {
    fn default() -> &'a UpdateAppProfileRequest {
        <UpdateAppProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateAppProfileRequest {
    pub fn new() -> UpdateAppProfileRequest {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.AppProfile app_profile = 1;


    pub fn get_app_profile(&self) -> &super::instance::AppProfile {
        self.app_profile.as_ref().unwrap_or_else(|| <super::instance::AppProfile as ::protobuf::Message>::default_instance())
    }
    pub fn clear_app_profile(&mut self) {
        self.app_profile.clear();
    }

    pub fn has_app_profile(&self) -> bool {
        self.app_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_profile(&mut self, v: super::instance::AppProfile) {
        self.app_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_profile(&mut self) -> &mut super::instance::AppProfile {
        if self.app_profile.is_none() {
            self.app_profile.set_default();
        }
        self.app_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_profile(&mut self) -> super::instance::AppProfile {
        self.app_profile.take().unwrap_or_else(|| super::instance::AppProfile::new())
    }

    // .google.protobuf.FieldMask update_mask = 2;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }

    // bool ignore_warnings = 3;


    pub fn get_ignore_warnings(&self) -> bool {
        self.ignore_warnings
    }
    pub fn clear_ignore_warnings(&mut self) {
        self.ignore_warnings = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_warnings(&mut self, v: bool) {
        self.ignore_warnings = v;
    }
}

impl ::protobuf::Message for UpdateAppProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.app_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.app_profile)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_warnings = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.app_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.ignore_warnings != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.app_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.ignore_warnings != false {
            os.write_bool(3, self.ignore_warnings)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateAppProfileRequest {
        UpdateAppProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::AppProfile>>(
                "app_profile",
                |m: &UpdateAppProfileRequest| { &m.app_profile },
                |m: &mut UpdateAppProfileRequest| { &mut m.app_profile },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &UpdateAppProfileRequest| { &m.update_mask },
                |m: &mut UpdateAppProfileRequest| { &mut m.update_mask },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_warnings",
                |m: &UpdateAppProfileRequest| { &m.ignore_warnings },
                |m: &mut UpdateAppProfileRequest| { &mut m.ignore_warnings },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateAppProfileRequest>(
                "UpdateAppProfileRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateAppProfileRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateAppProfileRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateAppProfileRequest::new)
    }
}

impl ::protobuf::Clear for UpdateAppProfileRequest {
    fn clear(&mut self) {
        self.app_profile.clear();
        self.update_mask.clear();
        self.ignore_warnings = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateAppProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateAppProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteAppProfileRequest {
    // message fields
    pub name: ::std::string::String,
    pub ignore_warnings: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteAppProfileRequest {
    fn default() -> &'a DeleteAppProfileRequest {
        <DeleteAppProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteAppProfileRequest {
    pub fn new() -> DeleteAppProfileRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bool ignore_warnings = 2;


    pub fn get_ignore_warnings(&self) -> bool {
        self.ignore_warnings
    }
    pub fn clear_ignore_warnings(&mut self) {
        self.ignore_warnings = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_warnings(&mut self, v: bool) {
        self.ignore_warnings = v;
    }
}

impl ::protobuf::Message for DeleteAppProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_warnings = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.ignore_warnings != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.ignore_warnings != false {
            os.write_bool(2, self.ignore_warnings)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteAppProfileRequest {
        DeleteAppProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteAppProfileRequest| { &m.name },
                |m: &mut DeleteAppProfileRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_warnings",
                |m: &DeleteAppProfileRequest| { &m.ignore_warnings },
                |m: &mut DeleteAppProfileRequest| { &mut m.ignore_warnings },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteAppProfileRequest>(
                "DeleteAppProfileRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteAppProfileRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteAppProfileRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteAppProfileRequest::new)
    }
}

impl ::protobuf::Clear for DeleteAppProfileRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.ignore_warnings = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteAppProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteAppProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateAppProfileMetadata {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateAppProfileMetadata {
    fn default() -> &'a UpdateAppProfileMetadata {
        <UpdateAppProfileMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateAppProfileMetadata {
    pub fn new() -> UpdateAppProfileMetadata {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UpdateAppProfileMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateAppProfileMetadata {
        UpdateAppProfileMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateAppProfileMetadata>(
                "UpdateAppProfileMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateAppProfileMetadata {
        static instance: ::protobuf::rt::LazyV2<UpdateAppProfileMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateAppProfileMetadata::new)
    }
}

impl ::protobuf::Clear for UpdateAppProfileMetadata {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateAppProfileMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateAppProfileMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n6google/bigtable/admin/v2/bigtable_instance_admin.proto\x12\x18google.\
    bigtable.admin.v2\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/\
    client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/re\
    source.proto\x1a'google/bigtable/admin/v2/instance.proto\x1a\x1egoogle/i\
    am/v1/iam_policy.proto\x1a\x1agoogle/iam/v1/policy.proto\x1a#google/long\
    running/operations.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x20googl\
    e/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8f\
    \x03\n\x15CreateInstanceRequest\x12K\n\x06parent\x18\x01\x20\x01(\tR\x06\
    parentB3\xfaA-\n+cloudresourcemanager.googleapis.com/Project\xe0A\x02\
    \x12$\n\x0binstance_id\x18\x02\x20\x01(\tR\ninstanceIdB\x03\xe0A\x02\x12\
    C\n\x08instance\x18\x03\x20\x01(\x0b2\".google.bigtable.admin.v2.Instanc\
    eR\x08instanceB\x03\xe0A\x02\x12^\n\x08clusters\x18\x04\x20\x03(\x0b2=.g\
    oogle.bigtable.admin.v2.CreateInstanceRequest.ClustersEntryR\x08clusters\
    B\x03\xe0A\x02\x1a^\n\rClustersEntry\x12\x10\n\x03key\x18\x01\x20\x01(\t\
    R\x03key\x127\n\x05value\x18\x02\x20\x01(\x0b2!.google.bigtable.admin.v2\
    .ClusterR\x05value:\x028\x01\"R\n\x12GetInstanceRequest\x12<\n\x04name\
    \x18\x01\x20\x01(\tR\x04nameB(\xfaA\"\n\x20bigtable.googleapis.com/Insta\
    nce\xe0A\x02\"\x82\x01\n\x14ListInstancesRequest\x12K\n\x06parent\x18\
    \x01\x20\x01(\tR\x06parentB3\xfaA-\n+cloudresourcemanager.googleapis.com\
    /Project\xe0A\x02\x12\x1d\n\npage_token\x18\x02\x20\x01(\tR\tpageToken\"\
    \xac\x01\n\x15ListInstancesResponse\x12@\n\tinstances\x18\x01\x20\x03(\
    \x0b2\".google.bigtable.admin.v2.InstanceR\tinstances\x12)\n\x10failed_l\
    ocations\x18\x02\x20\x03(\tR\x0ffailedLocations\x12&\n\x0fnext_page_toke\
    n\x18\x03\x20\x01(\tR\rnextPageToken\"\xa5\x01\n\x1cPartialUpdateInstanc\
    eRequest\x12C\n\x08instance\x18\x01\x20\x01(\x0b2\".google.bigtable.admi\
    n.v2.InstanceR\x08instanceB\x03\xe0A\x02\x12@\n\x0bupdate_mask\x18\x02\
    \x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\nupdateMaskB\x03\xe0A\x02\
    \"U\n\x15DeleteInstanceRequest\x12<\n\x04name\x18\x01\x20\x01(\tR\x04nam\
    eB(\xfaA\"\n\x20bigtable.googleapis.com/Instance\xe0A\x02\"\xbe\x01\n\
    \x14CreateClusterRequest\x12@\n\x06parent\x18\x01\x20\x01(\tR\x06parentB\
    (\xe0A\x02\xfaA\"\n\x20bigtable.googleapis.com/Instance\x12\"\n\ncluster\
    _id\x18\x02\x20\x01(\tR\tclusterIdB\x03\xe0A\x02\x12@\n\x07cluster\x18\
    \x03\x20\x01(\x0b2!.google.bigtable.admin.v2.ClusterR\x07clusterB\x03\
    \xe0A\x02\"P\n\x11GetClusterRequest\x12;\n\x04name\x18\x01\x20\x01(\tR\
    \x04nameB'\xfaA!\n\x1fbigtable.googleapis.com/Cluster\xe0A\x02\"v\n\x13L\
    istClustersRequest\x12@\n\x06parent\x18\x01\x20\x01(\tR\x06parentB(\xfaA\
    \"\n\x20bigtable.googleapis.com/Instance\xe0A\x02\x12\x1d\n\npage_token\
    \x18\x02\x20\x01(\tR\tpageToken\"\xa8\x01\n\x14ListClustersResponse\x12=\
    \n\x08clusters\x18\x01\x20\x03(\x0b2!.google.bigtable.admin.v2.ClusterR\
    \x08clusters\x12)\n\x10failed_locations\x18\x02\x20\x03(\tR\x0ffailedLoc\
    ations\x12&\n\x0fnext_page_token\x18\x03\x20\x01(\tR\rnextPageToken\"S\n\
    \x14DeleteClusterRequest\x12;\n\x04name\x18\x01\x20\x01(\tR\x04nameB'\
    \xfaA!\n\x1fbigtable.googleapis.com/Cluster\xe0A\x02\"\xf0\x01\n\x16Crea\
    teInstanceMetadata\x12Z\n\x10original_request\x18\x01\x20\x01(\x0b2/.goo\
    gle.bigtable.admin.v2.CreateInstanceRequestR\x0foriginalRequest\x12=\n\
    \x0crequest_time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \x0brequestTime\x12;\n\x0bfinish_time\x18\x03\x20\x01(\x0b2\x1a.google.p\
    rotobuf.TimestampR\nfinishTime\"\xf7\x01\n\x16UpdateInstanceMetadata\x12\
    a\n\x10original_request\x18\x01\x20\x01(\x0b26.google.bigtable.admin.v2.\
    PartialUpdateInstanceRequestR\x0foriginalRequest\x12=\n\x0crequest_time\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0brequestTime\x12\
    ;\n\x0bfinish_time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \nfinishTime\"\xee\x01\n\x15CreateClusterMetadata\x12Y\n\x10original_req\
    uest\x18\x01\x20\x01(\x0b2..google.bigtable.admin.v2.CreateClusterReques\
    tR\x0foriginalRequest\x12=\n\x0crequest_time\x18\x02\x20\x01(\x0b2\x1a.g\
    oogle.protobuf.TimestampR\x0brequestTime\x12;\n\x0bfinish_time\x18\x03\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nfinishTime\"\xe1\x01\n\
    \x15UpdateClusterMetadata\x12L\n\x10original_request\x18\x01\x20\x01(\
    \x0b2!.google.bigtable.admin.v2.ClusterR\x0foriginalRequest\x12=\n\x0cre\
    quest_time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0breque\
    stTime\x12;\n\x0bfinish_time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.T\
    imestampR\nfinishTime\"\xfb\x01\n\x17CreateAppProfileRequest\x12@\n\x06p\
    arent\x18\x01\x20\x01(\tR\x06parentB(\xe0A\x02\xfaA\"\n\x20bigtable.goog\
    leapis.com/Instance\x12)\n\x0eapp_profile_id\x18\x02\x20\x01(\tR\x0cappP\
    rofileIdB\x03\xe0A\x02\x12J\n\x0bapp_profile\x18\x03\x20\x01(\x0b2$.goog\
    le.bigtable.admin.v2.AppProfileR\nappProfileB\x03\xe0A\x02\x12'\n\x0fign\
    ore_warnings\x18\x04\x20\x01(\x08R\x0eignoreWarnings\"V\n\x14GetAppProfi\
    leRequest\x12>\n\x04name\x18\x01\x20\x01(\tR\x04nameB*\xe0A\x02\xfaA$\n\
    \"bigtable.googleapis.com/AppProfile\"\x96\x01\n\x16ListAppProfilesReque\
    st\x12@\n\x06parent\x18\x01\x20\x01(\tR\x06parentB(\xe0A\x02\xfaA\"\n\
    \x20bigtable.googleapis.com/Instance\x12\x1b\n\tpage_size\x18\x03\x20\
    \x01(\x05R\x08pageSize\x12\x1d\n\npage_token\x18\x02\x20\x01(\tR\tpageTo\
    ken\"\xb5\x01\n\x17ListAppProfilesResponse\x12G\n\x0capp_profiles\x18\
    \x01\x20\x03(\x0b2$.google.bigtable.admin.v2.AppProfileR\x0bappProfiles\
    \x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPageToken\x12)\n\x10\
    failed_locations\x18\x03\x20\x03(\tR\x0ffailedLocations\"\xd0\x01\n\x17U\
    pdateAppProfileRequest\x12J\n\x0bapp_profile\x18\x01\x20\x01(\x0b2$.goog\
    le.bigtable.admin.v2.AppProfileR\nappProfileB\x03\xe0A\x02\x12@\n\x0bupd\
    ate_mask\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\nupdateMas\
    kB\x03\xe0A\x02\x12'\n\x0fignore_warnings\x18\x03\x20\x01(\x08R\x0eignor\
    eWarnings\"\x87\x01\n\x17DeleteAppProfileRequest\x12>\n\x04name\x18\x01\
    \x20\x01(\tR\x04nameB*\xe0A\x02\xfaA$\n\"bigtable.googleapis.com/AppProf\
    ile\x12,\n\x0fignore_warnings\x18\x02\x20\x01(\x08R\x0eignoreWarningsB\
    \x03\xe0A\x02\"\x1a\n\x18UpdateAppProfileMetadata2\x92\x1e\n\x15Bigtable\
    InstanceAdmin\x12\xda\x01\n\x0eCreateInstance\x12/.google.bigtable.admin\
    .v2.CreateInstanceRequest\x1a\x1d.google.longrunning.Operation\"x\xdaA$p\
    arent,instance_id,instance,clusters\xcaA\"\n\x08Instance\x12\x16CreateIn\
    stanceMetadata\x82\xd3\xe4\x93\x02&\"!/v2/{parent=projects/*}/instances:\
    \x01*\x12\x91\x01\n\x0bGetInstance\x12,.google.bigtable.admin.v2.GetInst\
    anceRequest\x1a\".google.bigtable.admin.v2.Instance\"0\x82\xd3\xe4\x93\
    \x02#\x12!/v2/{name=projects/*/instances/*}\xdaA\x04name\x12\xa4\x01\n\r\
    ListInstances\x12..google.bigtable.admin.v2.ListInstancesRequest\x1a/.go\
    ogle.bigtable.admin.v2.ListInstancesResponse\"2\xdaA\x06parent\x82\xd3\
    \xe4\x93\x02#\x12!/v2/{parent=projects/*}/instances\x12\x86\x01\n\x0eUpd\
    ateInstance\x12\".google.bigtable.admin.v2.Instance\x1a\".google.bigtabl\
    e.admin.v2.Instance\",\x82\xd3\xe4\x93\x02&\x1a!/v2/{name=projects/*/ins\
    tances/*}:\x01*\x12\xe8\x01\n\x15PartialUpdateInstance\x126.google.bigta\
    ble.admin.v2.PartialUpdateInstanceRequest\x1a\x1d.google.longrunning.Ope\
    ration\"x\x82\xd3\xe4\x93\x0262*/v2/{instance.name=projects/*/instances/\
    *}:\x08instance\xdaA\x14instance,update_mask\xcaA\"\n\x08Instance\x12\
    \x16UpdateInstanceMetadata\x12\x8b\x01\n\x0eDeleteInstance\x12/.google.b\
    igtable.admin.v2.DeleteInstanceRequest\x1a\x16.google.protobuf.Empty\"0\
    \x82\xd3\xe4\x93\x02#*!/v2/{name=projects/*/instances/*}\xdaA\x04name\
    \x12\xdc\x01\n\rCreateCluster\x12..google.bigtable.admin.v2.CreateCluste\
    rRequest\x1a\x1d.google.longrunning.Operation\"|\xcaA\x20\n\x07Cluster\
    \x12\x15CreateClusterMetadata\x82\xd3\xe4\x93\x027\",/v2/{parent=project\
    s/*/instances/*}/clusters:\x07cluster\xdaA\x19parent,cluster_id,cluster\
    \x12\x99\x01\n\nGetCluster\x12+.google.bigtable.admin.v2.GetClusterReque\
    st\x1a!.google.bigtable.admin.v2.Cluster\";\xdaA\x04name\x82\xd3\xe4\x93\
    \x02.\x12,/v2/{name=projects/*/instances/*/clusters/*}\x12\xac\x01\n\x0c\
    ListClusters\x12-.google.bigtable.admin.v2.ListClustersRequest\x1a..goog\
    le.bigtable.admin.v2.ListClustersResponse\"=\xdaA\x06parent\x82\xd3\xe4\
    \x93\x02.\x12,/v2/{parent=projects/*/instances/*}/clusters\x12\xad\x01\n\
    \rUpdateCluster\x12!.google.bigtable.admin.v2.Cluster\x1a\x1d.google.lon\
    grunning.Operation\"Z\x82\xd3\xe4\x93\x021\x1a,/v2/{name=projects/*/inst\
    ances/*/clusters/*}:\x01*\xcaA\x20\n\x07Cluster\x12\x15UpdateClusterMeta\
    data\x12\x94\x01\n\rDeleteCluster\x12..google.bigtable.admin.v2.DeleteCl\
    usterRequest\x1a\x16.google.protobuf.Empty\";\xdaA\x04name\x82\xd3\xe4\
    \x93\x02.*,/v2/{name=projects/*/instances/*/clusters/*}\x12\xd5\x01\n\
    \x10CreateAppProfile\x121.google.bigtable.admin.v2.CreateAppProfileReque\
    st\x1a$.google.bigtable.admin.v2.AppProfile\"h\x82\xd3\xe4\x93\x02>\"//v\
    2/{parent=projects/*/instances/*}/appProfiles:\x0bapp_profile\xdaA!paren\
    t,app_profile_id,app_profile\x12\xa5\x01\n\rGetAppProfile\x12..google.bi\
    gtable.admin.v2.GetAppProfileRequest\x1a$.google.bigtable.admin.v2.AppPr\
    ofile\">\x82\xd3\xe4\x93\x021\x12//v2/{name=projects/*/instances/*/appPr\
    ofiles/*}\xdaA\x04name\x12\xb8\x01\n\x0fListAppProfiles\x120.google.bigt\
    able.admin.v2.ListAppProfilesRequest\x1a1.google.bigtable.admin.v2.ListA\
    ppProfilesResponse\"@\x82\xd3\xe4\x93\x021\x12//v2/{parent=projects/*/in\
    stances/*}/appProfiles\xdaA\x06parent\x12\xfa\x01\n\x10UpdateAppProfile\
    \x121.google.bigtable.admin.v2.UpdateAppProfileRequest\x1a\x1d.google.lo\
    ngrunning.Operation\"\x93\x01\xdaA\x17app_profile,update_mask\xcaA&\n\nA\
    ppProfile\x12\x18UpdateAppProfileMetadata\x82\xd3\xe4\x93\x02J2;/v2/{app\
    _profile.name=projects/*/instances/*/appProfiles/*}:\x0bapp_profile\x12\
    \x9d\x01\n\x10DeleteAppProfile\x121.google.bigtable.admin.v2.DeleteAppPr\
    ofileRequest\x1a\x16.google.protobuf.Empty\">\x82\xd3\xe4\x93\x021*//v2/\
    {name=projects/*/instances/*/appProfiles/*}\xdaA\x04name\x12\x93\x01\n\
    \x0cGetIamPolicy\x12\".google.iam.v1.GetIamPolicyRequest\x1a\x15.google.\
    iam.v1.Policy\"H\x82\xd3\xe4\x93\x027\"2/v2/{resource=projects/*/instanc\
    es/*}:getIamPolicy:\x01*\xdaA\x08resource\x12\x9a\x01\n\x0cSetIamPolicy\
    \x12\".google.iam.v1.SetIamPolicyRequest\x1a\x15.google.iam.v1.Policy\"O\
    \xdaA\x0fresource,policy\x82\xd3\xe4\x93\x027\"2/v2/{resource=projects/*\
    /instances/*}:setIamPolicy:\x01*\x12\xc5\x01\n\x12TestIamPermissions\x12\
    (.google.iam.v1.TestIamPermissionsRequest\x1a).google.iam.v1.TestIamPerm\
    issionsResponse\"Z\xdaA\x14resource,permissions\x82\xd3\xe4\x93\x02=\"8/\
    v2/{resource=projects/*/instances/*}:testIamPermissions:\x01*\x1a\x9a\
    \x03\xcaA\x1cbigtableadmin.googleapis.com\xd2A\xf7\x02https://www.google\
    apis.com/auth/bigtable.admin,https://www.googleapis.com/auth/bigtable.ad\
    min.cluster,https://www.googleapis.com/auth/bigtable.admin.instance,http\
    s://www.googleapis.com/auth/cloud-bigtable.admin,https://www.googleapis.\
    com/auth/cloud-bigtable.admin.cluster,https://www.googleapis.com/auth/cl\
    oud-platform,https://www.googleapis.com/auth/cloud-platform.read-onlyB\
    \xe2\x01\n\x1ccom.google.bigtable.admin.v2B\x1aBigtableInstanceAdminProt\
    oP\x01Z=google.golang.org/genproto/googleapis/bigtable/admin/v2;admin\
    \xaa\x02\x1eGoogle.Cloud.Bigtable.Admin.V2\xca\x02\x1eGoogle\\Cloud\\Big\
    table\\Admin\\V2\xea\x02\"Google::Cloud::Bigtable::Admin::V2J\x9d\x8e\
    \x01\n\x07\x12\x05\x0e\0\xbd\x04\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\
    \x122\xb1\x04\x20Copyright\x202020\x20Google\x20LLC\n\n\x20Licensed\x20u\
    nder\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\
    \");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20co\
    mpliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20co\
    py\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apach\
    e.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\
    \x02\x12\x03\x10\0!\n\t\n\x02\x03\0\x12\x03\x12\0&\n\t\n\x02\x03\x01\x12\
    \x03\x13\0!\n\t\n\x02\x03\x02\x12\x03\x14\0)\n\t\n\x02\x03\x03\x12\x03\
    \x15\0#\n\t\n\x02\x03\x04\x12\x03\x16\01\n\t\n\x02\x03\x05\x12\x03\x17\0\
    (\n\t\n\x02\x03\x06\x12\x03\x18\0$\n\t\n\x02\x03\x07\x12\x03\x19\0-\n\t\
    \n\x02\x03\x08\x12\x03\x1a\0%\n\t\n\x02\x03\t\x12\x03\x1b\0*\n\t\n\x02\
    \x03\n\x12\x03\x1c\0)\n\x08\n\x01\x08\x12\x03\x1e\0;\n\t\n\x02\x08%\x12\
    \x03\x1e\0;\n\x08\n\x01\x08\x12\x03\x1f\0T\n\t\n\x02\x08\x0b\x12\x03\x1f\
    \0T\n\x08\n\x01\x08\x12\x03\x20\0\"\n\t\n\x02\x08\n\x12\x03\x20\0\"\n\
    \x08\n\x01\x08\x12\x03!\0;\n\t\n\x02\x08\x08\x12\x03!\0;\n\x08\n\x01\x08\
    \x12\x03\"\05\n\t\n\x02\x08\x01\x12\x03\"\05\n\x08\n\x01\x08\x12\x03#\0<\
    \n\t\n\x02\x08)\x12\x03#\0<\n\x08\n\x01\x08\x12\x03$\0;\n\t\n\x02\x08-\
    \x12\x03$\0;\n\xdb\x01\n\x02\x06\0\x12\x05)\0\xec\x01\x01\x1a\xcd\x01\
    \x20Service\x20for\x20creating,\x20configuring,\x20and\x20deleting\x20Cl\
    oud\x20Bigtable\x20Instances\x20and\n\x20Clusters.\x20Provides\x20access\
    \x20to\x20the\x20Instance\x20and\x20Cluster\x20schemas\x20only,\x20not\
    \x20the\n\x20tables'\x20metadata\x20or\x20data\x20stored\x20in\x20those\
    \x20tables.\n\n\n\n\x03\x06\0\x01\x12\x03)\x08\x1d\n\n\n\x03\x06\0\x03\
    \x12\x03*\x02D\n\x0c\n\x05\x06\0\x03\x99\x08\x12\x03*\x02D\n\x0b\n\x03\
    \x06\0\x03\x12\x04+\x022A\n\r\n\x05\x06\0\x03\x9a\x08\x12\x04+\x022A\n4\
    \n\x04\x06\0\x02\0\x12\x045\x02?\x03\x1a&\x20Create\x20an\x20instance\
    \x20within\x20a\x20project.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x035\x06\
    \x14\n\x0c\n\x05\x06\0\x02\0\x02\x12\x035\x15*\n\x0c\n\x05\x06\0\x02\0\
    \x03\x12\x0355Q\n\r\n\x05\x06\0\x02\0\x04\x12\x046\x049\x06\n\x11\n\t\
    \x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x046\x049\x06\n\x0c\n\x05\x06\0\x02\0\
    \x04\x12\x03:\x04R\n\x0f\n\x08\x06\0\x02\0\x04\x9b\x08\0\x12\x03:\x04R\n\
    \r\n\x05\x06\0\x02\0\x04\x12\x04;\x04>\x06\n\x0f\n\x07\x06\0\x02\0\x04\
    \x99\x08\x12\x04;\x04>\x06\n3\n\x04\x06\0\x02\x01\x12\x04B\x02G\x03\x1a%\
    \x20Gets\x20information\x20about\x20an\x20instance.\n\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03B\x06\x11\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03B\x12\
    $\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03B/7\n\r\n\x05\x06\0\x02\x01\x04\
    \x12\x04C\x04E\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04C\
    \x04E\x06\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x03F\x042\n\x0f\n\x08\x06\0\
    \x02\x01\x04\x9b\x08\0\x12\x03F\x042\n?\n\x04\x06\0\x02\x02\x12\x04J\x02\
    O\x03\x1a1\x20Lists\x20information\x20about\x20instances\x20in\x20a\x20p\
    roject.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03J\x06\x13\n\x0c\n\x05\x06\
    \0\x02\x02\x02\x12\x03J\x14(\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03J3H\n\
    \r\n\x05\x06\0\x02\x02\x04\x12\x04K\x04M\x06\n\x11\n\t\x06\0\x02\x02\x04\
    \xb0\xca\xbc\"\x12\x04K\x04M\x06\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03N\
    \x044\n\x0f\n\x08\x06\0\x02\x02\x04\x9b\x08\0\x12\x03N\x044\n\xcc\x01\n\
    \x04\x06\0\x02\x03\x12\x04T\x02Y\x03\x1a\xbd\x01\x20Updates\x20an\x20ins\
    tance\x20within\x20a\x20project.\x20This\x20method\x20updates\x20only\
    \x20the\x20display\n\x20name\x20and\x20type\x20for\x20an\x20Instance.\
    \x20To\x20update\x20other\x20Instance\x20properties,\x20such\x20as\n\x20\
    labels,\x20use\x20PartialUpdateInstance.\n\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x03T\x06\x14\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03T\x15\x1d\n\x0c\n\
    \x05\x06\0\x02\x03\x03\x12\x03T(0\n\r\n\x05\x06\0\x02\x03\x04\x12\x04U\
    \x04X\x06\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04U\x04X\x06\n\
    \xa2\x01\n\x04\x06\0\x02\x04\x12\x04]\x02g\x03\x1a\x93\x01\x20Partially\
    \x20updates\x20an\x20instance\x20within\x20a\x20project.\x20This\x20meth\
    od\x20can\x20modify\x20all\n\x20fields\x20of\x20an\x20Instance\x20and\
    \x20is\x20the\x20preferred\x20way\x20to\x20update\x20an\x20Instance.\n\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x03]\x06\x1b\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x03]\x1c8\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03]C_\n\r\n\x05\
    \x06\0\x02\x04\x04\x12\x04^\x04a\x06\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\
    \xbc\"\x12\x04^\x04a\x06\n\x0c\n\x05\x06\0\x02\x04\x04\x12\x03b\x04B\n\
    \x0f\n\x08\x06\0\x02\x04\x04\x9b\x08\0\x12\x03b\x04B\n\r\n\x05\x06\0\x02\
    \x04\x04\x12\x04c\x04f\x06\n\x0f\n\x07\x06\0\x02\x04\x04\x99\x08\x12\x04\
    c\x04f\x06\n2\n\x04\x06\0\x02\x05\x12\x04j\x02o\x03\x1a$\x20Delete\x20an\
    \x20instance\x20from\x20a\x20project.\n\n\x0c\n\x05\x06\0\x02\x05\x01\
    \x12\x03j\x06\x14\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03j\x15*\n\x0c\n\
    \x05\x06\0\x02\x05\x03\x12\x03j5J\n\r\n\x05\x06\0\x02\x05\x04\x12\x04k\
    \x04m\x06\n\x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x04k\x04m\x06\n\
    \x0c\n\x05\x06\0\x02\x05\x04\x12\x03n\x042\n\x0f\n\x08\x06\0\x02\x05\x04\
    \x9b\x08\0\x12\x03n\x042\n5\n\x04\x06\0\x02\x06\x12\x04r\x02|\x03\x1a'\
    \x20Creates\x20a\x20cluster\x20within\x20an\x20instance.\n\n\x0c\n\x05\
    \x06\0\x02\x06\x01\x12\x03r\x06\x13\n\x0c\n\x05\x06\0\x02\x06\x02\x12\
    \x03r\x14(\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03r3O\n\r\n\x05\x06\0\x02\
    \x06\x04\x12\x04s\x04v\x06\n\x11\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\
    \x04s\x04v\x06\n\x0c\n\x05\x06\0\x02\x06\x04\x12\x03w\x04G\n\x0f\n\x08\
    \x06\0\x02\x06\x04\x9b\x08\0\x12\x03w\x04G\n\r\n\x05\x06\0\x02\x06\x04\
    \x12\x04x\x04{\x06\n\x0f\n\x07\x06\0\x02\x06\x04\x99\x08\x12\x04x\x04{\
    \x06\n2\n\x04\x06\0\x02\x07\x12\x05\x7f\x02\x84\x01\x03\x1a#\x20Gets\x20\
    information\x20about\x20a\x20cluster.\n\n\x0c\n\x05\x06\0\x02\x07\x01\
    \x12\x03\x7f\x06\x10\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03\x7f\x11\"\n\
    \x0c\n\x05\x06\0\x02\x07\x03\x12\x03\x7f-4\n\x0f\n\x05\x06\0\x02\x07\x04\
    \x12\x06\x80\x01\x04\x82\x01\x06\n\x13\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\
    \"\x12\x06\x80\x01\x04\x82\x01\x06\n\r\n\x05\x06\0\x02\x07\x04\x12\x04\
    \x83\x01\x042\n\x10\n\x08\x06\0\x02\x07\x04\x9b\x08\0\x12\x04\x83\x01\
    \x042\nB\n\x04\x06\0\x02\x08\x12\x06\x87\x01\x02\x8c\x01\x03\x1a2\x20Lis\
    ts\x20information\x20about\x20clusters\x20in\x20an\x20instance.\n\n\r\n\
    \x05\x06\0\x02\x08\x01\x12\x04\x87\x01\x06\x12\n\r\n\x05\x06\0\x02\x08\
    \x02\x12\x04\x87\x01\x13&\n\r\n\x05\x06\0\x02\x08\x03\x12\x04\x87\x011E\
    \n\x0f\n\x05\x06\0\x02\x08\x04\x12\x06\x88\x01\x04\x8a\x01\x06\n\x13\n\t\
    \x06\0\x02\x08\x04\xb0\xca\xbc\"\x12\x06\x88\x01\x04\x8a\x01\x06\n\r\n\
    \x05\x06\0\x02\x08\x04\x12\x04\x8b\x01\x044\n\x10\n\x08\x06\0\x02\x08\
    \x04\x9b\x08\0\x12\x04\x8b\x01\x044\n7\n\x04\x06\0\x02\t\x12\x06\x8f\x01\
    \x02\x98\x01\x03\x1a'\x20Updates\x20a\x20cluster\x20within\x20an\x20inst\
    ance.\n\n\r\n\x05\x06\0\x02\t\x01\x12\x04\x8f\x01\x06\x13\n\r\n\x05\x06\
    \0\x02\t\x02\x12\x04\x8f\x01\x14\x1b\n\r\n\x05\x06\0\x02\t\x03\x12\x04\
    \x8f\x01&B\n\x0f\n\x05\x06\0\x02\t\x04\x12\x06\x90\x01\x04\x93\x01\x06\n\
    \x13\n\t\x06\0\x02\t\x04\xb0\xca\xbc\"\x12\x06\x90\x01\x04\x93\x01\x06\n\
    \x0f\n\x05\x06\0\x02\t\x04\x12\x06\x94\x01\x04\x97\x01\x06\n\x11\n\x07\
    \x06\0\x02\t\x04\x99\x08\x12\x06\x94\x01\x04\x97\x01\x06\n5\n\x04\x06\0\
    \x02\n\x12\x06\x9b\x01\x02\xa0\x01\x03\x1a%\x20Deletes\x20a\x20cluster\
    \x20from\x20an\x20instance.\n\n\r\n\x05\x06\0\x02\n\x01\x12\x04\x9b\x01\
    \x06\x13\n\r\n\x05\x06\0\x02\n\x02\x12\x04\x9b\x01\x14(\n\r\n\x05\x06\0\
    \x02\n\x03\x12\x04\x9b\x013H\n\x0f\n\x05\x06\0\x02\n\x04\x12\x06\x9c\x01\
    \x04\x9e\x01\x06\n\x13\n\t\x06\0\x02\n\x04\xb0\xca\xbc\"\x12\x06\x9c\x01\
    \x04\x9e\x01\x06\n\r\n\x05\x06\0\x02\n\x04\x12\x04\x9f\x01\x042\n\x10\n\
    \x08\x06\0\x02\n\x04\x9b\x08\0\x12\x04\x9f\x01\x042\n<\n\x04\x06\0\x02\
    \x0b\x12\x06\xa3\x01\x02\xa9\x01\x03\x1a,\x20Creates\x20an\x20app\x20pro\
    file\x20within\x20an\x20instance.\n\n\r\n\x05\x06\0\x02\x0b\x01\x12\x04\
    \xa3\x01\x06\x16\n\r\n\x05\x06\0\x02\x0b\x02\x12\x04\xa3\x01\x17.\n\r\n\
    \x05\x06\0\x02\x0b\x03\x12\x04\xa3\x019C\n\x0f\n\x05\x06\0\x02\x0b\x04\
    \x12\x06\xa4\x01\x04\xa7\x01\x06\n\x13\n\t\x06\0\x02\x0b\x04\xb0\xca\xbc\
    \"\x12\x06\xa4\x01\x04\xa7\x01\x06\n\r\n\x05\x06\0\x02\x0b\x04\x12\x04\
    \xa8\x01\x04O\n\x10\n\x08\x06\0\x02\x0b\x04\x9b\x08\0\x12\x04\xa8\x01\
    \x04O\n8\n\x04\x06\0\x02\x0c\x12\x06\xac\x01\x02\xb1\x01\x03\x1a(\x20Get\
    s\x20information\x20about\x20an\x20app\x20profile.\n\n\r\n\x05\x06\0\x02\
    \x0c\x01\x12\x04\xac\x01\x06\x13\n\r\n\x05\x06\0\x02\x0c\x02\x12\x04\xac\
    \x01\x14(\n\r\n\x05\x06\0\x02\x0c\x03\x12\x04\xac\x013=\n\x0f\n\x05\x06\
    \0\x02\x0c\x04\x12\x06\xad\x01\x04\xaf\x01\x06\n\x13\n\t\x06\0\x02\x0c\
    \x04\xb0\xca\xbc\"\x12\x06\xad\x01\x04\xaf\x01\x06\n\r\n\x05\x06\0\x02\
    \x0c\x04\x12\x04\xb0\x01\x042\n\x10\n\x08\x06\0\x02\x0c\x04\x9b\x08\0\
    \x12\x04\xb0\x01\x042\nF\n\x04\x06\0\x02\r\x12\x06\xb4\x01\x02\xb9\x01\
    \x03\x1a6\x20Lists\x20information\x20about\x20app\x20profiles\x20in\x20a\
    n\x20instance.\n\n\r\n\x05\x06\0\x02\r\x01\x12\x04\xb4\x01\x06\x15\n\r\n\
    \x05\x06\0\x02\r\x02\x12\x04\xb4\x01\x16,\n\r\n\x05\x06\0\x02\r\x03\x12\
    \x04\xb4\x017N\n\x0f\n\x05\x06\0\x02\r\x04\x12\x06\xb5\x01\x04\xb7\x01\
    \x06\n\x13\n\t\x06\0\x02\r\x04\xb0\xca\xbc\"\x12\x06\xb5\x01\x04\xb7\x01\
    \x06\n\r\n\x05\x06\0\x02\r\x04\x12\x04\xb8\x01\x044\n\x10\n\x08\x06\0\
    \x02\r\x04\x9b\x08\0\x12\x04\xb8\x01\x044\n<\n\x04\x06\0\x02\x0e\x12\x06\
    \xbc\x01\x02\xc6\x01\x03\x1a,\x20Updates\x20an\x20app\x20profile\x20with\
    in\x20an\x20instance.\n\n\r\n\x05\x06\0\x02\x0e\x01\x12\x04\xbc\x01\x06\
    \x16\n\r\n\x05\x06\0\x02\x0e\x02\x12\x04\xbc\x01\x17.\n\r\n\x05\x06\0\
    \x02\x0e\x03\x12\x04\xbc\x019U\n\x0f\n\x05\x06\0\x02\x0e\x04\x12\x06\xbd\
    \x01\x04\xc0\x01\x06\n\x13\n\t\x06\0\x02\x0e\x04\xb0\xca\xbc\"\x12\x06\
    \xbd\x01\x04\xc0\x01\x06\n\r\n\x05\x06\0\x02\x0e\x04\x12\x04\xc1\x01\x04\
    E\n\x10\n\x08\x06\0\x02\x0e\x04\x9b\x08\0\x12\x04\xc1\x01\x04E\n\x0f\n\
    \x05\x06\0\x02\x0e\x04\x12\x06\xc2\x01\x04\xc5\x01\x06\n\x11\n\x07\x06\0\
    \x02\x0e\x04\x99\x08\x12\x06\xc2\x01\x04\xc5\x01\x06\n:\n\x04\x06\0\x02\
    \x0f\x12\x06\xc9\x01\x02\xce\x01\x03\x1a*\x20Deletes\x20an\x20app\x20pro\
    file\x20from\x20an\x20instance.\n\n\r\n\x05\x06\0\x02\x0f\x01\x12\x04\
    \xc9\x01\x06\x16\n\r\n\x05\x06\0\x02\x0f\x02\x12\x04\xc9\x01\x17.\n\r\n\
    \x05\x06\0\x02\x0f\x03\x12\x04\xc9\x019N\n\x0f\n\x05\x06\0\x02\x0f\x04\
    \x12\x06\xca\x01\x04\xcc\x01\x06\n\x13\n\t\x06\0\x02\x0f\x04\xb0\xca\xbc\
    \"\x12\x06\xca\x01\x04\xcc\x01\x06\n\r\n\x05\x06\0\x02\x0f\x04\x12\x04\
    \xcd\x01\x042\n\x10\n\x08\x06\0\x02\x0f\x04\x9b\x08\0\x12\x04\xcd\x01\
    \x042\n\x9a\x01\n\x04\x06\0\x02\x10\x12\x06\xd2\x01\x02\xd8\x01\x03\x1a\
    \x89\x01\x20Gets\x20the\x20access\x20control\x20policy\x20for\x20an\x20i\
    nstance\x20resource.\x20Returns\x20an\x20empty\n\x20policy\x20if\x20an\
    \x20instance\x20exists\x20but\x20does\x20not\x20have\x20a\x20policy\x20s\
    et.\n\n\r\n\x05\x06\0\x02\x10\x01\x12\x04\xd2\x01\x06\x12\n\r\n\x05\x06\
    \0\x02\x10\x02\x12\x04\xd2\x01\x134\n\r\n\x05\x06\0\x02\x10\x03\x12\x04\
    \xd2\x01?S\n\x0f\n\x05\x06\0\x02\x10\x04\x12\x06\xd3\x01\x04\xd6\x01\x06\
    \n\x13\n\t\x06\0\x02\x10\x04\xb0\xca\xbc\"\x12\x06\xd3\x01\x04\xd6\x01\
    \x06\n\r\n\x05\x06\0\x02\x10\x04\x12\x04\xd7\x01\x046\n\x10\n\x08\x06\0\
    \x02\x10\x04\x9b\x08\0\x12\x04\xd7\x01\x046\nh\n\x04\x06\0\x02\x11\x12\
    \x06\xdc\x01\x02\xe2\x01\x03\x1aX\x20Sets\x20the\x20access\x20control\
    \x20policy\x20on\x20an\x20instance\x20resource.\x20Replaces\x20any\n\x20\
    existing\x20policy.\n\n\r\n\x05\x06\0\x02\x11\x01\x12\x04\xdc\x01\x06\
    \x12\n\r\n\x05\x06\0\x02\x11\x02\x12\x04\xdc\x01\x134\n\r\n\x05\x06\0\
    \x02\x11\x03\x12\x04\xdc\x01?S\n\x0f\n\x05\x06\0\x02\x11\x04\x12\x06\xdd\
    \x01\x04\xe0\x01\x06\n\x13\n\t\x06\0\x02\x11\x04\xb0\xca\xbc\"\x12\x06\
    \xdd\x01\x04\xe0\x01\x06\n\r\n\x05\x06\0\x02\x11\x04\x12\x04\xe1\x01\x04\
    =\n\x10\n\x08\x06\0\x02\x11\x04\x9b\x08\0\x12\x04\xe1\x01\x04=\n]\n\x04\
    \x06\0\x02\x12\x12\x06\xe5\x01\x02\xeb\x01\x03\x1aM\x20Returns\x20permis\
    sions\x20that\x20the\x20caller\x20has\x20on\x20the\x20specified\x20insta\
    nce\x20resource.\n\n\r\n\x05\x06\0\x02\x12\x01\x12\x04\xe5\x01\x06\x18\n\
    \r\n\x05\x06\0\x02\x12\x02\x12\x04\xe5\x01\x19@\n\r\n\x05\x06\0\x02\x12\
    \x03\x12\x04\xe5\x01Ks\n\x0f\n\x05\x06\0\x02\x12\x04\x12\x06\xe6\x01\x04\
    \xe9\x01\x06\n\x13\n\t\x06\0\x02\x12\x04\xb0\xca\xbc\"\x12\x06\xe6\x01\
    \x04\xe9\x01\x06\n\r\n\x05\x06\0\x02\x12\x04\x12\x04\xea\x01\x04B\n\x10\
    \n\x08\x06\0\x02\x12\x04\x9b\x08\0\x12\x04\xea\x01\x04B\nI\n\x02\x04\0\
    \x12\x06\xef\x01\0\x88\x02\x01\x1a;\x20Request\x20message\x20for\x20Bigt\
    ableInstanceAdmin.CreateInstance.\n\n\x0b\n\x03\x04\0\x01\x12\x04\xef\
    \x01\x08\x1d\n\x8d\x01\n\x04\x04\0\x02\0\x12\x06\xf2\x01\x02\xf7\x01\x04\
    \x1a}\x20Required.\x20The\x20unique\x20name\x20of\x20the\x20project\x20i\
    n\x20which\x20to\x20create\x20the\x20new\x20instance.\n\x20Values\x20are\
    \x20of\x20the\x20form\x20`projects/{project}`.\n\n\x0f\n\x05\x04\0\x02\0\
    \x04\x12\x06\xf2\x01\x02\xef\x01\x1f\n\r\n\x05\x04\0\x02\0\x05\x12\x04\
    \xf2\x01\x02\x08\n\r\n\x05\x04\0\x02\0\x01\x12\x04\xf2\x01\t\x0f\n\r\n\
    \x05\x04\0\x02\0\x03\x12\x04\xf2\x01\x12\x13\n\x0f\n\x05\x04\0\x02\0\x08\
    \x12\x06\xf2\x01\x14\xf7\x01\x03\n\x10\n\x08\x04\0\x02\0\x08\x9c\x08\0\
    \x12\x04\xf3\x01\x04*\n\x11\n\x07\x04\0\x02\0\x08\x9f\x08\x12\x06\xf4\
    \x01\x04\xf6\x01\x05\n\xb4\x01\n\x04\x04\0\x02\x01\x12\x04\xfc\x01\x02B\
    \x1a\xa5\x01\x20Required.\x20The\x20ID\x20to\x20be\x20used\x20when\x20re\
    ferring\x20to\x20the\x20new\x20instance\x20within\x20its\x20project,\n\
    \x20e.g.,\x20just\x20`myinstance`\x20rather\x20than\n\x20`projects/mypro\
    ject/instances/myinstance`.\n\n\x0f\n\x05\x04\0\x02\x01\x04\x12\x06\xfc\
    \x01\x02\xf7\x01\x04\n\r\n\x05\x04\0\x02\x01\x05\x12\x04\xfc\x01\x02\x08\
    \n\r\n\x05\x04\0\x02\x01\x01\x12\x04\xfc\x01\t\x14\n\r\n\x05\x04\0\x02\
    \x01\x03\x12\x04\xfc\x01\x17\x18\n\r\n\x05\x04\0\x02\x01\x08\x12\x04\xfc\
    \x01\x19A\n\x10\n\x08\x04\0\x02\x01\x08\x9c\x08\0\x12\x04\xfc\x01\x1a@\n\
    a\n\x04\x04\0\x02\x02\x12\x04\x80\x02\x02A\x1aS\x20Required.\x20The\x20i\
    nstance\x20to\x20create.\n\x20Fields\x20marked\x20`OutputOnly`\x20must\
    \x20be\x20left\x20blank.\n\n\x0f\n\x05\x04\0\x02\x02\x04\x12\x06\x80\x02\
    \x02\xfc\x01B\n\r\n\x05\x04\0\x02\x02\x06\x12\x04\x80\x02\x02\n\n\r\n\
    \x05\x04\0\x02\x02\x01\x12\x04\x80\x02\x0b\x13\n\r\n\x05\x04\0\x02\x02\
    \x03\x12\x04\x80\x02\x16\x17\n\r\n\x05\x04\0\x02\x02\x08\x12\x04\x80\x02\
    \x18@\n\x10\n\x08\x04\0\x02\x02\x08\x9c\x08\0\x12\x04\x80\x02\x19?\n\xaf\
    \x02\n\x04\x04\0\x02\x03\x12\x04\x87\x02\x02M\x1a\xa0\x02\x20Required.\
    \x20The\x20clusters\x20to\x20be\x20created\x20within\x20the\x20instance,\
    \x20mapped\x20by\x20desired\n\x20cluster\x20ID,\x20e.g.,\x20just\x20`myc\
    luster`\x20rather\x20than\n\x20`projects/myproject/instances/myinstance/\
    clusters/mycluster`.\n\x20Fields\x20marked\x20`OutputOnly`\x20must\x20be\
    \x20left\x20blank.\n\x20Currently,\x20at\x20most\x20four\x20clusters\x20\
    can\x20be\x20specified.\n\n\x0f\n\x05\x04\0\x02\x03\x04\x12\x06\x87\x02\
    \x02\x80\x02A\n\r\n\x05\x04\0\x02\x03\x06\x12\x04\x87\x02\x02\x16\n\r\n\
    \x05\x04\0\x02\x03\x01\x12\x04\x87\x02\x17\x1f\n\r\n\x05\x04\0\x02\x03\
    \x03\x12\x04\x87\x02\"#\n\r\n\x05\x04\0\x02\x03\x08\x12\x04\x87\x02$L\n\
    \x10\n\x08\x04\0\x02\x03\x08\x9c\x08\0\x12\x04\x87\x02%K\nF\n\x02\x04\
    \x01\x12\x06\x8b\x02\0\x94\x02\x01\x1a8\x20Request\x20message\x20for\x20\
    BigtableInstanceAdmin.GetInstance.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\x8b\
    \x02\x08\x1a\n\x89\x01\n\x04\x04\x01\x02\0\x12\x06\x8e\x02\x02\x93\x02\
    \x04\x1ay\x20Required.\x20The\x20unique\x20name\x20of\x20the\x20requeste\
    d\x20instance.\x20Values\x20are\x20of\x20the\x20form\n\x20`projects/{pro\
    ject}/instances/{instance}`.\n\n\x0f\n\x05\x04\x01\x02\0\x04\x12\x06\x8e\
    \x02\x02\x8b\x02\x1c\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\x8e\x02\x02\x08\
    \n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x8e\x02\t\r\n\r\n\x05\x04\x01\x02\0\
    \x03\x12\x04\x8e\x02\x10\x11\n\x0f\n\x05\x04\x01\x02\0\x08\x12\x06\x8e\
    \x02\x12\x93\x02\x03\n\x10\n\x08\x04\x01\x02\0\x08\x9c\x08\0\x12\x04\x8f\
    \x02\x04*\n\x11\n\x07\x04\x01\x02\0\x08\x9f\x08\x12\x06\x90\x02\x04\x92\
    \x02\x05\nH\n\x02\x04\x02\x12\x06\x97\x02\0\xa3\x02\x01\x1a:\x20Request\
    \x20message\x20for\x20BigtableInstanceAdmin.ListInstances.\n\n\x0b\n\x03\
    \x04\x02\x01\x12\x04\x97\x02\x08\x1c\n\x95\x01\n\x04\x04\x02\x02\0\x12\
    \x06\x9a\x02\x02\x9f\x02\x04\x1a\x84\x01\x20Required.\x20The\x20unique\
    \x20name\x20of\x20the\x20project\x20for\x20which\x20a\x20list\x20of\x20i\
    nstances\x20is\x20requested.\n\x20Values\x20are\x20of\x20the\x20form\x20\
    `projects/{project}`.\n\n\x0f\n\x05\x04\x02\x02\0\x04\x12\x06\x9a\x02\
    \x02\x97\x02\x1e\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\x9a\x02\x02\x08\n\r\
    \n\x05\x04\x02\x02\0\x01\x12\x04\x9a\x02\t\x0f\n\r\n\x05\x04\x02\x02\0\
    \x03\x12\x04\x9a\x02\x12\x13\n\x0f\n\x05\x04\x02\x02\0\x08\x12\x06\x9a\
    \x02\x14\x9f\x02\x03\n\x10\n\x08\x04\x02\x02\0\x08\x9c\x08\0\x12\x04\x9b\
    \x02\x04*\n\x11\n\x07\x04\x02\x02\0\x08\x9f\x08\x12\x06\x9c\x02\x04\x9e\
    \x02\x05\n=\n\x04\x04\x02\x02\x01\x12\x04\xa2\x02\x02\x18\x1a/\x20DEPREC\
    ATED:\x20This\x20field\x20is\x20unused\x20and\x20ignored.\n\n\x0f\n\x05\
    \x04\x02\x02\x01\x04\x12\x06\xa2\x02\x02\x9f\x02\x04\n\r\n\x05\x04\x02\
    \x02\x01\x05\x12\x04\xa2\x02\x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\x12\
    \x04\xa2\x02\t\x13\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xa2\x02\x16\x17\
    \nI\n\x02\x04\x03\x12\x06\xa6\x02\0\xb4\x02\x01\x1a;\x20Response\x20mess\
    age\x20for\x20BigtableInstanceAdmin.ListInstances.\n\n\x0b\n\x03\x04\x03\
    \x01\x12\x04\xa6\x02\x08\x1d\n0\n\x04\x04\x03\x02\0\x12\x04\xa8\x02\x02\
    \"\x1a\"\x20The\x20list\x20of\x20requested\x20instances.\n\n\r\n\x05\x04\
    \x03\x02\0\x04\x12\x04\xa8\x02\x02\n\n\r\n\x05\x04\x03\x02\0\x06\x12\x04\
    \xa8\x02\x0b\x13\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xa8\x02\x14\x1d\n\r\
    \n\x05\x04\x03\x02\0\x03\x12\x04\xa8\x02\x20!\n\x95\x03\n\x04\x04\x03\
    \x02\x01\x12\x04\xb0\x02\x02'\x1a\x86\x03\x20Locations\x20from\x20which\
    \x20Instance\x20information\x20could\x20not\x20be\x20retrieved,\n\x20due\
    \x20to\x20an\x20outage\x20or\x20some\x20other\x20transient\x20condition.\
    \n\x20Instances\x20whose\x20Clusters\x20are\x20all\x20in\x20one\x20of\
    \x20the\x20failed\x20locations\n\x20may\x20be\x20missing\x20from\x20`ins\
    tances`,\x20and\x20Instances\x20with\x20at\x20least\x20one\n\x20Cluster\
    \x20in\x20a\x20failed\x20location\x20may\x20only\x20have\x20partial\x20i\
    nformation\x20returned.\n\x20Values\x20are\x20of\x20the\x20form\x20`proj\
    ects/<project>/locations/<zone_id>`\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\
    \x04\xb0\x02\x02\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\xb0\x02\x0b\x11\
    \n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xb0\x02\x12\"\n\r\n\x05\x04\x03\
    \x02\x01\x03\x12\x04\xb0\x02%&\n=\n\x04\x04\x03\x02\x02\x12\x04\xb3\x02\
    \x02\x1d\x1a/\x20DEPRECATED:\x20This\x20field\x20is\x20unused\x20and\x20\
    ignored.\n\n\x0f\n\x05\x04\x03\x02\x02\x04\x12\x06\xb3\x02\x02\xb0\x02'\
    \n\r\n\x05\x04\x03\x02\x02\x05\x12\x04\xb3\x02\x02\x08\n\r\n\x05\x04\x03\
    \x02\x02\x01\x12\x04\xb3\x02\t\x18\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\
    \xb3\x02\x1b\x1c\nP\n\x02\x04\x04\x12\x06\xb7\x02\0\xbe\x02\x01\x1aB\x20\
    Request\x20message\x20for\x20BigtableInstanceAdmin.PartialUpdateInstance\
    .\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xb7\x02\x08$\nX\n\x04\x04\x04\x02\0\
    \x12\x04\xb9\x02\x02A\x1aJ\x20Required.\x20The\x20Instance\x20which\x20w\
    ill\x20(partially)\x20replace\x20the\x20current\x20value.\n\n\x0f\n\x05\
    \x04\x04\x02\0\x04\x12\x06\xb9\x02\x02\xb7\x02&\n\r\n\x05\x04\x04\x02\0\
    \x06\x12\x04\xb9\x02\x02\n\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xb9\x02\
    \x0b\x13\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xb9\x02\x16\x17\n\r\n\x05\
    \x04\x04\x02\0\x08\x12\x04\xb9\x02\x18@\n\x10\n\x08\x04\x04\x02\0\x08\
    \x9c\x08\0\x12\x04\xb9\x02\x19?\nj\n\x04\x04\x04\x02\x01\x12\x04\xbd\x02\
    \x02U\x1a\\\x20Required.\x20The\x20subset\x20of\x20Instance\x20fields\
    \x20which\x20should\x20be\x20replaced.\n\x20Must\x20be\x20explicitly\x20\
    set.\n\n\x0f\n\x05\x04\x04\x02\x01\x04\x12\x06\xbd\x02\x02\xb9\x02A\n\r\
    \n\x05\x04\x04\x02\x01\x06\x12\x04\xbd\x02\x02\x1b\n\r\n\x05\x04\x04\x02\
    \x01\x01\x12\x04\xbd\x02\x1c'\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xbd\
    \x02*+\n\r\n\x05\x04\x04\x02\x01\x08\x12\x04\xbd\x02,T\n\x10\n\x08\x04\
    \x04\x02\x01\x08\x9c\x08\0\x12\x04\xbd\x02-S\nI\n\x02\x04\x05\x12\x06\
    \xc1\x02\0\xca\x02\x01\x1a;\x20Request\x20message\x20for\x20BigtableInst\
    anceAdmin.DeleteInstance.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xc1\x02\x08\
    \x1d\n\x8d\x01\n\x04\x04\x05\x02\0\x12\x06\xc4\x02\x02\xc9\x02\x04\x1a}\
    \x20Required.\x20The\x20unique\x20name\x20of\x20the\x20instance\x20to\
    \x20be\x20deleted.\n\x20Values\x20are\x20of\x20the\x20form\x20`projects/\
    {project}/instances/{instance}`.\n\n\x0f\n\x05\x04\x05\x02\0\x04\x12\x06\
    \xc4\x02\x02\xc1\x02\x1f\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\xc4\x02\x02\
    \x08\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xc4\x02\t\r\n\r\n\x05\x04\x05\
    \x02\0\x03\x12\x04\xc4\x02\x10\x11\n\x0f\n\x05\x04\x05\x02\0\x08\x12\x06\
    \xc4\x02\x12\xc9\x02\x03\n\x10\n\x08\x04\x05\x02\0\x08\x9c\x08\0\x12\x04\
    \xc5\x02\x04*\n\x11\n\x07\x04\x05\x02\0\x08\x9f\x08\x12\x06\xc6\x02\x04\
    \xc8\x02\x05\nH\n\x02\x04\x06\x12\x06\xcd\x02\0\xe0\x02\x01\x1a:\x20Requ\
    est\x20message\x20for\x20BigtableInstanceAdmin.CreateCluster.\n\n\x0b\n\
    \x03\x04\x06\x01\x12\x04\xcd\x02\x08\x1c\n\xa4\x01\n\x04\x04\x06\x02\0\
    \x12\x06\xd1\x02\x02\xd6\x02\x04\x1a\x93\x01\x20Required.\x20The\x20uniq\
    ue\x20name\x20of\x20the\x20instance\x20in\x20which\x20to\x20create\x20th\
    e\x20new\x20cluster.\n\x20Values\x20are\x20of\x20the\x20form\n\x20`proje\
    cts/{project}/instances/{instance}`.\n\n\x0f\n\x05\x04\x06\x02\0\x04\x12\
    \x06\xd1\x02\x02\xcd\x02\x1e\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xd1\x02\
    \x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xd1\x02\t\x0f\n\r\n\x05\x04\
    \x06\x02\0\x03\x12\x04\xd1\x02\x12\x13\n\x0f\n\x05\x04\x06\x02\0\x08\x12\
    \x06\xd1\x02\x14\xd6\x02\x03\n\x10\n\x08\x04\x06\x02\0\x08\x9c\x08\0\x12\
    \x04\xd2\x02\x04*\n\x11\n\x07\x04\x06\x02\0\x08\x9f\x08\x12\x06\xd3\x02\
    \x04\xd5\x02\x05\n\xc6\x01\n\x04\x04\x06\x02\x01\x12\x04\xdb\x02\x02A\
    \x1a\xb7\x01\x20Required.\x20The\x20ID\x20to\x20be\x20used\x20when\x20re\
    ferring\x20to\x20the\x20new\x20cluster\x20within\x20its\x20instance,\n\
    \x20e.g.,\x20just\x20`mycluster`\x20rather\x20than\n\x20`projects/myproj\
    ect/instances/myinstance/clusters/mycluster`.\n\n\x0f\n\x05\x04\x06\x02\
    \x01\x04\x12\x06\xdb\x02\x02\xd6\x02\x04\n\r\n\x05\x04\x06\x02\x01\x05\
    \x12\x04\xdb\x02\x02\x08\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xdb\x02\t\
    \x13\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\xdb\x02\x16\x17\n\r\n\x05\x04\
    \x06\x02\x01\x08\x12\x04\xdb\x02\x18@\n\x10\n\x08\x04\x06\x02\x01\x08\
    \x9c\x08\0\x12\x04\xdb\x02\x19?\nd\n\x04\x04\x06\x02\x02\x12\x04\xdf\x02\
    \x02?\x1aV\x20Required.\x20The\x20cluster\x20to\x20be\x20created.\n\x20F\
    ields\x20marked\x20`OutputOnly`\x20must\x20be\x20left\x20blank.\n\n\x0f\
    \n\x05\x04\x06\x02\x02\x04\x12\x06\xdf\x02\x02\xdb\x02A\n\r\n\x05\x04\
    \x06\x02\x02\x06\x12\x04\xdf\x02\x02\t\n\r\n\x05\x04\x06\x02\x02\x01\x12\
    \x04\xdf\x02\n\x11\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\xdf\x02\x14\x15\
    \n\r\n\x05\x04\x06\x02\x02\x08\x12\x04\xdf\x02\x16>\n\x10\n\x08\x04\x06\
    \x02\x02\x08\x9c\x08\0\x12\x04\xdf\x02\x17=\nE\n\x02\x04\x07\x12\x06\xe3\
    \x02\0\xec\x02\x01\x1a7\x20Request\x20message\x20for\x20BigtableInstance\
    Admin.GetCluster.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xe3\x02\x08\x19\n\
    \x9c\x01\n\x04\x04\x07\x02\0\x12\x06\xe6\x02\x02\xeb\x02\x04\x1a\x8b\x01\
    \x20Required.\x20The\x20unique\x20name\x20of\x20the\x20requested\x20clus\
    ter.\x20Values\x20are\x20of\x20the\x20form\n\x20`projects/{project}/inst\
    ances/{instance}/clusters/{cluster}`.\n\n\x0f\n\x05\x04\x07\x02\0\x04\
    \x12\x06\xe6\x02\x02\xe3\x02\x1b\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\xe6\
    \x02\x02\x08\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xe6\x02\t\r\n\r\n\x05\
    \x04\x07\x02\0\x03\x12\x04\xe6\x02\x10\x11\n\x0f\n\x05\x04\x07\x02\0\x08\
    \x12\x06\xe6\x02\x12\xeb\x02\x03\n\x10\n\x08\x04\x07\x02\0\x08\x9c\x08\0\
    \x12\x04\xe7\x02\x04*\n\x11\n\x07\x04\x07\x02\0\x08\x9f\x08\x12\x06\xe8\
    \x02\x04\xea\x02\x05\nG\n\x02\x04\x08\x12\x06\xef\x02\0\xfd\x02\x01\x1a9\
    \x20Request\x20message\x20for\x20BigtableInstanceAdmin.ListClusters.\n\n\
    \x0b\n\x03\x04\x08\x01\x12\x04\xef\x02\x08\x1b\n\x9c\x02\n\x04\x04\x08\
    \x02\0\x12\x06\xf4\x02\x02\xf9\x02\x04\x1a\x8b\x02\x20Required.\x20The\
    \x20unique\x20name\x20of\x20the\x20instance\x20for\x20which\x20a\x20list\
    \x20of\x20clusters\x20is\x20requested.\n\x20Values\x20are\x20of\x20the\
    \x20form\x20`projects/{project}/instances/{instance}`.\n\x20Use\x20`{ins\
    tance}\x20=\x20'-'`\x20to\x20list\x20Clusters\x20for\x20all\x20Instances\
    \x20in\x20a\x20project,\n\x20e.g.,\x20`projects/myproject/instances/-`.\
    \n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\xf4\x02\x02\xef\x02\x1d\n\r\n\
    \x05\x04\x08\x02\0\x05\x12\x04\xf4\x02\x02\x08\n\r\n\x05\x04\x08\x02\0\
    \x01\x12\x04\xf4\x02\t\x0f\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\xf4\x02\
    \x12\x13\n\x0f\n\x05\x04\x08\x02\0\x08\x12\x06\xf4\x02\x14\xf9\x02\x03\n\
    \x10\n\x08\x04\x08\x02\0\x08\x9c\x08\0\x12\x04\xf5\x02\x04*\n\x11\n\x07\
    \x04\x08\x02\0\x08\x9f\x08\x12\x06\xf6\x02\x04\xf8\x02\x05\n=\n\x04\x04\
    \x08\x02\x01\x12\x04\xfc\x02\x02\x18\x1a/\x20DEPRECATED:\x20This\x20fiel\
    d\x20is\x20unused\x20and\x20ignored.\n\n\x0f\n\x05\x04\x08\x02\x01\x04\
    \x12\x06\xfc\x02\x02\xf9\x02\x04\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\
    \xfc\x02\x02\x08\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\xfc\x02\t\x13\n\r\
    \n\x05\x04\x08\x02\x01\x03\x12\x04\xfc\x02\x16\x17\nH\n\x02\x04\t\x12\
    \x06\x80\x03\0\x8d\x03\x01\x1a:\x20Response\x20message\x20for\x20Bigtabl\
    eInstanceAdmin.ListClusters.\n\n\x0b\n\x03\x04\t\x01\x12\x04\x80\x03\x08\
    \x1c\n/\n\x04\x04\t\x02\0\x12\x04\x82\x03\x02\x20\x1a!\x20The\x20list\
    \x20of\x20requested\x20clusters.\n\n\r\n\x05\x04\t\x02\0\x04\x12\x04\x82\
    \x03\x02\n\n\r\n\x05\x04\t\x02\0\x06\x12\x04\x82\x03\x0b\x12\n\r\n\x05\
    \x04\t\x02\0\x01\x12\x04\x82\x03\x13\x1b\n\r\n\x05\x04\t\x02\0\x03\x12\
    \x04\x82\x03\x1e\x1f\n\xb6\x02\n\x04\x04\t\x02\x01\x12\x04\x89\x03\x02'\
    \x1a\xa7\x02\x20Locations\x20from\x20which\x20Cluster\x20information\x20\
    could\x20not\x20be\x20retrieved,\n\x20due\x20to\x20an\x20outage\x20or\
    \x20some\x20other\x20transient\x20condition.\n\x20Clusters\x20from\x20th\
    ese\x20locations\x20may\x20be\x20missing\x20from\x20`clusters`,\n\x20or\
    \x20may\x20only\x20have\x20partial\x20information\x20returned.\n\x20Valu\
    es\x20are\x20of\x20the\x20form\x20`projects/<project>/locations/<zone_id\
    >`\n\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\x89\x03\x02\n\n\r\n\x05\x04\t\
    \x02\x01\x05\x12\x04\x89\x03\x0b\x11\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\
    \x89\x03\x12\"\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\x89\x03%&\n=\n\x04\
    \x04\t\x02\x02\x12\x04\x8c\x03\x02\x1d\x1a/\x20DEPRECATED:\x20This\x20fi\
    eld\x20is\x20unused\x20and\x20ignored.\n\n\x0f\n\x05\x04\t\x02\x02\x04\
    \x12\x06\x8c\x03\x02\x89\x03'\n\r\n\x05\x04\t\x02\x02\x05\x12\x04\x8c\
    \x03\x02\x08\n\r\n\x05\x04\t\x02\x02\x01\x12\x04\x8c\x03\t\x18\n\r\n\x05\
    \x04\t\x02\x02\x03\x12\x04\x8c\x03\x1b\x1c\nH\n\x02\x04\n\x12\x06\x90\
    \x03\0\x99\x03\x01\x1a:\x20Request\x20message\x20for\x20BigtableInstance\
    Admin.DeleteCluster.\n\n\x0b\n\x03\x04\n\x01\x12\x04\x90\x03\x08\x1c\n\
    \xa0\x01\n\x04\x04\n\x02\0\x12\x06\x93\x03\x02\x98\x03\x04\x1a\x8f\x01\
    \x20Required.\x20The\x20unique\x20name\x20of\x20the\x20cluster\x20to\x20\
    be\x20deleted.\x20Values\x20are\x20of\x20the\x20form\n\x20`projects/{pro\
    ject}/instances/{instance}/clusters/{cluster}`.\n\n\x0f\n\x05\x04\n\x02\
    \0\x04\x12\x06\x93\x03\x02\x90\x03\x1e\n\r\n\x05\x04\n\x02\0\x05\x12\x04\
    \x93\x03\x02\x08\n\r\n\x05\x04\n\x02\0\x01\x12\x04\x93\x03\t\r\n\r\n\x05\
    \x04\n\x02\0\x03\x12\x04\x93\x03\x10\x11\n\x0f\n\x05\x04\n\x02\0\x08\x12\
    \x06\x93\x03\x12\x98\x03\x03\n\x10\n\x08\x04\n\x02\0\x08\x9c\x08\0\x12\
    \x04\x94\x03\x04*\n\x11\n\x07\x04\n\x02\0\x08\x9f\x08\x12\x06\x95\x03\
    \x04\x97\x03\x05\nJ\n\x02\x04\x0b\x12\x06\x9c\x03\0\xa5\x03\x01\x1a<\x20\
    The\x20metadata\x20for\x20the\x20Operation\x20returned\x20by\x20CreateIn\
    stance.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\x9c\x03\x08\x1e\nZ\n\x04\x04\
    \x0b\x02\0\x12\x04\x9e\x03\x02-\x1aL\x20The\x20request\x20that\x20prompt\
    ed\x20the\x20initiation\x20of\x20this\x20CreateInstance\x20operation.\n\
    \n\x0f\n\x05\x04\x0b\x02\0\x04\x12\x06\x9e\x03\x02\x9c\x03\x20\n\r\n\x05\
    \x04\x0b\x02\0\x06\x12\x04\x9e\x03\x02\x17\n\r\n\x05\x04\x0b\x02\0\x01\
    \x12\x04\x9e\x03\x18(\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\x9e\x03+,\nD\n\
    \x04\x04\x0b\x02\x01\x12\x04\xa1\x03\x02-\x1a6\x20The\x20time\x20at\x20w\
    hich\x20the\x20original\x20request\x20was\x20received.\n\n\x0f\n\x05\x04\
    \x0b\x02\x01\x04\x12\x06\xa1\x03\x02\x9e\x03-\n\r\n\x05\x04\x0b\x02\x01\
    \x06\x12\x04\xa1\x03\x02\x1b\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\xa1\
    \x03\x1c(\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\xa1\x03+,\nU\n\x04\x04\
    \x0b\x02\x02\x12\x04\xa4\x03\x02,\x1aG\x20The\x20time\x20at\x20which\x20\
    the\x20operation\x20failed\x20or\x20was\x20completed\x20successfully.\n\
    \n\x0f\n\x05\x04\x0b\x02\x02\x04\x12\x06\xa4\x03\x02\xa1\x03-\n\r\n\x05\
    \x04\x0b\x02\x02\x06\x12\x04\xa4\x03\x02\x1b\n\r\n\x05\x04\x0b\x02\x02\
    \x01\x12\x04\xa4\x03\x1c'\n\r\n\x05\x04\x0b\x02\x02\x03\x12\x04\xa4\x03*\
    +\nJ\n\x02\x04\x0c\x12\x06\xa8\x03\0\xb1\x03\x01\x1a<\x20The\x20metadata\
    \x20for\x20the\x20Operation\x20returned\x20by\x20UpdateInstance.\n\n\x0b\
    \n\x03\x04\x0c\x01\x12\x04\xa8\x03\x08\x1e\nZ\n\x04\x04\x0c\x02\0\x12\
    \x04\xaa\x03\x024\x1aL\x20The\x20request\x20that\x20prompted\x20the\x20i\
    nitiation\x20of\x20this\x20UpdateInstance\x20operation.\n\n\x0f\n\x05\
    \x04\x0c\x02\0\x04\x12\x06\xaa\x03\x02\xa8\x03\x20\n\r\n\x05\x04\x0c\x02\
    \0\x06\x12\x04\xaa\x03\x02\x1e\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xaa\
    \x03\x1f/\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xaa\x0323\nD\n\x04\x04\x0c\
    \x02\x01\x12\x04\xad\x03\x02-\x1a6\x20The\x20time\x20at\x20which\x20the\
    \x20original\x20request\x20was\x20received.\n\n\x0f\n\x05\x04\x0c\x02\
    \x01\x04\x12\x06\xad\x03\x02\xaa\x034\n\r\n\x05\x04\x0c\x02\x01\x06\x12\
    \x04\xad\x03\x02\x1b\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\xad\x03\x1c(\
    \n\r\n\x05\x04\x0c\x02\x01\x03\x12\x04\xad\x03+,\nU\n\x04\x04\x0c\x02\
    \x02\x12\x04\xb0\x03\x02,\x1aG\x20The\x20time\x20at\x20which\x20the\x20o\
    peration\x20failed\x20or\x20was\x20completed\x20successfully.\n\n\x0f\n\
    \x05\x04\x0c\x02\x02\x04\x12\x06\xb0\x03\x02\xad\x03-\n\r\n\x05\x04\x0c\
    \x02\x02\x06\x12\x04\xb0\x03\x02\x1b\n\r\n\x05\x04\x0c\x02\x02\x01\x12\
    \x04\xb0\x03\x1c'\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\xb0\x03*+\nI\n\
    \x02\x04\r\x12\x06\xb4\x03\0\xbd\x03\x01\x1a;\x20The\x20metadata\x20for\
    \x20the\x20Operation\x20returned\x20by\x20CreateCluster.\n\n\x0b\n\x03\
    \x04\r\x01\x12\x04\xb4\x03\x08\x1d\nY\n\x04\x04\r\x02\0\x12\x04\xb6\x03\
    \x02,\x1aK\x20The\x20request\x20that\x20prompted\x20the\x20initiation\
    \x20of\x20this\x20CreateCluster\x20operation.\n\n\x0f\n\x05\x04\r\x02\0\
    \x04\x12\x06\xb6\x03\x02\xb4\x03\x1f\n\r\n\x05\x04\r\x02\0\x06\x12\x04\
    \xb6\x03\x02\x16\n\r\n\x05\x04\r\x02\0\x01\x12\x04\xb6\x03\x17'\n\r\n\
    \x05\x04\r\x02\0\x03\x12\x04\xb6\x03*+\nD\n\x04\x04\r\x02\x01\x12\x04\
    \xb9\x03\x02-\x1a6\x20The\x20time\x20at\x20which\x20the\x20original\x20r\
    equest\x20was\x20received.\n\n\x0f\n\x05\x04\r\x02\x01\x04\x12\x06\xb9\
    \x03\x02\xb6\x03,\n\r\n\x05\x04\r\x02\x01\x06\x12\x04\xb9\x03\x02\x1b\n\
    \r\n\x05\x04\r\x02\x01\x01\x12\x04\xb9\x03\x1c(\n\r\n\x05\x04\r\x02\x01\
    \x03\x12\x04\xb9\x03+,\nU\n\x04\x04\r\x02\x02\x12\x04\xbc\x03\x02,\x1aG\
    \x20The\x20time\x20at\x20which\x20the\x20operation\x20failed\x20or\x20wa\
    s\x20completed\x20successfully.\n\n\x0f\n\x05\x04\r\x02\x02\x04\x12\x06\
    \xbc\x03\x02\xb9\x03-\n\r\n\x05\x04\r\x02\x02\x06\x12\x04\xbc\x03\x02\
    \x1b\n\r\n\x05\x04\r\x02\x02\x01\x12\x04\xbc\x03\x1c'\n\r\n\x05\x04\r\
    \x02\x02\x03\x12\x04\xbc\x03*+\nI\n\x02\x04\x0e\x12\x06\xc0\x03\0\xc9\
    \x03\x01\x1a;\x20The\x20metadata\x20for\x20the\x20Operation\x20returned\
    \x20by\x20UpdateCluster.\n\n\x0b\n\x03\x04\x0e\x01\x12\x04\xc0\x03\x08\
    \x1d\nY\n\x04\x04\x0e\x02\0\x12\x04\xc2\x03\x02\x1f\x1aK\x20The\x20reque\
    st\x20that\x20prompted\x20the\x20initiation\x20of\x20this\x20UpdateClust\
    er\x20operation.\n\n\x0f\n\x05\x04\x0e\x02\0\x04\x12\x06\xc2\x03\x02\xc0\
    \x03\x1f\n\r\n\x05\x04\x0e\x02\0\x06\x12\x04\xc2\x03\x02\t\n\r\n\x05\x04\
    \x0e\x02\0\x01\x12\x04\xc2\x03\n\x1a\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\
    \xc2\x03\x1d\x1e\nD\n\x04\x04\x0e\x02\x01\x12\x04\xc5\x03\x02-\x1a6\x20T\
    he\x20time\x20at\x20which\x20the\x20original\x20request\x20was\x20receiv\
    ed.\n\n\x0f\n\x05\x04\x0e\x02\x01\x04\x12\x06\xc5\x03\x02\xc2\x03\x1f\n\
    \r\n\x05\x04\x0e\x02\x01\x06\x12\x04\xc5\x03\x02\x1b\n\r\n\x05\x04\x0e\
    \x02\x01\x01\x12\x04\xc5\x03\x1c(\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\
    \xc5\x03+,\nU\n\x04\x04\x0e\x02\x02\x12\x04\xc8\x03\x02,\x1aG\x20The\x20\
    time\x20at\x20which\x20the\x20operation\x20failed\x20or\x20was\x20comple\
    ted\x20successfully.\n\n\x0f\n\x05\x04\x0e\x02\x02\x04\x12\x06\xc8\x03\
    \x02\xc5\x03-\n\r\n\x05\x04\x0e\x02\x02\x06\x12\x04\xc8\x03\x02\x1b\n\r\
    \n\x05\x04\x0e\x02\x02\x01\x12\x04\xc8\x03\x1c'\n\r\n\x05\x04\x0e\x02\
    \x02\x03\x12\x04\xc8\x03*+\nK\n\x02\x04\x0f\x12\x06\xcc\x03\0\xe2\x03\
    \x01\x1a=\x20Request\x20message\x20for\x20BigtableInstanceAdmin.CreateAp\
    pProfile.\n\n\x0b\n\x03\x04\x0f\x01\x12\x04\xcc\x03\x08\x1f\n\xa8\x01\n\
    \x04\x04\x0f\x02\0\x12\x06\xd0\x03\x02\xd5\x03\x04\x1a\x97\x01\x20Requir\
    ed.\x20The\x20unique\x20name\x20of\x20the\x20instance\x20in\x20which\x20\
    to\x20create\x20the\x20new\x20app\x20profile.\n\x20Values\x20are\x20of\
    \x20the\x20form\n\x20`projects/{project}/instances/{instance}`.\n\n\x0f\
    \n\x05\x04\x0f\x02\0\x04\x12\x06\xd0\x03\x02\xcc\x03!\n\r\n\x05\x04\x0f\
    \x02\0\x05\x12\x04\xd0\x03\x02\x08\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\
    \xd0\x03\t\x0f\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xd0\x03\x12\x13\n\x0f\
    \n\x05\x04\x0f\x02\0\x08\x12\x06\xd0\x03\x14\xd5\x03\x03\n\x10\n\x08\x04\
    \x0f\x02\0\x08\x9c\x08\0\x12\x04\xd1\x03\x04*\n\x11\n\x07\x04\x0f\x02\0\
    \x08\x9f\x08\x12\x06\xd2\x03\x04\xd4\x03\x05\n\xcd\x01\n\x04\x04\x0f\x02\
    \x01\x12\x04\xda\x03\x02E\x1a\xbe\x01\x20Required.\x20The\x20ID\x20to\
    \x20be\x20used\x20when\x20referring\x20to\x20the\x20new\x20app\x20profil\
    e\x20within\x20its\n\x20instance,\x20e.g.,\x20just\x20`myprofile`\x20rat\
    her\x20than\n\x20`projects/myproject/instances/myinstance/appProfiles/my\
    profile`.\n\n\x0f\n\x05\x04\x0f\x02\x01\x04\x12\x06\xda\x03\x02\xd5\x03\
    \x04\n\r\n\x05\x04\x0f\x02\x01\x05\x12\x04\xda\x03\x02\x08\n\r\n\x05\x04\
    \x0f\x02\x01\x01\x12\x04\xda\x03\t\x17\n\r\n\x05\x04\x0f\x02\x01\x03\x12\
    \x04\xda\x03\x1a\x1b\n\r\n\x05\x04\x0f\x02\x01\x08\x12\x04\xda\x03\x1cD\
    \n\x10\n\x08\x04\x0f\x02\x01\x08\x9c\x08\0\x12\x04\xda\x03\x1dC\ne\n\x04\
    \x04\x0f\x02\x02\x12\x04\xde\x03\x02F\x1aW\x20Required.\x20The\x20app\
    \x20profile\x20to\x20be\x20created.\n\x20Fields\x20marked\x20`OutputOnly\
    `\x20will\x20be\x20ignored.\n\n\x0f\n\x05\x04\x0f\x02\x02\x04\x12\x06\
    \xde\x03\x02\xda\x03E\n\r\n\x05\x04\x0f\x02\x02\x06\x12\x04\xde\x03\x02\
    \x0c\n\r\n\x05\x04\x0f\x02\x02\x01\x12\x04\xde\x03\r\x18\n\r\n\x05\x04\
    \x0f\x02\x02\x03\x12\x04\xde\x03\x1b\x1c\n\r\n\x05\x04\x0f\x02\x02\x08\
    \x12\x04\xde\x03\x1dE\n\x10\n\x08\x04\x0f\x02\x02\x08\x9c\x08\0\x12\x04\
    \xde\x03\x1eD\nL\n\x04\x04\x0f\x02\x03\x12\x04\xe1\x03\x02\x1b\x1a>\x20I\
    f\x20true,\x20ignore\x20safety\x20checks\x20when\x20creating\x20the\x20a\
    pp\x20profile.\n\n\x0f\n\x05\x04\x0f\x02\x03\x04\x12\x06\xe1\x03\x02\xde\
    \x03F\n\r\n\x05\x04\x0f\x02\x03\x05\x12\x04\xe1\x03\x02\x06\n\r\n\x05\
    \x04\x0f\x02\x03\x01\x12\x04\xe1\x03\x07\x16\n\r\n\x05\x04\x0f\x02\x03\
    \x03\x12\x04\xe1\x03\x19\x1a\nH\n\x02\x04\x10\x12\x06\xe5\x03\0\xee\x03\
    \x01\x1a:\x20Request\x20message\x20for\x20BigtableInstanceAdmin.GetAppPr\
    ofile.\n\n\x0b\n\x03\x04\x10\x01\x12\x04\xe5\x03\x08\x1c\n\xa7\x01\n\x04\
    \x04\x10\x02\0\x12\x06\xe8\x03\x02\xed\x03\x04\x1a\x96\x01\x20Required.\
    \x20The\x20unique\x20name\x20of\x20the\x20requested\x20app\x20profile.\
    \x20Values\x20are\x20of\x20the\x20form\n\x20`projects/{project}/instance\
    s/{instance}/appProfiles/{app_profile}`.\n\n\x0f\n\x05\x04\x10\x02\0\x04\
    \x12\x06\xe8\x03\x02\xe5\x03\x1e\n\r\n\x05\x04\x10\x02\0\x05\x12\x04\xe8\
    \x03\x02\x08\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\xe8\x03\t\r\n\r\n\x05\
    \x04\x10\x02\0\x03\x12\x04\xe8\x03\x10\x11\n\x0f\n\x05\x04\x10\x02\0\x08\
    \x12\x06\xe8\x03\x12\xed\x03\x03\n\x10\n\x08\x04\x10\x02\0\x08\x9c\x08\0\
    \x12\x04\xe9\x03\x04*\n\x11\n\x07\x04\x10\x02\0\x08\x9f\x08\x12\x06\xea\
    \x03\x04\xec\x03\x05\nJ\n\x02\x04\x11\x12\x06\xf1\x03\0\x8b\x04\x01\x1a<\
    \x20Request\x20message\x20for\x20BigtableInstanceAdmin.ListAppProfiles.\
    \n\n\x0b\n\x03\x04\x11\x01\x12\x04\xf1\x03\x08\x1e\n\xa4\x02\n\x04\x04\
    \x11\x02\0\x12\x06\xf7\x03\x02\xfc\x03\x04\x1a\x93\x02\x20Required.\x20T\
    he\x20unique\x20name\x20of\x20the\x20instance\x20for\x20which\x20a\x20li\
    st\x20of\x20app\x20profiles\x20is\n\x20requested.\x20Values\x20are\x20of\
    \x20the\x20form\n\x20`projects/{project}/instances/{instance}`.\n\x20Use\
    \x20`{instance}\x20=\x20'-'`\x20to\x20list\x20AppProfiles\x20for\x20all\
    \x20Instances\x20in\x20a\x20project,\n\x20e.g.,\x20`projects/myproject/i\
    nstances/-`.\n\n\x0f\n\x05\x04\x11\x02\0\x04\x12\x06\xf7\x03\x02\xf1\x03\
    \x20\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\xf7\x03\x02\x08\n\r\n\x05\x04\
    \x11\x02\0\x01\x12\x04\xf7\x03\t\x0f\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\
    \xf7\x03\x12\x13\n\x0f\n\x05\x04\x11\x02\0\x08\x12\x06\xf7\x03\x14\xfc\
    \x03\x03\n\x10\n\x08\x04\x11\x02\0\x08\x9c\x08\0\x12\x04\xf8\x03\x04*\n\
    \x11\n\x07\x04\x11\x02\0\x08\x9f\x08\x12\x06\xf9\x03\x04\xfb\x03\x05\n\
    \xbd\x03\n\x04\x04\x11\x02\x01\x12\x04\x87\x04\x02\x16\x1a\xae\x03\x20Ma\
    ximum\x20number\x20of\x20results\x20per\x20page.\n\n\x20A\x20page_size\
    \x20of\x20zero\x20lets\x20the\x20server\x20choose\x20the\x20number\x20of\
    \x20items\x20to\x20return.\n\x20A\x20page_size\x20which\x20is\x20strictl\
    y\x20positive\x20will\x20return\x20at\x20most\x20that\x20many\x20items.\
    \n\x20A\x20negative\x20page_size\x20will\x20cause\x20an\x20error.\n\n\
    \x20Following\x20the\x20first\x20request,\x20subsequent\x20paginated\x20\
    calls\x20are\x20not\x20required\n\x20to\x20pass\x20a\x20page_size.\x20If\
    \x20a\x20page_size\x20is\x20set\x20in\x20subsequent\x20calls,\x20it\x20m\
    ust\n\x20match\x20the\x20page_size\x20given\x20in\x20the\x20first\x20req\
    uest.\n\n\x0f\n\x05\x04\x11\x02\x01\x04\x12\x06\x87\x04\x02\xfc\x03\x04\
    \n\r\n\x05\x04\x11\x02\x01\x05\x12\x04\x87\x04\x02\x07\n\r\n\x05\x04\x11\
    \x02\x01\x01\x12\x04\x87\x04\x08\x11\n\r\n\x05\x04\x11\x02\x01\x03\x12\
    \x04\x87\x04\x14\x15\nK\n\x04\x04\x11\x02\x02\x12\x04\x8a\x04\x02\x18\
    \x1a=\x20The\x20value\x20of\x20`next_page_token`\x20returned\x20by\x20a\
    \x20previous\x20call.\n\n\x0f\n\x05\x04\x11\x02\x02\x04\x12\x06\x8a\x04\
    \x02\x87\x04\x16\n\r\n\x05\x04\x11\x02\x02\x05\x12\x04\x8a\x04\x02\x08\n\
    \r\n\x05\x04\x11\x02\x02\x01\x12\x04\x8a\x04\t\x13\n\r\n\x05\x04\x11\x02\
    \x02\x03\x12\x04\x8a\x04\x16\x17\nK\n\x02\x04\x12\x12\x06\x8e\x04\0\x9c\
    \x04\x01\x1a=\x20Response\x20message\x20for\x20BigtableInstanceAdmin.Lis\
    tAppProfiles.\n\n\x0b\n\x03\x04\x12\x01\x12\x04\x8e\x04\x08\x1f\n3\n\x04\
    \x04\x12\x02\0\x12\x04\x90\x04\x02'\x1a%\x20The\x20list\x20of\x20request\
    ed\x20app\x20profiles.\n\n\r\n\x05\x04\x12\x02\0\x04\x12\x04\x90\x04\x02\
    \n\n\r\n\x05\x04\x12\x02\0\x06\x12\x04\x90\x04\x0b\x15\n\r\n\x05\x04\x12\
    \x02\0\x01\x12\x04\x90\x04\x16\"\n\r\n\x05\x04\x12\x02\0\x03\x12\x04\x90\
    \x04%&\n\xaa\x01\n\x04\x04\x12\x02\x01\x12\x04\x95\x04\x02\x1d\x1a\x9b\
    \x01\x20Set\x20if\x20not\x20all\x20app\x20profiles\x20could\x20be\x20ret\
    urned\x20in\x20a\x20single\x20response.\n\x20Pass\x20this\x20value\x20to\
    \x20`page_token`\x20in\x20another\x20request\x20to\x20get\x20the\x20next\
    \n\x20page\x20of\x20results.\n\n\x0f\n\x05\x04\x12\x02\x01\x04\x12\x06\
    \x95\x04\x02\x90\x04'\n\r\n\x05\x04\x12\x02\x01\x05\x12\x04\x95\x04\x02\
    \x08\n\r\n\x05\x04\x12\x02\x01\x01\x12\x04\x95\x04\t\x18\n\r\n\x05\x04\
    \x12\x02\x01\x03\x12\x04\x95\x04\x1b\x1c\n\x90\x02\n\x04\x04\x12\x02\x02\
    \x12\x04\x9b\x04\x02'\x1a\x81\x02\x20Locations\x20from\x20which\x20AppPr\
    ofile\x20information\x20could\x20not\x20be\x20retrieved,\n\x20due\x20to\
    \x20an\x20outage\x20or\x20some\x20other\x20transient\x20condition.\n\x20\
    AppProfiles\x20from\x20these\x20locations\x20may\x20be\x20missing\x20fro\
    m\x20`app_profiles`.\n\x20Values\x20are\x20of\x20the\x20form\x20`project\
    s/<project>/locations/<zone_id>`\n\n\r\n\x05\x04\x12\x02\x02\x04\x12\x04\
    \x9b\x04\x02\n\n\r\n\x05\x04\x12\x02\x02\x05\x12\x04\x9b\x04\x0b\x11\n\r\
    \n\x05\x04\x12\x02\x02\x01\x12\x04\x9b\x04\x12\"\n\r\n\x05\x04\x12\x02\
    \x02\x03\x12\x04\x9b\x04%&\nK\n\x02\x04\x13\x12\x06\x9f\x04\0\xa9\x04\
    \x01\x1a=\x20Request\x20message\x20for\x20BigtableInstanceAdmin.UpdateAp\
    pProfile.\n\n\x0b\n\x03\x04\x13\x01\x12\x04\x9f\x04\x08\x1f\n[\n\x04\x04\
    \x13\x02\0\x12\x04\xa1\x04\x02F\x1aM\x20Required.\x20The\x20app\x20profi\
    le\x20which\x20will\x20(partially)\x20replace\x20the\x20current\x20value\
    .\n\n\x0f\n\x05\x04\x13\x02\0\x04\x12\x06\xa1\x04\x02\x9f\x04!\n\r\n\x05\
    \x04\x13\x02\0\x06\x12\x04\xa1\x04\x02\x0c\n\r\n\x05\x04\x13\x02\0\x01\
    \x12\x04\xa1\x04\r\x18\n\r\n\x05\x04\x13\x02\0\x03\x12\x04\xa1\x04\x1b\
    \x1c\n\r\n\x05\x04\x13\x02\0\x08\x12\x04\xa1\x04\x1dE\n\x10\n\x08\x04\
    \x13\x02\0\x08\x9c\x08\0\x12\x04\xa1\x04\x1eD\n|\n\x04\x04\x13\x02\x01\
    \x12\x04\xa5\x04\x02U\x1an\x20Required.\x20The\x20subset\x20of\x20app\
    \x20profile\x20fields\x20which\x20should\x20be\x20replaced.\n\x20If\x20u\
    nset,\x20all\x20fields\x20will\x20be\x20replaced.\n\n\x0f\n\x05\x04\x13\
    \x02\x01\x04\x12\x06\xa5\x04\x02\xa1\x04F\n\r\n\x05\x04\x13\x02\x01\x06\
    \x12\x04\xa5\x04\x02\x1b\n\r\n\x05\x04\x13\x02\x01\x01\x12\x04\xa5\x04\
    \x1c'\n\r\n\x05\x04\x13\x02\x01\x03\x12\x04\xa5\x04*+\n\r\n\x05\x04\x13\
    \x02\x01\x08\x12\x04\xa5\x04,T\n\x10\n\x08\x04\x13\x02\x01\x08\x9c\x08\0\
    \x12\x04\xa5\x04-S\nL\n\x04\x04\x13\x02\x02\x12\x04\xa8\x04\x02\x1b\x1a>\
    \x20If\x20true,\x20ignore\x20safety\x20checks\x20when\x20updating\x20the\
    \x20app\x20profile.\n\n\x0f\n\x05\x04\x13\x02\x02\x04\x12\x06\xa8\x04\
    \x02\xa5\x04U\n\r\n\x05\x04\x13\x02\x02\x05\x12\x04\xa8\x04\x02\x06\n\r\
    \n\x05\x04\x13\x02\x02\x01\x12\x04\xa8\x04\x07\x16\n\r\n\x05\x04\x13\x02\
    \x02\x03\x12\x04\xa8\x04\x19\x1a\nK\n\x02\x04\x14\x12\x06\xac\x04\0\xb8\
    \x04\x01\x1a=\x20Request\x20message\x20for\x20BigtableInstanceAdmin.Dele\
    teAppProfile.\n\n\x0b\n\x03\x04\x14\x01\x12\x04\xac\x04\x08\x1f\n\xab\
    \x01\n\x04\x04\x14\x02\0\x12\x06\xaf\x04\x02\xb4\x04\x04\x1a\x9a\x01\x20\
    Required.\x20The\x20unique\x20name\x20of\x20the\x20app\x20profile\x20to\
    \x20be\x20deleted.\x20Values\x20are\x20of\x20the\x20form\n\x20`projects/\
    {project}/instances/{instance}/appProfiles/{app_profile}`.\n\n\x0f\n\x05\
    \x04\x14\x02\0\x04\x12\x06\xaf\x04\x02\xac\x04!\n\r\n\x05\x04\x14\x02\0\
    \x05\x12\x04\xaf\x04\x02\x08\n\r\n\x05\x04\x14\x02\0\x01\x12\x04\xaf\x04\
    \t\r\n\r\n\x05\x04\x14\x02\0\x03\x12\x04\xaf\x04\x10\x11\n\x0f\n\x05\x04\
    \x14\x02\0\x08\x12\x06\xaf\x04\x12\xb4\x04\x03\n\x10\n\x08\x04\x14\x02\0\
    \x08\x9c\x08\0\x12\x04\xb0\x04\x04*\n\x11\n\x07\x04\x14\x02\0\x08\x9f\
    \x08\x12\x06\xb1\x04\x04\xb3\x04\x05\nV\n\x04\x04\x14\x02\x01\x12\x04\
    \xb7\x04\x02D\x1aH\x20Required.\x20If\x20true,\x20ignore\x20safety\x20ch\
    ecks\x20when\x20deleting\x20the\x20app\x20profile.\n\n\x0f\n\x05\x04\x14\
    \x02\x01\x04\x12\x06\xb7\x04\x02\xb4\x04\x04\n\r\n\x05\x04\x14\x02\x01\
    \x05\x12\x04\xb7\x04\x02\x06\n\r\n\x05\x04\x14\x02\x01\x01\x12\x04\xb7\
    \x04\x07\x16\n\r\n\x05\x04\x14\x02\x01\x03\x12\x04\xb7\x04\x19\x1a\n\r\n\
    \x05\x04\x14\x02\x01\x08\x12\x04\xb7\x04\x1bC\n\x10\n\x08\x04\x14\x02\
    \x01\x08\x9c\x08\0\x12\x04\xb7\x04\x1cB\nL\n\x02\x04\x15\x12\x06\xbb\x04\
    \0\xbd\x04\x01\x1a>\x20The\x20metadata\x20for\x20the\x20Operation\x20ret\
    urned\x20by\x20UpdateAppProfile.\n\n\x0b\n\x03\x04\x15\x01\x12\x04\xbb\
    \x04\x08\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
