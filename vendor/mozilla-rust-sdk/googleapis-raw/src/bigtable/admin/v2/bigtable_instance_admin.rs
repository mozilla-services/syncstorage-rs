// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/bigtable/admin/v2/bigtable_instance_admin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct CreateInstanceRequest {
    // message fields
    pub parent: ::std::string::String,
    pub instance_id: ::std::string::String,
    pub instance: ::protobuf::SingularPtrField<super::instance::Instance>,
    pub clusters: ::std::collections::HashMap<::std::string::String, super::instance::Cluster>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInstanceRequest {
    fn default() -> &'a CreateInstanceRequest {
        <CreateInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceRequest {
    pub fn new() -> CreateInstanceRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string instance_id = 2;


    pub fn get_instance_id(&self) -> &str {
        &self.instance_id
    }
    pub fn clear_instance_id(&mut self) {
        self.instance_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_instance_id(&mut self, v: ::std::string::String) {
        self.instance_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance_id(&mut self) -> &mut ::std::string::String {
        &mut self.instance_id
    }

    // Take field
    pub fn take_instance_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.instance_id, ::std::string::String::new())
    }

    // .google.bigtable.admin.v2.Instance instance = 3;


    pub fn get_instance(&self) -> &super::instance::Instance {
        self.instance.as_ref().unwrap_or_else(|| <super::instance::Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: super::instance::Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut super::instance::Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> super::instance::Instance {
        self.instance.take().unwrap_or_else(|| super::instance::Instance::new())
    }

    // repeated .google.bigtable.admin.v2.CreateInstanceRequest.ClustersEntry clusters = 4;


    pub fn get_clusters(&self) -> &::std::collections::HashMap<::std::string::String, super::instance::Cluster> {
        &self.clusters
    }
    pub fn clear_clusters(&mut self) {
        self.clusters.clear();
    }

    // Param is passed by value, moved
    pub fn set_clusters(&mut self, v: ::std::collections::HashMap<::std::string::String, super::instance::Cluster>) {
        self.clusters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clusters(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::instance::Cluster> {
        &mut self.clusters
    }

    // Take field
    pub fn take_clusters(&mut self) -> ::std::collections::HashMap<::std::string::String, super::instance::Cluster> {
        ::std::mem::replace(&mut self.clusters, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for CreateInstanceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.instance_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(wire_type, is, &mut self.clusters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.instance_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.instance_id);
        }
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(4, &self.clusters);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.instance_id.is_empty() {
            os.write_string(2, &self.instance_id)?;
        }
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(4, &self.clusters, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInstanceRequest {
        CreateInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateInstanceRequest| { &m.parent },
                |m: &mut CreateInstanceRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "instance_id",
                |m: &CreateInstanceRequest| { &m.instance_id },
                |m: &mut CreateInstanceRequest| { &mut m.instance_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Instance>>(
                "instance",
                |m: &CreateInstanceRequest| { &m.instance },
                |m: &mut CreateInstanceRequest| { &mut m.instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(
                "clusters",
                |m: &CreateInstanceRequest| { &m.clusters },
                |m: &mut CreateInstanceRequest| { &mut m.clusters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateInstanceRequest>(
                "CreateInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<CreateInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateInstanceRequest::new)
    }
}

impl ::protobuf::Clear for CreateInstanceRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.instance_id.clear();
        self.instance.clear();
        self.clusters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetInstanceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetInstanceRequest {
    fn default() -> &'a GetInstanceRequest {
        <GetInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetInstanceRequest {
    pub fn new() -> GetInstanceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetInstanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetInstanceRequest {
        GetInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetInstanceRequest| { &m.name },
                |m: &mut GetInstanceRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetInstanceRequest>(
                "GetInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<GetInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetInstanceRequest::new)
    }
}

impl ::protobuf::Clear for GetInstanceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstancesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstancesRequest {
    fn default() -> &'a ListInstancesRequest {
        <ListInstancesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListInstancesRequest {
    pub fn new() -> ListInstancesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string page_token = 2;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstancesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(2, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstancesRequest {
        ListInstancesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListInstancesRequest| { &m.parent },
                |m: &mut ListInstancesRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListInstancesRequest| { &m.page_token },
                |m: &mut ListInstancesRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstancesRequest>(
                "ListInstancesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstancesRequest {
        static instance: ::protobuf::rt::LazyV2<ListInstancesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstancesRequest::new)
    }
}

impl ::protobuf::Clear for ListInstancesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstancesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstancesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListInstancesResponse {
    // message fields
    pub instances: ::protobuf::RepeatedField<super::instance::Instance>,
    pub failed_locations: ::protobuf::RepeatedField<::std::string::String>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListInstancesResponse {
    fn default() -> &'a ListInstancesResponse {
        <ListInstancesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListInstancesResponse {
    pub fn new() -> ListInstancesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.bigtable.admin.v2.Instance instances = 1;


    pub fn get_instances(&self) -> &[super::instance::Instance] {
        &self.instances
    }
    pub fn clear_instances(&mut self) {
        self.instances.clear();
    }

    // Param is passed by value, moved
    pub fn set_instances(&mut self, v: ::protobuf::RepeatedField<super::instance::Instance>) {
        self.instances = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instances(&mut self) -> &mut ::protobuf::RepeatedField<super::instance::Instance> {
        &mut self.instances
    }

    // Take field
    pub fn take_instances(&mut self) -> ::protobuf::RepeatedField<super::instance::Instance> {
        ::std::mem::replace(&mut self.instances, ::protobuf::RepeatedField::new())
    }

    // repeated string failed_locations = 2;


    pub fn get_failed_locations(&self) -> &[::std::string::String] {
        &self.failed_locations
    }
    pub fn clear_failed_locations(&mut self) {
        self.failed_locations.clear();
    }

    // Param is passed by value, moved
    pub fn set_failed_locations(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.failed_locations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_failed_locations(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.failed_locations
    }

    // Take field
    pub fn take_failed_locations(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.failed_locations, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 3;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListInstancesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.instances {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instances)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.failed_locations)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.instances {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.failed_locations {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.instances {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.failed_locations {
            os.write_string(2, &v)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(3, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListInstancesResponse {
        ListInstancesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Instance>>(
                "instances",
                |m: &ListInstancesResponse| { &m.instances },
                |m: &mut ListInstancesResponse| { &mut m.instances },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "failed_locations",
                |m: &ListInstancesResponse| { &m.failed_locations },
                |m: &mut ListInstancesResponse| { &mut m.failed_locations },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListInstancesResponse| { &m.next_page_token },
                |m: &mut ListInstancesResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListInstancesResponse>(
                "ListInstancesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListInstancesResponse {
        static instance: ::protobuf::rt::LazyV2<ListInstancesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListInstancesResponse::new)
    }
}

impl ::protobuf::Clear for ListInstancesResponse {
    fn clear(&mut self) {
        self.instances.clear();
        self.failed_locations.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListInstancesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListInstancesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartialUpdateInstanceRequest {
    // message fields
    pub instance: ::protobuf::SingularPtrField<super::instance::Instance>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartialUpdateInstanceRequest {
    fn default() -> &'a PartialUpdateInstanceRequest {
        <PartialUpdateInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl PartialUpdateInstanceRequest {
    pub fn new() -> PartialUpdateInstanceRequest {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.Instance instance = 1;


    pub fn get_instance(&self) -> &super::instance::Instance {
        self.instance.as_ref().unwrap_or_else(|| <super::instance::Instance as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instance(&mut self) {
        self.instance.clear();
    }

    pub fn has_instance(&self) -> bool {
        self.instance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instance(&mut self, v: super::instance::Instance) {
        self.instance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instance(&mut self) -> &mut super::instance::Instance {
        if self.instance.is_none() {
            self.instance.set_default();
        }
        self.instance.as_mut().unwrap()
    }

    // Take field
    pub fn take_instance(&mut self) -> super::instance::Instance {
        self.instance.take().unwrap_or_else(|| super::instance::Instance::new())
    }

    // .google.protobuf.FieldMask update_mask = 2;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for PartialUpdateInstanceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.instance {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instance.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartialUpdateInstanceRequest {
        PartialUpdateInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Instance>>(
                "instance",
                |m: &PartialUpdateInstanceRequest| { &m.instance },
                |m: &mut PartialUpdateInstanceRequest| { &mut m.instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &PartialUpdateInstanceRequest| { &m.update_mask },
                |m: &mut PartialUpdateInstanceRequest| { &mut m.update_mask },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartialUpdateInstanceRequest>(
                "PartialUpdateInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PartialUpdateInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<PartialUpdateInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PartialUpdateInstanceRequest::new)
    }
}

impl ::protobuf::Clear for PartialUpdateInstanceRequest {
    fn clear(&mut self) {
        self.instance.clear();
        self.update_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartialUpdateInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartialUpdateInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteInstanceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteInstanceRequest {
    fn default() -> &'a DeleteInstanceRequest {
        <DeleteInstanceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteInstanceRequest {
    pub fn new() -> DeleteInstanceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteInstanceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteInstanceRequest {
        DeleteInstanceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteInstanceRequest| { &m.name },
                |m: &mut DeleteInstanceRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteInstanceRequest>(
                "DeleteInstanceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteInstanceRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteInstanceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteInstanceRequest::new)
    }
}

impl ::protobuf::Clear for DeleteInstanceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteInstanceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteInstanceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateClusterRequest {
    // message fields
    pub parent: ::std::string::String,
    pub cluster_id: ::std::string::String,
    pub cluster: ::protobuf::SingularPtrField<super::instance::Cluster>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateClusterRequest {
    fn default() -> &'a CreateClusterRequest {
        <CreateClusterRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateClusterRequest {
    pub fn new() -> CreateClusterRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string cluster_id = 2;


    pub fn get_cluster_id(&self) -> &str {
        &self.cluster_id
    }
    pub fn clear_cluster_id(&mut self) {
        self.cluster_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: ::std::string::String) {
        self.cluster_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_id(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_id
    }

    // Take field
    pub fn take_cluster_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_id, ::std::string::String::new())
    }

    // .google.bigtable.admin.v2.Cluster cluster = 3;


    pub fn get_cluster(&self) -> &super::instance::Cluster {
        self.cluster.as_ref().unwrap_or_else(|| <super::instance::Cluster as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cluster(&mut self) {
        self.cluster.clear();
    }

    pub fn has_cluster(&self) -> bool {
        self.cluster.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: super::instance::Cluster) {
        self.cluster = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster(&mut self) -> &mut super::instance::Cluster {
        if self.cluster.is_none() {
            self.cluster.set_default();
        }
        self.cluster.as_mut().unwrap()
    }

    // Take field
    pub fn take_cluster(&mut self) -> super::instance::Cluster {
        self.cluster.take().unwrap_or_else(|| super::instance::Cluster::new())
    }
}

impl ::protobuf::Message for CreateClusterRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.cluster {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cluster)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.cluster_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cluster_id);
        }
        if let Some(ref v) = self.cluster.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.cluster_id.is_empty() {
            os.write_string(2, &self.cluster_id)?;
        }
        if let Some(ref v) = self.cluster.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateClusterRequest {
        CreateClusterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateClusterRequest| { &m.parent },
                |m: &mut CreateClusterRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_id",
                |m: &CreateClusterRequest| { &m.cluster_id },
                |m: &mut CreateClusterRequest| { &mut m.cluster_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(
                "cluster",
                |m: &CreateClusterRequest| { &m.cluster },
                |m: &mut CreateClusterRequest| { &mut m.cluster },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateClusterRequest>(
                "CreateClusterRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateClusterRequest {
        static instance: ::protobuf::rt::LazyV2<CreateClusterRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateClusterRequest::new)
    }
}

impl ::protobuf::Clear for CreateClusterRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.cluster_id.clear();
        self.cluster.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateClusterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateClusterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetClusterRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetClusterRequest {
    fn default() -> &'a GetClusterRequest {
        <GetClusterRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetClusterRequest {
    pub fn new() -> GetClusterRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetClusterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetClusterRequest {
        GetClusterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetClusterRequest| { &m.name },
                |m: &mut GetClusterRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetClusterRequest>(
                "GetClusterRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetClusterRequest {
        static instance: ::protobuf::rt::LazyV2<GetClusterRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetClusterRequest::new)
    }
}

impl ::protobuf::Clear for GetClusterRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetClusterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetClusterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListClustersRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListClustersRequest {
    fn default() -> &'a ListClustersRequest {
        <ListClustersRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListClustersRequest {
    pub fn new() -> ListClustersRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string page_token = 2;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListClustersRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(2, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListClustersRequest {
        ListClustersRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListClustersRequest| { &m.parent },
                |m: &mut ListClustersRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListClustersRequest| { &m.page_token },
                |m: &mut ListClustersRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListClustersRequest>(
                "ListClustersRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListClustersRequest {
        static instance: ::protobuf::rt::LazyV2<ListClustersRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListClustersRequest::new)
    }
}

impl ::protobuf::Clear for ListClustersRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListClustersRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListClustersRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListClustersResponse {
    // message fields
    pub clusters: ::protobuf::RepeatedField<super::instance::Cluster>,
    pub failed_locations: ::protobuf::RepeatedField<::std::string::String>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListClustersResponse {
    fn default() -> &'a ListClustersResponse {
        <ListClustersResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListClustersResponse {
    pub fn new() -> ListClustersResponse {
        ::std::default::Default::default()
    }

    // repeated .google.bigtable.admin.v2.Cluster clusters = 1;


    pub fn get_clusters(&self) -> &[super::instance::Cluster] {
        &self.clusters
    }
    pub fn clear_clusters(&mut self) {
        self.clusters.clear();
    }

    // Param is passed by value, moved
    pub fn set_clusters(&mut self, v: ::protobuf::RepeatedField<super::instance::Cluster>) {
        self.clusters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clusters(&mut self) -> &mut ::protobuf::RepeatedField<super::instance::Cluster> {
        &mut self.clusters
    }

    // Take field
    pub fn take_clusters(&mut self) -> ::protobuf::RepeatedField<super::instance::Cluster> {
        ::std::mem::replace(&mut self.clusters, ::protobuf::RepeatedField::new())
    }

    // repeated string failed_locations = 2;


    pub fn get_failed_locations(&self) -> &[::std::string::String] {
        &self.failed_locations
    }
    pub fn clear_failed_locations(&mut self) {
        self.failed_locations.clear();
    }

    // Param is passed by value, moved
    pub fn set_failed_locations(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.failed_locations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_failed_locations(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.failed_locations
    }

    // Take field
    pub fn take_failed_locations(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.failed_locations, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 3;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListClustersResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.clusters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.clusters)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.failed_locations)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.clusters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.failed_locations {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.clusters {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.failed_locations {
            os.write_string(2, &v)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(3, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListClustersResponse {
        ListClustersResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(
                "clusters",
                |m: &ListClustersResponse| { &m.clusters },
                |m: &mut ListClustersResponse| { &mut m.clusters },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "failed_locations",
                |m: &ListClustersResponse| { &m.failed_locations },
                |m: &mut ListClustersResponse| { &mut m.failed_locations },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListClustersResponse| { &m.next_page_token },
                |m: &mut ListClustersResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListClustersResponse>(
                "ListClustersResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListClustersResponse {
        static instance: ::protobuf::rt::LazyV2<ListClustersResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListClustersResponse::new)
    }
}

impl ::protobuf::Clear for ListClustersResponse {
    fn clear(&mut self) {
        self.clusters.clear();
        self.failed_locations.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListClustersResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListClustersResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteClusterRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteClusterRequest {
    fn default() -> &'a DeleteClusterRequest {
        <DeleteClusterRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteClusterRequest {
    pub fn new() -> DeleteClusterRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteClusterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteClusterRequest {
        DeleteClusterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteClusterRequest| { &m.name },
                |m: &mut DeleteClusterRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteClusterRequest>(
                "DeleteClusterRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteClusterRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteClusterRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteClusterRequest::new)
    }
}

impl ::protobuf::Clear for DeleteClusterRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteClusterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteClusterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateInstanceMetadata {
    // message fields
    pub original_request: ::protobuf::SingularPtrField<CreateInstanceRequest>,
    pub request_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub finish_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateInstanceMetadata {
    fn default() -> &'a CreateInstanceMetadata {
        <CreateInstanceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CreateInstanceMetadata {
    pub fn new() -> CreateInstanceMetadata {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.CreateInstanceRequest original_request = 1;


    pub fn get_original_request(&self) -> &CreateInstanceRequest {
        self.original_request.as_ref().unwrap_or_else(|| <CreateInstanceRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_original_request(&mut self) {
        self.original_request.clear();
    }

    pub fn has_original_request(&self) -> bool {
        self.original_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_request(&mut self, v: CreateInstanceRequest) {
        self.original_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_request(&mut self) -> &mut CreateInstanceRequest {
        if self.original_request.is_none() {
            self.original_request.set_default();
        }
        self.original_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_request(&mut self) -> CreateInstanceRequest {
        self.original_request.take().unwrap_or_else(|| CreateInstanceRequest::new())
    }

    // .google.protobuf.Timestamp request_time = 2;


    pub fn get_request_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.request_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_time(&mut self) {
        self.request_time.clear();
    }

    pub fn has_request_time(&self) -> bool {
        self.request_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.request_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.request_time.is_none() {
            self.request_time.set_default();
        }
        self.request_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.request_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp finish_time = 3;


    pub fn get_finish_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.finish_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_finish_time(&mut self) {
        self.finish_time.clear();
    }

    pub fn has_finish_time(&self) -> bool {
        self.finish_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.finish_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_finish_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.finish_time.is_none() {
            self.finish_time.set_default();
        }
        self.finish_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_finish_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.finish_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for CreateInstanceMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.original_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.finish_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.original_request)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.finish_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.original_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.original_request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateInstanceMetadata {
        CreateInstanceMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateInstanceRequest>>(
                "original_request",
                |m: &CreateInstanceMetadata| { &m.original_request },
                |m: &mut CreateInstanceMetadata| { &mut m.original_request },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "request_time",
                |m: &CreateInstanceMetadata| { &m.request_time },
                |m: &mut CreateInstanceMetadata| { &mut m.request_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "finish_time",
                |m: &CreateInstanceMetadata| { &m.finish_time },
                |m: &mut CreateInstanceMetadata| { &mut m.finish_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateInstanceMetadata>(
                "CreateInstanceMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateInstanceMetadata {
        static instance: ::protobuf::rt::LazyV2<CreateInstanceMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateInstanceMetadata::new)
    }
}

impl ::protobuf::Clear for CreateInstanceMetadata {
    fn clear(&mut self) {
        self.original_request.clear();
        self.request_time.clear();
        self.finish_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateInstanceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateInstanceMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateInstanceMetadata {
    // message fields
    pub original_request: ::protobuf::SingularPtrField<PartialUpdateInstanceRequest>,
    pub request_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub finish_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateInstanceMetadata {
    fn default() -> &'a UpdateInstanceMetadata {
        <UpdateInstanceMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateInstanceMetadata {
    pub fn new() -> UpdateInstanceMetadata {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.PartialUpdateInstanceRequest original_request = 1;


    pub fn get_original_request(&self) -> &PartialUpdateInstanceRequest {
        self.original_request.as_ref().unwrap_or_else(|| <PartialUpdateInstanceRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_original_request(&mut self) {
        self.original_request.clear();
    }

    pub fn has_original_request(&self) -> bool {
        self.original_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_request(&mut self, v: PartialUpdateInstanceRequest) {
        self.original_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_request(&mut self) -> &mut PartialUpdateInstanceRequest {
        if self.original_request.is_none() {
            self.original_request.set_default();
        }
        self.original_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_request(&mut self) -> PartialUpdateInstanceRequest {
        self.original_request.take().unwrap_or_else(|| PartialUpdateInstanceRequest::new())
    }

    // .google.protobuf.Timestamp request_time = 2;


    pub fn get_request_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.request_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_time(&mut self) {
        self.request_time.clear();
    }

    pub fn has_request_time(&self) -> bool {
        self.request_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.request_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.request_time.is_none() {
            self.request_time.set_default();
        }
        self.request_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.request_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp finish_time = 3;


    pub fn get_finish_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.finish_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_finish_time(&mut self) {
        self.finish_time.clear();
    }

    pub fn has_finish_time(&self) -> bool {
        self.finish_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.finish_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_finish_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.finish_time.is_none() {
            self.finish_time.set_default();
        }
        self.finish_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_finish_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.finish_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for UpdateInstanceMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.original_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.finish_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.original_request)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.finish_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.original_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.original_request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateInstanceMetadata {
        UpdateInstanceMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PartialUpdateInstanceRequest>>(
                "original_request",
                |m: &UpdateInstanceMetadata| { &m.original_request },
                |m: &mut UpdateInstanceMetadata| { &mut m.original_request },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "request_time",
                |m: &UpdateInstanceMetadata| { &m.request_time },
                |m: &mut UpdateInstanceMetadata| { &mut m.request_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "finish_time",
                |m: &UpdateInstanceMetadata| { &m.finish_time },
                |m: &mut UpdateInstanceMetadata| { &mut m.finish_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateInstanceMetadata>(
                "UpdateInstanceMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateInstanceMetadata {
        static instance: ::protobuf::rt::LazyV2<UpdateInstanceMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateInstanceMetadata::new)
    }
}

impl ::protobuf::Clear for UpdateInstanceMetadata {
    fn clear(&mut self) {
        self.original_request.clear();
        self.request_time.clear();
        self.finish_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateInstanceMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateInstanceMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateClusterMetadata {
    // message fields
    pub original_request: ::protobuf::SingularPtrField<CreateClusterRequest>,
    pub request_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub finish_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateClusterMetadata {
    fn default() -> &'a CreateClusterMetadata {
        <CreateClusterMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CreateClusterMetadata {
    pub fn new() -> CreateClusterMetadata {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.CreateClusterRequest original_request = 1;


    pub fn get_original_request(&self) -> &CreateClusterRequest {
        self.original_request.as_ref().unwrap_or_else(|| <CreateClusterRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_original_request(&mut self) {
        self.original_request.clear();
    }

    pub fn has_original_request(&self) -> bool {
        self.original_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_request(&mut self, v: CreateClusterRequest) {
        self.original_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_request(&mut self) -> &mut CreateClusterRequest {
        if self.original_request.is_none() {
            self.original_request.set_default();
        }
        self.original_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_request(&mut self) -> CreateClusterRequest {
        self.original_request.take().unwrap_or_else(|| CreateClusterRequest::new())
    }

    // .google.protobuf.Timestamp request_time = 2;


    pub fn get_request_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.request_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_time(&mut self) {
        self.request_time.clear();
    }

    pub fn has_request_time(&self) -> bool {
        self.request_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.request_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.request_time.is_none() {
            self.request_time.set_default();
        }
        self.request_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.request_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp finish_time = 3;


    pub fn get_finish_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.finish_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_finish_time(&mut self) {
        self.finish_time.clear();
    }

    pub fn has_finish_time(&self) -> bool {
        self.finish_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.finish_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_finish_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.finish_time.is_none() {
            self.finish_time.set_default();
        }
        self.finish_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_finish_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.finish_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for CreateClusterMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.original_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.finish_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.original_request)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.finish_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.original_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.original_request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateClusterMetadata {
        CreateClusterMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateClusterRequest>>(
                "original_request",
                |m: &CreateClusterMetadata| { &m.original_request },
                |m: &mut CreateClusterMetadata| { &mut m.original_request },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "request_time",
                |m: &CreateClusterMetadata| { &m.request_time },
                |m: &mut CreateClusterMetadata| { &mut m.request_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "finish_time",
                |m: &CreateClusterMetadata| { &m.finish_time },
                |m: &mut CreateClusterMetadata| { &mut m.finish_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateClusterMetadata>(
                "CreateClusterMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateClusterMetadata {
        static instance: ::protobuf::rt::LazyV2<CreateClusterMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateClusterMetadata::new)
    }
}

impl ::protobuf::Clear for CreateClusterMetadata {
    fn clear(&mut self) {
        self.original_request.clear();
        self.request_time.clear();
        self.finish_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateClusterMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateClusterMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateClusterMetadata {
    // message fields
    pub original_request: ::protobuf::SingularPtrField<super::instance::Cluster>,
    pub request_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub finish_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateClusterMetadata {
    fn default() -> &'a UpdateClusterMetadata {
        <UpdateClusterMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateClusterMetadata {
    pub fn new() -> UpdateClusterMetadata {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.Cluster original_request = 1;


    pub fn get_original_request(&self) -> &super::instance::Cluster {
        self.original_request.as_ref().unwrap_or_else(|| <super::instance::Cluster as ::protobuf::Message>::default_instance())
    }
    pub fn clear_original_request(&mut self) {
        self.original_request.clear();
    }

    pub fn has_original_request(&self) -> bool {
        self.original_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_original_request(&mut self, v: super::instance::Cluster) {
        self.original_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_request(&mut self) -> &mut super::instance::Cluster {
        if self.original_request.is_none() {
            self.original_request.set_default();
        }
        self.original_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_original_request(&mut self) -> super::instance::Cluster {
        self.original_request.take().unwrap_or_else(|| super::instance::Cluster::new())
    }

    // .google.protobuf.Timestamp request_time = 2;


    pub fn get_request_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.request_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_time(&mut self) {
        self.request_time.clear();
    }

    pub fn has_request_time(&self) -> bool {
        self.request_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.request_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.request_time.is_none() {
            self.request_time.set_default();
        }
        self.request_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.request_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp finish_time = 3;


    pub fn get_finish_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.finish_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_finish_time(&mut self) {
        self.finish_time.clear();
    }

    pub fn has_finish_time(&self) -> bool {
        self.finish_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finish_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.finish_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_finish_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.finish_time.is_none() {
            self.finish_time.set_default();
        }
        self.finish_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_finish_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.finish_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for UpdateClusterMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.original_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.finish_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.original_request)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.finish_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.original_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.original_request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.finish_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateClusterMetadata {
        UpdateClusterMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::Cluster>>(
                "original_request",
                |m: &UpdateClusterMetadata| { &m.original_request },
                |m: &mut UpdateClusterMetadata| { &mut m.original_request },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "request_time",
                |m: &UpdateClusterMetadata| { &m.request_time },
                |m: &mut UpdateClusterMetadata| { &mut m.request_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "finish_time",
                |m: &UpdateClusterMetadata| { &m.finish_time },
                |m: &mut UpdateClusterMetadata| { &mut m.finish_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateClusterMetadata>(
                "UpdateClusterMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateClusterMetadata {
        static instance: ::protobuf::rt::LazyV2<UpdateClusterMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateClusterMetadata::new)
    }
}

impl ::protobuf::Clear for UpdateClusterMetadata {
    fn clear(&mut self) {
        self.original_request.clear();
        self.request_time.clear();
        self.finish_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateClusterMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateClusterMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateAppProfileRequest {
    // message fields
    pub parent: ::std::string::String,
    pub app_profile_id: ::std::string::String,
    pub app_profile: ::protobuf::SingularPtrField<super::instance::AppProfile>,
    pub ignore_warnings: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateAppProfileRequest {
    fn default() -> &'a CreateAppProfileRequest {
        <CreateAppProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateAppProfileRequest {
    pub fn new() -> CreateAppProfileRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string app_profile_id = 2;


    pub fn get_app_profile_id(&self) -> &str {
        &self.app_profile_id
    }
    pub fn clear_app_profile_id(&mut self) {
        self.app_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_profile_id(&mut self, v: ::std::string::String) {
        self.app_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_profile_id(&mut self) -> &mut ::std::string::String {
        &mut self.app_profile_id
    }

    // Take field
    pub fn take_app_profile_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app_profile_id, ::std::string::String::new())
    }

    // .google.bigtable.admin.v2.AppProfile app_profile = 3;


    pub fn get_app_profile(&self) -> &super::instance::AppProfile {
        self.app_profile.as_ref().unwrap_or_else(|| <super::instance::AppProfile as ::protobuf::Message>::default_instance())
    }
    pub fn clear_app_profile(&mut self) {
        self.app_profile.clear();
    }

    pub fn has_app_profile(&self) -> bool {
        self.app_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_profile(&mut self, v: super::instance::AppProfile) {
        self.app_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_profile(&mut self) -> &mut super::instance::AppProfile {
        if self.app_profile.is_none() {
            self.app_profile.set_default();
        }
        self.app_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_profile(&mut self) -> super::instance::AppProfile {
        self.app_profile.take().unwrap_or_else(|| super::instance::AppProfile::new())
    }

    // bool ignore_warnings = 4;


    pub fn get_ignore_warnings(&self) -> bool {
        self.ignore_warnings
    }
    pub fn clear_ignore_warnings(&mut self) {
        self.ignore_warnings = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_warnings(&mut self, v: bool) {
        self.ignore_warnings = v;
    }
}

impl ::protobuf::Message for CreateAppProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.app_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app_profile_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.app_profile)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_warnings = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.app_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.app_profile_id);
        }
        if let Some(ref v) = self.app_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.ignore_warnings != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.app_profile_id.is_empty() {
            os.write_string(2, &self.app_profile_id)?;
        }
        if let Some(ref v) = self.app_profile.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.ignore_warnings != false {
            os.write_bool(4, self.ignore_warnings)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAppProfileRequest {
        CreateAppProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateAppProfileRequest| { &m.parent },
                |m: &mut CreateAppProfileRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app_profile_id",
                |m: &CreateAppProfileRequest| { &m.app_profile_id },
                |m: &mut CreateAppProfileRequest| { &mut m.app_profile_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::AppProfile>>(
                "app_profile",
                |m: &CreateAppProfileRequest| { &m.app_profile },
                |m: &mut CreateAppProfileRequest| { &mut m.app_profile },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_warnings",
                |m: &CreateAppProfileRequest| { &m.ignore_warnings },
                |m: &mut CreateAppProfileRequest| { &mut m.ignore_warnings },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateAppProfileRequest>(
                "CreateAppProfileRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateAppProfileRequest {
        static instance: ::protobuf::rt::LazyV2<CreateAppProfileRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateAppProfileRequest::new)
    }
}

impl ::protobuf::Clear for CreateAppProfileRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.app_profile_id.clear();
        self.app_profile.clear();
        self.ignore_warnings = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAppProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAppProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetAppProfileRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetAppProfileRequest {
    fn default() -> &'a GetAppProfileRequest {
        <GetAppProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAppProfileRequest {
    pub fn new() -> GetAppProfileRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetAppProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetAppProfileRequest {
        GetAppProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetAppProfileRequest| { &m.name },
                |m: &mut GetAppProfileRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetAppProfileRequest>(
                "GetAppProfileRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetAppProfileRequest {
        static instance: ::protobuf::rt::LazyV2<GetAppProfileRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetAppProfileRequest::new)
    }
}

impl ::protobuf::Clear for GetAppProfileRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetAppProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAppProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListAppProfilesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAppProfilesRequest {
    fn default() -> &'a ListAppProfilesRequest {
        <ListAppProfilesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListAppProfilesRequest {
    pub fn new() -> ListAppProfilesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 2;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListAppProfilesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(2, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAppProfilesRequest {
        ListAppProfilesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListAppProfilesRequest| { &m.parent },
                |m: &mut ListAppProfilesRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListAppProfilesRequest| { &m.page_size },
                |m: &mut ListAppProfilesRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListAppProfilesRequest| { &m.page_token },
                |m: &mut ListAppProfilesRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListAppProfilesRequest>(
                "ListAppProfilesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListAppProfilesRequest {
        static instance: ::protobuf::rt::LazyV2<ListAppProfilesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListAppProfilesRequest::new)
    }
}

impl ::protobuf::Clear for ListAppProfilesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAppProfilesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAppProfilesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListAppProfilesResponse {
    // message fields
    pub app_profiles: ::protobuf::RepeatedField<super::instance::AppProfile>,
    pub next_page_token: ::std::string::String,
    pub failed_locations: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAppProfilesResponse {
    fn default() -> &'a ListAppProfilesResponse {
        <ListAppProfilesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListAppProfilesResponse {
    pub fn new() -> ListAppProfilesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.bigtable.admin.v2.AppProfile app_profiles = 1;


    pub fn get_app_profiles(&self) -> &[super::instance::AppProfile] {
        &self.app_profiles
    }
    pub fn clear_app_profiles(&mut self) {
        self.app_profiles.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_profiles(&mut self, v: ::protobuf::RepeatedField<super::instance::AppProfile>) {
        self.app_profiles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_app_profiles(&mut self) -> &mut ::protobuf::RepeatedField<super::instance::AppProfile> {
        &mut self.app_profiles
    }

    // Take field
    pub fn take_app_profiles(&mut self) -> ::protobuf::RepeatedField<super::instance::AppProfile> {
        ::std::mem::replace(&mut self.app_profiles, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }

    // repeated string failed_locations = 3;


    pub fn get_failed_locations(&self) -> &[::std::string::String] {
        &self.failed_locations
    }
    pub fn clear_failed_locations(&mut self) {
        self.failed_locations.clear();
    }

    // Param is passed by value, moved
    pub fn set_failed_locations(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.failed_locations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_failed_locations(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.failed_locations
    }

    // Take field
    pub fn take_failed_locations(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.failed_locations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListAppProfilesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.app_profiles {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.app_profiles)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.failed_locations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.app_profiles {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        for value in &self.failed_locations {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.app_profiles {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        for v in &self.failed_locations {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAppProfilesResponse {
        ListAppProfilesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::AppProfile>>(
                "app_profiles",
                |m: &ListAppProfilesResponse| { &m.app_profiles },
                |m: &mut ListAppProfilesResponse| { &mut m.app_profiles },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListAppProfilesResponse| { &m.next_page_token },
                |m: &mut ListAppProfilesResponse| { &mut m.next_page_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "failed_locations",
                |m: &ListAppProfilesResponse| { &m.failed_locations },
                |m: &mut ListAppProfilesResponse| { &mut m.failed_locations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListAppProfilesResponse>(
                "ListAppProfilesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListAppProfilesResponse {
        static instance: ::protobuf::rt::LazyV2<ListAppProfilesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListAppProfilesResponse::new)
    }
}

impl ::protobuf::Clear for ListAppProfilesResponse {
    fn clear(&mut self) {
        self.app_profiles.clear();
        self.next_page_token.clear();
        self.failed_locations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAppProfilesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAppProfilesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateAppProfileRequest {
    // message fields
    pub app_profile: ::protobuf::SingularPtrField<super::instance::AppProfile>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    pub ignore_warnings: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateAppProfileRequest {
    fn default() -> &'a UpdateAppProfileRequest {
        <UpdateAppProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateAppProfileRequest {
    pub fn new() -> UpdateAppProfileRequest {
        ::std::default::Default::default()
    }

    // .google.bigtable.admin.v2.AppProfile app_profile = 1;


    pub fn get_app_profile(&self) -> &super::instance::AppProfile {
        self.app_profile.as_ref().unwrap_or_else(|| <super::instance::AppProfile as ::protobuf::Message>::default_instance())
    }
    pub fn clear_app_profile(&mut self) {
        self.app_profile.clear();
    }

    pub fn has_app_profile(&self) -> bool {
        self.app_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_profile(&mut self, v: super::instance::AppProfile) {
        self.app_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_profile(&mut self) -> &mut super::instance::AppProfile {
        if self.app_profile.is_none() {
            self.app_profile.set_default();
        }
        self.app_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_profile(&mut self) -> super::instance::AppProfile {
        self.app_profile.take().unwrap_or_else(|| super::instance::AppProfile::new())
    }

    // .google.protobuf.FieldMask update_mask = 2;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }

    // bool ignore_warnings = 3;


    pub fn get_ignore_warnings(&self) -> bool {
        self.ignore_warnings
    }
    pub fn clear_ignore_warnings(&mut self) {
        self.ignore_warnings = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_warnings(&mut self, v: bool) {
        self.ignore_warnings = v;
    }
}

impl ::protobuf::Message for UpdateAppProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.app_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.app_profile)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_warnings = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.app_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.ignore_warnings != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.app_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.ignore_warnings != false {
            os.write_bool(3, self.ignore_warnings)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateAppProfileRequest {
        UpdateAppProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::instance::AppProfile>>(
                "app_profile",
                |m: &UpdateAppProfileRequest| { &m.app_profile },
                |m: &mut UpdateAppProfileRequest| { &mut m.app_profile },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &UpdateAppProfileRequest| { &m.update_mask },
                |m: &mut UpdateAppProfileRequest| { &mut m.update_mask },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_warnings",
                |m: &UpdateAppProfileRequest| { &m.ignore_warnings },
                |m: &mut UpdateAppProfileRequest| { &mut m.ignore_warnings },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateAppProfileRequest>(
                "UpdateAppProfileRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateAppProfileRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateAppProfileRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateAppProfileRequest::new)
    }
}

impl ::protobuf::Clear for UpdateAppProfileRequest {
    fn clear(&mut self) {
        self.app_profile.clear();
        self.update_mask.clear();
        self.ignore_warnings = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateAppProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateAppProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteAppProfileRequest {
    // message fields
    pub name: ::std::string::String,
    pub ignore_warnings: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteAppProfileRequest {
    fn default() -> &'a DeleteAppProfileRequest {
        <DeleteAppProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteAppProfileRequest {
    pub fn new() -> DeleteAppProfileRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bool ignore_warnings = 2;


    pub fn get_ignore_warnings(&self) -> bool {
        self.ignore_warnings
    }
    pub fn clear_ignore_warnings(&mut self) {
        self.ignore_warnings = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_warnings(&mut self, v: bool) {
        self.ignore_warnings = v;
    }
}

impl ::protobuf::Message for DeleteAppProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_warnings = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.ignore_warnings != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.ignore_warnings != false {
            os.write_bool(2, self.ignore_warnings)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteAppProfileRequest {
        DeleteAppProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteAppProfileRequest| { &m.name },
                |m: &mut DeleteAppProfileRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_warnings",
                |m: &DeleteAppProfileRequest| { &m.ignore_warnings },
                |m: &mut DeleteAppProfileRequest| { &mut m.ignore_warnings },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteAppProfileRequest>(
                "DeleteAppProfileRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteAppProfileRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteAppProfileRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteAppProfileRequest::new)
    }
}

impl ::protobuf::Clear for DeleteAppProfileRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.ignore_warnings = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteAppProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteAppProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateAppProfileMetadata {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateAppProfileMetadata {
    fn default() -> &'a UpdateAppProfileMetadata {
        <UpdateAppProfileMetadata as ::protobuf::Message>::default_instance()
    }
}

impl UpdateAppProfileMetadata {
    pub fn new() -> UpdateAppProfileMetadata {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UpdateAppProfileMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateAppProfileMetadata {
        UpdateAppProfileMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateAppProfileMetadata>(
                "UpdateAppProfileMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateAppProfileMetadata {
        static instance: ::protobuf::rt::LazyV2<UpdateAppProfileMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateAppProfileMetadata::new)
    }
}

impl ::protobuf::Clear for UpdateAppProfileMetadata {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateAppProfileMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateAppProfileMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n6google/bigtable/admin/v2/bigtable_instance_admin.proto\x12\x18google.\
    bigtable.admin.v2\x1a\x1cgoogle/api/annotations.proto\x1a'google/bigtabl\
    e/admin/v2/instance.proto\x1a\x1egoogle/iam/v1/iam_policy.proto\x1a\x1ag\
    oogle/iam/v1/policy.proto\x1a#google/longrunning/operations.proto\x1a\
    \x1bgoogle/protobuf/empty.proto\x1a\x20google/protobuf/field_mask.proto\
    \x1a\x1fgoogle/protobuf/timestamp.proto\"\xcb\x02\n\x15CreateInstanceReq\
    uest\x12\x16\n\x06parent\x18\x01\x20\x01(\tR\x06parent\x12\x1f\n\x0binst\
    ance_id\x18\x02\x20\x01(\tR\ninstanceId\x12>\n\x08instance\x18\x03\x20\
    \x01(\x0b2\".google.bigtable.admin.v2.InstanceR\x08instance\x12Y\n\x08cl\
    usters\x18\x04\x20\x03(\x0b2=.google.bigtable.admin.v2.CreateInstanceReq\
    uest.ClustersEntryR\x08clusters\x1a^\n\rClustersEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x127\n\x05value\x18\x02\x20\x01(\x0b2!.googl\
    e.bigtable.admin.v2.ClusterR\x05value:\x028\x01\"(\n\x12GetInstanceReque\
    st\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"M\n\x14ListInstancesRe\
    quest\x12\x16\n\x06parent\x18\x01\x20\x01(\tR\x06parent\x12\x1d\n\npage_\
    token\x18\x02\x20\x01(\tR\tpageToken\"\xac\x01\n\x15ListInstancesRespons\
    e\x12@\n\tinstances\x18\x01\x20\x03(\x0b2\".google.bigtable.admin.v2.Ins\
    tanceR\tinstances\x12)\n\x10failed_locations\x18\x02\x20\x03(\tR\x0ffail\
    edLocations\x12&\n\x0fnext_page_token\x18\x03\x20\x01(\tR\rnextPageToken\
    \"\x9b\x01\n\x1cPartialUpdateInstanceRequest\x12>\n\x08instance\x18\x01\
    \x20\x01(\x0b2\".google.bigtable.admin.v2.InstanceR\x08instance\x12;\n\
    \x0bupdate_mask\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\nup\
    dateMask\"+\n\x15DeleteInstanceRequest\x12\x12\n\x04name\x18\x01\x20\x01\
    (\tR\x04name\"\x8a\x01\n\x14CreateClusterRequest\x12\x16\n\x06parent\x18\
    \x01\x20\x01(\tR\x06parent\x12\x1d\n\ncluster_id\x18\x02\x20\x01(\tR\tcl\
    usterId\x12;\n\x07cluster\x18\x03\x20\x01(\x0b2!.google.bigtable.admin.v\
    2.ClusterR\x07cluster\"'\n\x11GetClusterRequest\x12\x12\n\x04name\x18\
    \x01\x20\x01(\tR\x04name\"L\n\x13ListClustersRequest\x12\x16\n\x06parent\
    \x18\x01\x20\x01(\tR\x06parent\x12\x1d\n\npage_token\x18\x02\x20\x01(\tR\
    \tpageToken\"\xa8\x01\n\x14ListClustersResponse\x12=\n\x08clusters\x18\
    \x01\x20\x03(\x0b2!.google.bigtable.admin.v2.ClusterR\x08clusters\x12)\n\
    \x10failed_locations\x18\x02\x20\x03(\tR\x0ffailedLocations\x12&\n\x0fne\
    xt_page_token\x18\x03\x20\x01(\tR\rnextPageToken\"*\n\x14DeleteClusterRe\
    quest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"\xf0\x01\n\x16Creat\
    eInstanceMetadata\x12Z\n\x10original_request\x18\x01\x20\x01(\x0b2/.goog\
    le.bigtable.admin.v2.CreateInstanceRequestR\x0foriginalRequest\x12=\n\
    \x0crequest_time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \x0brequestTime\x12;\n\x0bfinish_time\x18\x03\x20\x01(\x0b2\x1a.google.p\
    rotobuf.TimestampR\nfinishTime\"\xf7\x01\n\x16UpdateInstanceMetadata\x12\
    a\n\x10original_request\x18\x01\x20\x01(\x0b26.google.bigtable.admin.v2.\
    PartialUpdateInstanceRequestR\x0foriginalRequest\x12=\n\x0crequest_time\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0brequestTime\x12\
    ;\n\x0bfinish_time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \nfinishTime\"\xee\x01\n\x15CreateClusterMetadata\x12Y\n\x10original_req\
    uest\x18\x01\x20\x01(\x0b2..google.bigtable.admin.v2.CreateClusterReques\
    tR\x0foriginalRequest\x12=\n\x0crequest_time\x18\x02\x20\x01(\x0b2\x1a.g\
    oogle.protobuf.TimestampR\x0brequestTime\x12;\n\x0bfinish_time\x18\x03\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nfinishTime\"\xe1\x01\n\
    \x15UpdateClusterMetadata\x12L\n\x10original_request\x18\x01\x20\x01(\
    \x0b2!.google.bigtable.admin.v2.ClusterR\x0foriginalRequest\x12=\n\x0cre\
    quest_time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0breque\
    stTime\x12;\n\x0bfinish_time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.T\
    imestampR\nfinishTime\"\xc7\x01\n\x17CreateAppProfileRequest\x12\x16\n\
    \x06parent\x18\x01\x20\x01(\tR\x06parent\x12$\n\x0eapp_profile_id\x18\
    \x02\x20\x01(\tR\x0cappProfileId\x12E\n\x0bapp_profile\x18\x03\x20\x01(\
    \x0b2$.google.bigtable.admin.v2.AppProfileR\nappProfile\x12'\n\x0fignore\
    _warnings\x18\x04\x20\x01(\x08R\x0eignoreWarnings\"*\n\x14GetAppProfileR\
    equest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"l\n\x16ListAppProf\
    ilesRequest\x12\x16\n\x06parent\x18\x01\x20\x01(\tR\x06parent\x12\x1b\n\
    \tpage_size\x18\x03\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_token\x18\
    \x02\x20\x01(\tR\tpageToken\"\xb5\x01\n\x17ListAppProfilesResponse\x12G\
    \n\x0capp_profiles\x18\x01\x20\x03(\x0b2$.google.bigtable.admin.v2.AppPr\
    ofileR\x0bappProfiles\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnex\
    tPageToken\x12)\n\x10failed_locations\x18\x03\x20\x03(\tR\x0ffailedLocat\
    ions\"\xc6\x01\n\x17UpdateAppProfileRequest\x12E\n\x0bapp_profile\x18\
    \x01\x20\x01(\x0b2$.google.bigtable.admin.v2.AppProfileR\nappProfile\x12\
    ;\n\x0bupdate_mask\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\
    \nupdateMask\x12'\n\x0fignore_warnings\x18\x03\x20\x01(\x08R\x0eignoreWa\
    rnings\"V\n\x17DeleteAppProfileRequest\x12\x12\n\x04name\x18\x01\x20\x01\
    (\tR\x04name\x12'\n\x0fignore_warnings\x18\x02\x20\x01(\x08R\x0eignoreWa\
    rnings\"\x1a\n\x18UpdateAppProfileMetadata2\xaa\x17\n\x15BigtableInstanc\
    eAdmin\x12\x8e\x01\n\x0eCreateInstance\x12/.google.bigtable.admin.v2.Cre\
    ateInstanceRequest\x1a\x1d.google.longrunning.Operation\",\x82\xd3\xe4\
    \x93\x02&\"!/v2/{parent=projects/*}/instances:\x01*\x12\x8a\x01\n\x0bGet\
    Instance\x12,.google.bigtable.admin.v2.GetInstanceRequest\x1a\".google.b\
    igtable.admin.v2.Instance\")\x82\xd3\xe4\x93\x02#\x12!/v2/{name=projects\
    /*/instances/*}\x12\x9b\x01\n\rListInstances\x12..google.bigtable.admin.\
    v2.ListInstancesRequest\x1a/.google.bigtable.admin.v2.ListInstancesRespo\
    nse\")\x82\xd3\xe4\x93\x02#\x12!/v2/{parent=projects/*}/instances\x12\
    \x86\x01\n\x0eUpdateInstance\x12\".google.bigtable.admin.v2.Instance\x1a\
    \".google.bigtable.admin.v2.Instance\",\x82\xd3\xe4\x93\x02&\x1a!/v2/{na\
    me=projects/*/instances/*}:\x01*\x12\xac\x01\n\x15PartialUpdateInstance\
    \x126.google.bigtable.admin.v2.PartialUpdateInstanceRequest\x1a\x1d.goog\
    le.longrunning.Operation\"<\x82\xd3\xe4\x93\x0262*/v2/{instance.name=pro\
    jects/*/instances/*}:\x08instance\x12\x84\x01\n\x0eDeleteInstance\x12/.g\
    oogle.bigtable.admin.v2.DeleteInstanceRequest\x1a\x16.google.protobuf.Em\
    pty\")\x82\xd3\xe4\x93\x02#*!/v2/{name=projects/*/instances/*}\x12\x9d\
    \x01\n\rCreateCluster\x12..google.bigtable.admin.v2.CreateClusterRequest\
    \x1a\x1d.google.longrunning.Operation\"=\x82\xd3\xe4\x93\x027\",/v2/{par\
    ent=projects/*/instances/*}/clusters:\x07cluster\x12\x92\x01\n\nGetClust\
    er\x12+.google.bigtable.admin.v2.GetClusterRequest\x1a!.google.bigtable.\
    admin.v2.Cluster\"4\x82\xd3\xe4\x93\x02.\x12,/v2/{name=projects/*/instan\
    ces/*/clusters/*}\x12\xa3\x01\n\x0cListClusters\x12-.google.bigtable.adm\
    in.v2.ListClustersRequest\x1a..google.bigtable.admin.v2.ListClustersResp\
    onse\"4\x82\xd3\xe4\x93\x02.\x12,/v2/{parent=projects/*/instances/*}/clu\
    sters\x12\x8a\x01\n\rUpdateCluster\x12!.google.bigtable.admin.v2.Cluster\
    \x1a\x1d.google.longrunning.Operation\"7\x82\xd3\xe4\x93\x021\x1a,/v2/{n\
    ame=projects/*/instances/*/clusters/*}:\x01*\x12\x8d\x01\n\rDeleteCluste\
    r\x12..google.bigtable.admin.v2.DeleteClusterRequest\x1a\x16.google.prot\
    obuf.Empty\"4\x82\xd3\xe4\x93\x02.*,/v2/{name=projects/*/instances/*/clu\
    sters/*}\x12\xb1\x01\n\x10CreateAppProfile\x121.google.bigtable.admin.v2\
    .CreateAppProfileRequest\x1a$.google.bigtable.admin.v2.AppProfile\"D\x82\
    \xd3\xe4\x93\x02>\"//v2/{parent=projects/*/instances/*}/appProfiles:\x0b\
    app_profile\x12\x9e\x01\n\rGetAppProfile\x12..google.bigtable.admin.v2.G\
    etAppProfileRequest\x1a$.google.bigtable.admin.v2.AppProfile\"7\x82\xd3\
    \xe4\x93\x021\x12//v2/{name=projects/*/instances/*/appProfiles/*}\x12\
    \xaf\x01\n\x0fListAppProfiles\x120.google.bigtable.admin.v2.ListAppProfi\
    lesRequest\x1a1.google.bigtable.admin.v2.ListAppProfilesResponse\"7\x82\
    \xd3\xe4\x93\x021\x12//v2/{parent=projects/*/instances/*}/appProfiles\
    \x12\xb6\x01\n\x10UpdateAppProfile\x121.google.bigtable.admin.v2.UpdateA\
    ppProfileRequest\x1a\x1d.google.longrunning.Operation\"P\x82\xd3\xe4\x93\
    \x02J2;/v2/{app_profile.name=projects/*/instances/*/appProfiles/*}:\x0ba\
    pp_profile\x12\x96\x01\n\x10DeleteAppProfile\x121.google.bigtable.admin.\
    v2.DeleteAppProfileRequest\x1a\x16.google.protobuf.Empty\"7\x82\xd3\xe4\
    \x93\x021*//v2/{name=projects/*/instances/*/appProfiles/*}\x12\x88\x01\n\
    \x0cGetIamPolicy\x12\".google.iam.v1.GetIamPolicyRequest\x1a\x15.google.\
    iam.v1.Policy\"=\x82\xd3\xe4\x93\x027\"2/v2/{resource=projects/*/instanc\
    es/*}:getIamPolicy:\x01*\x12\x88\x01\n\x0cSetIamPolicy\x12\".google.iam.\
    v1.SetIamPolicyRequest\x1a\x15.google.iam.v1.Policy\"=\x82\xd3\xe4\x93\
    \x027\"2/v2/{resource=projects/*/instances/*}:setIamPolicy:\x01*\x12\xae\
    \x01\n\x12TestIamPermissions\x12(.google.iam.v1.TestIamPermissionsReques\
    t\x1a).google.iam.v1.TestIamPermissionsResponse\"C\x82\xd3\xe4\x93\x02=\
    \"8/v2/{resource=projects/*/instances/*}:testIamPermissions:\x01*B\xbd\
    \x01\n\x1ccom.google.bigtable.admin.v2B\x1aBigtableInstanceAdminProtoP\
    \x01Z=google.golang.org/genproto/googleapis/bigtable/admin/v2;admin\xaa\
    \x02\x1eGoogle.Cloud.Bigtable.Admin.V2\xca\x02\x1eGoogle\\Cloud\\Bigtabl\
    e\\Admin\\V2J\xbex\n\x07\x12\x05\x0f\0\xcc\x03#\n\xbe\x04\n\x01\x0c\x12\
    \x03\x0f\0\x122\xb3\x04\x20Copyright\x202018\x20Google\x20LLC.\n\n\x20Li\
    censed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\
    \x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20excep\
    t\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obta\
    in\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20htt\
    p://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\n\x08\n\x01\x02\x12\x03\x11\0!\n\t\n\x02\x03\0\x12\x03\x13\0&\n\t\n\
    \x02\x03\x01\x12\x03\x14\01\n\t\n\x02\x03\x02\x12\x03\x15\0(\n\t\n\x02\
    \x03\x03\x12\x03\x16\0$\n\t\n\x02\x03\x04\x12\x03\x17\0-\n\t\n\x02\x03\
    \x05\x12\x03\x18\0%\n\t\n\x02\x03\x06\x12\x03\x19\0*\n\t\n\x02\x03\x07\
    \x12\x03\x1a\0)\n\x08\n\x01\x08\x12\x03\x1c\0;\n\t\n\x02\x08%\x12\x03\
    \x1c\0;\n\x08\n\x01\x08\x12\x03\x1d\0T\n\t\n\x02\x08\x0b\x12\x03\x1d\0T\
    \n\x08\n\x01\x08\x12\x03\x1e\0\"\n\t\n\x02\x08\n\x12\x03\x1e\0\"\n\x08\n\
    \x01\x08\x12\x03\x1f\0;\n\t\n\x02\x08\x08\x12\x03\x1f\0;\n\x08\n\x01\x08\
    \x12\x03\x20\05\n\t\n\x02\x08\x01\x12\x03\x20\05\n\x08\n\x01\x08\x12\x03\
    !\0<\n\t\n\x02\x08)\x12\x03!\0<\n\xdb\x01\n\x02\x06\0\x12\x05&\0\xc0\x01\
    \x01\x1a\xcd\x01\x20Service\x20for\x20creating,\x20configuring,\x20and\
    \x20deleting\x20Cloud\x20Bigtable\x20Instances\x20and\n\x20Clusters.\x20\
    Provides\x20access\x20to\x20the\x20Instance\x20and\x20Cluster\x20schemas\
    \x20only,\x20not\x20the\n\x20tables'\x20metadata\x20or\x20data\x20stored\
    \x20in\x20those\x20tables.\n\n\n\n\x03\x06\0\x01\x12\x03&\x08\x1d\n4\n\
    \x04\x06\0\x02\0\x12\x04(\x02.\x03\x1a&\x20Create\x20an\x20instance\x20w\
    ithin\x20a\x20project.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03(\x06\x14\n\
    \x0c\n\x05\x06\0\x02\0\x02\x12\x03(\x15*\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03)\x0f+\n\r\n\x05\x06\0\x02\0\x04\x12\x04*\x04-\x06\n\x11\n\t\x06\0\
    \x02\0\x04\xb0\xca\xbc\"\x12\x04*\x04-\x06\n3\n\x04\x06\0\x02\x01\x12\
    \x041\x025\x03\x1a%\x20Gets\x20information\x20about\x20an\x20instance.\n\
    \n\x0c\n\x05\x06\0\x02\x01\x01\x12\x031\x06\x11\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x031\x12$\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x031/7\n\r\n\
    \x05\x06\0\x02\x01\x04\x12\x042\x044\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\
    \xca\xbc\"\x12\x042\x044\x06\n?\n\x04\x06\0\x02\x02\x12\x048\x02<\x03\
    \x1a1\x20Lists\x20information\x20about\x20instances\x20in\x20a\x20projec\
    t.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x038\x06\x13\n\x0c\n\x05\x06\0\
    \x02\x02\x02\x12\x038\x14(\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x0383H\n\r\
    \n\x05\x06\0\x02\x02\x04\x12\x049\x04;\x06\n\x11\n\t\x06\0\x02\x02\x04\
    \xb0\xca\xbc\"\x12\x049\x04;\x06\n5\n\x04\x06\0\x02\x03\x12\x04?\x02D\
    \x03\x1a'\x20Updates\x20an\x20instance\x20within\x20a\x20project.\n\n\
    \x0c\n\x05\x06\0\x02\x03\x01\x12\x03?\x06\x14\n\x0c\n\x05\x06\0\x02\x03\
    \x02\x12\x03?\x15\x1d\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03?(0\n\r\n\x05\
    \x06\0\x02\x03\x04\x12\x04@\x04C\x06\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\
    \xbc\"\x12\x04@\x04C\x06\n?\n\x04\x06\0\x02\x04\x12\x04G\x02M\x03\x1a1\
    \x20Partially\x20updates\x20an\x20instance\x20within\x20a\x20project.\n\
    \n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03G\x06\x1b\n\x0c\n\x05\x06\0\x02\
    \x04\x02\x12\x03G\x1c8\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03H\x0f+\n\r\n\
    \x05\x06\0\x02\x04\x04\x12\x04I\x04L\x06\n\x11\n\t\x06\0\x02\x04\x04\xb0\
    \xca\xbc\"\x12\x04I\x04L\x06\n2\n\x04\x06\0\x02\x05\x12\x04P\x02T\x03\
    \x1a$\x20Delete\x20an\x20instance\x20from\x20a\x20project.\n\n\x0c\n\x05\
    \x06\0\x02\x05\x01\x12\x03P\x06\x14\n\x0c\n\x05\x06\0\x02\x05\x02\x12\
    \x03P\x15*\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03P5J\n\r\n\x05\x06\0\x02\
    \x05\x04\x12\x04Q\x04S\x06\n\x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\
    \x04Q\x04S\x06\n5\n\x04\x06\0\x02\x06\x12\x04W\x02]\x03\x1a'\x20Creates\
    \x20a\x20cluster\x20within\x20an\x20instance.\n\n\x0c\n\x05\x06\0\x02\
    \x06\x01\x12\x03W\x06\x13\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03W\x14(\n\
    \x0c\n\x05\x06\0\x02\x06\x03\x12\x03X\x0f+\n\r\n\x05\x06\0\x02\x06\x04\
    \x12\x04Y\x04\\\x06\n\x11\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\x04Y\
    \x04\\\x06\n1\n\x04\x06\0\x02\x07\x12\x04`\x02d\x03\x1a#\x20Gets\x20info\
    rmation\x20about\x20a\x20cluster.\n\n\x0c\n\x05\x06\0\x02\x07\x01\x12\
    \x03`\x06\x10\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03`\x11\"\n\x0c\n\x05\
    \x06\0\x02\x07\x03\x12\x03`-4\n\r\n\x05\x06\0\x02\x07\x04\x12\x04a\x04c\
    \x06\n\x11\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\"\x12\x04a\x04c\x06\n@\n\
    \x04\x06\0\x02\x08\x12\x04g\x02k\x03\x1a2\x20Lists\x20information\x20abo\
    ut\x20clusters\x20in\x20an\x20instance.\n\n\x0c\n\x05\x06\0\x02\x08\x01\
    \x12\x03g\x06\x12\n\x0c\n\x05\x06\0\x02\x08\x02\x12\x03g\x13&\n\x0c\n\
    \x05\x06\0\x02\x08\x03\x12\x03g1E\n\r\n\x05\x06\0\x02\x08\x04\x12\x04h\
    \x04j\x06\n\x11\n\t\x06\0\x02\x08\x04\xb0\xca\xbc\"\x12\x04h\x04j\x06\n5\
    \n\x04\x06\0\x02\t\x12\x04n\x02s\x03\x1a'\x20Updates\x20a\x20cluster\x20\
    within\x20an\x20instance.\n\n\x0c\n\x05\x06\0\x02\t\x01\x12\x03n\x06\x13\
    \n\x0c\n\x05\x06\0\x02\t\x02\x12\x03n\x14\x1b\n\x0c\n\x05\x06\0\x02\t\
    \x03\x12\x03n&B\n\r\n\x05\x06\0\x02\t\x04\x12\x04o\x04r\x06\n\x11\n\t\
    \x06\0\x02\t\x04\xb0\xca\xbc\"\x12\x04o\x04r\x06\n3\n\x04\x06\0\x02\n\
    \x12\x04v\x02z\x03\x1a%\x20Deletes\x20a\x20cluster\x20from\x20an\x20inst\
    ance.\n\n\x0c\n\x05\x06\0\x02\n\x01\x12\x03v\x06\x13\n\x0c\n\x05\x06\0\
    \x02\n\x02\x12\x03v\x14(\n\x0c\n\x05\x06\0\x02\n\x03\x12\x03v3H\n\r\n\
    \x05\x06\0\x02\n\x04\x12\x04w\x04y\x06\n\x11\n\t\x06\0\x02\n\x04\xb0\xca\
    \xbc\"\x12\x04w\x04y\x06\n;\n\x04\x06\0\x02\x0b\x12\x05}\x02\x82\x01\x03\
    \x1a,\x20Creates\x20an\x20app\x20profile\x20within\x20an\x20instance.\n\
    \n\x0c\n\x05\x06\0\x02\x0b\x01\x12\x03}\x06\x16\n\x0c\n\x05\x06\0\x02\
    \x0b\x02\x12\x03}\x17.\n\x0c\n\x05\x06\0\x02\x0b\x03\x12\x03}9C\n\x0e\n\
    \x05\x06\0\x02\x0b\x04\x12\x05~\x04\x81\x01\x06\n\x12\n\t\x06\0\x02\x0b\
    \x04\xb0\xca\xbc\"\x12\x05~\x04\x81\x01\x06\n8\n\x04\x06\0\x02\x0c\x12\
    \x06\x85\x01\x02\x89\x01\x03\x1a(\x20Gets\x20information\x20about\x20an\
    \x20app\x20profile.\n\n\r\n\x05\x06\0\x02\x0c\x01\x12\x04\x85\x01\x06\
    \x13\n\r\n\x05\x06\0\x02\x0c\x02\x12\x04\x85\x01\x14(\n\r\n\x05\x06\0\
    \x02\x0c\x03\x12\x04\x85\x013=\n\x0f\n\x05\x06\0\x02\x0c\x04\x12\x06\x86\
    \x01\x04\x88\x01\x06\n\x13\n\t\x06\0\x02\x0c\x04\xb0\xca\xbc\"\x12\x06\
    \x86\x01\x04\x88\x01\x06\nF\n\x04\x06\0\x02\r\x12\x06\x8c\x01\x02\x91\
    \x01\x03\x1a6\x20Lists\x20information\x20about\x20app\x20profiles\x20in\
    \x20an\x20instance.\n\n\r\n\x05\x06\0\x02\r\x01\x12\x04\x8c\x01\x06\x15\
    \n\r\n\x05\x06\0\x02\r\x02\x12\x04\x8c\x01\x16,\n\r\n\x05\x06\0\x02\r\
    \x03\x12\x04\x8d\x01\x0f&\n\x0f\n\x05\x06\0\x02\r\x04\x12\x06\x8e\x01\
    \x04\x90\x01\x06\n\x13\n\t\x06\0\x02\r\x04\xb0\xca\xbc\"\x12\x06\x8e\x01\
    \x04\x90\x01\x06\n<\n\x04\x06\0\x02\x0e\x12\x06\x94\x01\x02\x9a\x01\x03\
    \x1a,\x20Updates\x20an\x20app\x20profile\x20within\x20an\x20instance.\n\
    \n\r\n\x05\x06\0\x02\x0e\x01\x12\x04\x94\x01\x06\x16\n\r\n\x05\x06\0\x02\
    \x0e\x02\x12\x04\x94\x01\x17.\n\r\n\x05\x06\0\x02\x0e\x03\x12\x04\x95\
    \x01\x0f+\n\x0f\n\x05\x06\0\x02\x0e\x04\x12\x06\x96\x01\x04\x99\x01\x06\
    \n\x13\n\t\x06\0\x02\x0e\x04\xb0\xca\xbc\"\x12\x06\x96\x01\x04\x99\x01\
    \x06\n:\n\x04\x06\0\x02\x0f\x12\x06\x9d\x01\x02\xa2\x01\x03\x1a*\x20Dele\
    tes\x20an\x20app\x20profile\x20from\x20an\x20instance.\n\n\r\n\x05\x06\0\
    \x02\x0f\x01\x12\x04\x9d\x01\x06\x16\n\r\n\x05\x06\0\x02\x0f\x02\x12\x04\
    \x9d\x01\x17.\n\r\n\x05\x06\0\x02\x0f\x03\x12\x04\x9e\x01\x0f$\n\x0f\n\
    \x05\x06\0\x02\x0f\x04\x12\x06\x9f\x01\x04\xa1\x01\x06\n\x13\n\t\x06\0\
    \x02\x0f\x04\xb0\xca\xbc\"\x12\x06\x9f\x01\x04\xa1\x01\x06\n\x9a\x01\n\
    \x04\x06\0\x02\x10\x12\x06\xa6\x01\x02\xac\x01\x03\x1a\x89\x01\x20Gets\
    \x20the\x20access\x20control\x20policy\x20for\x20an\x20instance\x20resou\
    rce.\x20Returns\x20an\x20empty\n\x20policy\x20if\x20an\x20instance\x20ex\
    ists\x20but\x20does\x20not\x20have\x20a\x20policy\x20set.\n\n\r\n\x05\
    \x06\0\x02\x10\x01\x12\x04\xa6\x01\x06\x12\n\r\n\x05\x06\0\x02\x10\x02\
    \x12\x04\xa6\x01\x134\n\r\n\x05\x06\0\x02\x10\x03\x12\x04\xa7\x01\x0f#\n\
    \x0f\n\x05\x06\0\x02\x10\x04\x12\x06\xa8\x01\x04\xab\x01\x06\n\x13\n\t\
    \x06\0\x02\x10\x04\xb0\xca\xbc\"\x12\x06\xa8\x01\x04\xab\x01\x06\nh\n\
    \x04\x06\0\x02\x11\x12\x06\xb0\x01\x02\xb6\x01\x03\x1aX\x20Sets\x20the\
    \x20access\x20control\x20policy\x20on\x20an\x20instance\x20resource.\x20\
    Replaces\x20any\n\x20existing\x20policy.\n\n\r\n\x05\x06\0\x02\x11\x01\
    \x12\x04\xb0\x01\x06\x12\n\r\n\x05\x06\0\x02\x11\x02\x12\x04\xb0\x01\x13\
    4\n\r\n\x05\x06\0\x02\x11\x03\x12\x04\xb1\x01\x0f#\n\x0f\n\x05\x06\0\x02\
    \x11\x04\x12\x06\xb2\x01\x04\xb5\x01\x06\n\x13\n\t\x06\0\x02\x11\x04\xb0\
    \xca\xbc\"\x12\x06\xb2\x01\x04\xb5\x01\x06\n]\n\x04\x06\0\x02\x12\x12\
    \x06\xb9\x01\x02\xbf\x01\x03\x1aM\x20Returns\x20permissions\x20that\x20t\
    he\x20caller\x20has\x20on\x20the\x20specified\x20instance\x20resource.\n\
    \n\r\n\x05\x06\0\x02\x12\x01\x12\x04\xb9\x01\x06\x18\n\r\n\x05\x06\0\x02\
    \x12\x02\x12\x04\xb9\x01\x19@\n\r\n\x05\x06\0\x02\x12\x03\x12\x04\xba\
    \x01\x0f7\n\x0f\n\x05\x06\0\x02\x12\x04\x12\x06\xbb\x01\x04\xbe\x01\x06\
    \n\x13\n\t\x06\0\x02\x12\x04\xb0\xca\xbc\"\x12\x06\xbb\x01\x04\xbe\x01\
    \x06\nI\n\x02\x04\0\x12\x06\xc3\x01\0\xd7\x01\x01\x1a;\x20Request\x20mes\
    sage\x20for\x20BigtableInstanceAdmin.CreateInstance.\n\n\x0b\n\x03\x04\0\
    \x01\x12\x04\xc3\x01\x08\x1d\n\x81\x01\n\x04\x04\0\x02\0\x12\x04\xc6\x01\
    \x02\x14\x1as\x20The\x20unique\x20name\x20of\x20the\x20project\x20in\x20\
    which\x20to\x20create\x20the\x20new\x20instance.\n\x20Values\x20are\x20o\
    f\x20the\x20form\x20`projects/<project>`.\n\n\x0f\n\x05\x04\0\x02\0\x04\
    \x12\x06\xc6\x01\x02\xc3\x01\x1f\n\r\n\x05\x04\0\x02\0\x05\x12\x04\xc6\
    \x01\x02\x08\n\r\n\x05\x04\0\x02\0\x01\x12\x04\xc6\x01\t\x0f\n\r\n\x05\
    \x04\0\x02\0\x03\x12\x04\xc6\x01\x12\x13\n\xaa\x01\n\x04\x04\0\x02\x01\
    \x12\x04\xcb\x01\x02\x19\x1a\x9b\x01\x20The\x20ID\x20to\x20be\x20used\
    \x20when\x20referring\x20to\x20the\x20new\x20instance\x20within\x20its\
    \x20project,\n\x20e.g.,\x20just\x20`myinstance`\x20rather\x20than\n\x20`\
    projects/myproject/instances/myinstance`.\n\n\x0f\n\x05\x04\0\x02\x01\
    \x04\x12\x06\xcb\x01\x02\xc6\x01\x14\n\r\n\x05\x04\0\x02\x01\x05\x12\x04\
    \xcb\x01\x02\x08\n\r\n\x05\x04\0\x02\x01\x01\x12\x04\xcb\x01\t\x14\n\r\n\
    \x05\x04\0\x02\x01\x03\x12\x04\xcb\x01\x17\x18\nW\n\x04\x04\0\x02\x02\
    \x12\x04\xcf\x01\x02\x18\x1aI\x20The\x20instance\x20to\x20create.\n\x20F\
    ields\x20marked\x20`OutputOnly`\x20must\x20be\x20left\x20blank.\n\n\x0f\
    \n\x05\x04\0\x02\x02\x04\x12\x06\xcf\x01\x02\xcb\x01\x19\n\r\n\x05\x04\0\
    \x02\x02\x06\x12\x04\xcf\x01\x02\n\n\r\n\x05\x04\0\x02\x02\x01\x12\x04\
    \xcf\x01\x0b\x13\n\r\n\x05\x04\0\x02\x02\x03\x12\x04\xcf\x01\x16\x17\n\
    \xa4\x02\n\x04\x04\0\x02\x03\x12\x04\xd6\x01\x02$\x1a\x95\x02\x20The\x20\
    clusters\x20to\x20be\x20created\x20within\x20the\x20instance,\x20mapped\
    \x20by\x20desired\n\x20cluster\x20ID,\x20e.g.,\x20just\x20`mycluster`\
    \x20rather\x20than\n\x20`projects/myproject/instances/myinstance/cluster\
    s/mycluster`.\n\x20Fields\x20marked\x20`OutputOnly`\x20must\x20be\x20lef\
    t\x20blank.\n\x20Currently,\x20at\x20most\x20two\x20clusters\x20can\x20b\
    e\x20specified.\n\n\x0f\n\x05\x04\0\x02\x03\x04\x12\x06\xd6\x01\x02\xcf\
    \x01\x18\n\r\n\x05\x04\0\x02\x03\x06\x12\x04\xd6\x01\x02\x16\n\r\n\x05\
    \x04\0\x02\x03\x01\x12\x04\xd6\x01\x17\x1f\n\r\n\x05\x04\0\x02\x03\x03\
    \x12\x04\xd6\x01\"#\nF\n\x02\x04\x01\x12\x06\xda\x01\0\xde\x01\x01\x1a8\
    \x20Request\x20message\x20for\x20BigtableInstanceAdmin.GetInstance.\n\n\
    \x0b\n\x03\x04\x01\x01\x12\x04\xda\x01\x08\x1a\n}\n\x04\x04\x01\x02\0\
    \x12\x04\xdd\x01\x02\x12\x1ao\x20The\x20unique\x20name\x20of\x20the\x20r\
    equested\x20instance.\x20Values\x20are\x20of\x20the\x20form\n\x20`projec\
    ts/<project>/instances/<instance>`.\n\n\x0f\n\x05\x04\x01\x02\0\x04\x12\
    \x06\xdd\x01\x02\xda\x01\x1c\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\xdd\x01\
    \x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xdd\x01\t\r\n\r\n\x05\x04\
    \x01\x02\0\x03\x12\x04\xdd\x01\x10\x11\nH\n\x02\x04\x02\x12\x06\xe1\x01\
    \0\xe8\x01\x01\x1a:\x20Request\x20message\x20for\x20BigtableInstanceAdmi\
    n.ListInstances.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xe1\x01\x08\x1c\n\x88\
    \x01\n\x04\x04\x02\x02\0\x12\x04\xe4\x01\x02\x14\x1az\x20The\x20unique\
    \x20name\x20of\x20the\x20project\x20for\x20which\x20a\x20list\x20of\x20i\
    nstances\x20is\x20requested.\n\x20Values\x20are\x20of\x20the\x20form\x20\
    `projects/<project>`.\n\n\x0f\n\x05\x04\x02\x02\0\x04\x12\x06\xe4\x01\
    \x02\xe1\x01\x1e\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\xe4\x01\x02\x08\n\r\
    \n\x05\x04\x02\x02\0\x01\x12\x04\xe4\x01\t\x0f\n\r\n\x05\x04\x02\x02\0\
    \x03\x12\x04\xe4\x01\x12\x13\n=\n\x04\x04\x02\x02\x01\x12\x04\xe7\x01\
    \x02\x18\x1a/\x20DEPRECATED:\x20This\x20field\x20is\x20unused\x20and\x20\
    ignored.\n\n\x0f\n\x05\x04\x02\x02\x01\x04\x12\x06\xe7\x01\x02\xe4\x01\
    \x14\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\xe7\x01\x02\x08\n\r\n\x05\x04\
    \x02\x02\x01\x01\x12\x04\xe7\x01\t\x13\n\r\n\x05\x04\x02\x02\x01\x03\x12\
    \x04\xe7\x01\x16\x17\nI\n\x02\x04\x03\x12\x06\xeb\x01\0\xf9\x01\x01\x1a;\
    \x20Response\x20message\x20for\x20BigtableInstanceAdmin.ListInstances.\n\
    \n\x0b\n\x03\x04\x03\x01\x12\x04\xeb\x01\x08\x1d\n0\n\x04\x04\x03\x02\0\
    \x12\x04\xed\x01\x02\"\x1a\"\x20The\x20list\x20of\x20requested\x20instan\
    ces.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\xed\x01\x02\n\n\r\n\x05\x04\
    \x03\x02\0\x06\x12\x04\xed\x01\x0b\x13\n\r\n\x05\x04\x03\x02\0\x01\x12\
    \x04\xed\x01\x14\x1d\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xed\x01\x20!\n\
    \x95\x03\n\x04\x04\x03\x02\x01\x12\x04\xf5\x01\x02'\x1a\x86\x03\x20Locat\
    ions\x20from\x20which\x20Instance\x20information\x20could\x20not\x20be\
    \x20retrieved,\n\x20due\x20to\x20an\x20outage\x20or\x20some\x20other\x20\
    transient\x20condition.\n\x20Instances\x20whose\x20Clusters\x20are\x20al\
    l\x20in\x20one\x20of\x20the\x20failed\x20locations\n\x20may\x20be\x20mis\
    sing\x20from\x20`instances`,\x20and\x20Instances\x20with\x20at\x20least\
    \x20one\n\x20Cluster\x20in\x20a\x20failed\x20location\x20may\x20only\x20\
    have\x20partial\x20information\x20returned.\n\x20Values\x20are\x20of\x20\
    the\x20form\x20`projects/<project>/locations/<zone_id>`\n\n\r\n\x05\x04\
    \x03\x02\x01\x04\x12\x04\xf5\x01\x02\n\n\r\n\x05\x04\x03\x02\x01\x05\x12\
    \x04\xf5\x01\x0b\x11\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xf5\x01\x12\"\
    \n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xf5\x01%&\n=\n\x04\x04\x03\x02\
    \x02\x12\x04\xf8\x01\x02\x1d\x1a/\x20DEPRECATED:\x20This\x20field\x20is\
    \x20unused\x20and\x20ignored.\n\n\x0f\n\x05\x04\x03\x02\x02\x04\x12\x06\
    \xf8\x01\x02\xf5\x01'\n\r\n\x05\x04\x03\x02\x02\x05\x12\x04\xf8\x01\x02\
    \x08\n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\xf8\x01\t\x18\n\r\n\x05\x04\
    \x03\x02\x02\x03\x12\x04\xf8\x01\x1b\x1c\nP\n\x02\x04\x04\x12\x06\xfc\
    \x01\0\x83\x02\x01\x1aB\x20Request\x20message\x20for\x20BigtableInstance\
    Admin.PartialUpdateInstance.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xfc\x01\
    \x08$\nN\n\x04\x04\x04\x02\0\x12\x04\xfe\x01\x02\x18\x1a@\x20The\x20Inst\
    ance\x20which\x20will\x20(partially)\x20replace\x20the\x20current\x20val\
    ue.\n\n\x0f\n\x05\x04\x04\x02\0\x04\x12\x06\xfe\x01\x02\xfc\x01&\n\r\n\
    \x05\x04\x04\x02\0\x06\x12\x04\xfe\x01\x02\n\n\r\n\x05\x04\x04\x02\0\x01\
    \x12\x04\xfe\x01\x0b\x13\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xfe\x01\x16\
    \x17\n`\n\x04\x04\x04\x02\x01\x12\x04\x82\x02\x02,\x1aR\x20The\x20subset\
    \x20of\x20Instance\x20fields\x20which\x20should\x20be\x20replaced.\n\x20\
    Must\x20be\x20explicitly\x20set.\n\n\x0f\n\x05\x04\x04\x02\x01\x04\x12\
    \x06\x82\x02\x02\xfe\x01\x18\n\r\n\x05\x04\x04\x02\x01\x06\x12\x04\x82\
    \x02\x02\x1b\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\x82\x02\x1c'\n\r\n\
    \x05\x04\x04\x02\x01\x03\x12\x04\x82\x02*+\nI\n\x02\x04\x05\x12\x06\x86\
    \x02\0\x8a\x02\x01\x1a;\x20Request\x20message\x20for\x20BigtableInstance\
    Admin.DeleteInstance.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\x86\x02\x08\x1d\
    \n\x81\x01\n\x04\x04\x05\x02\0\x12\x04\x89\x02\x02\x12\x1as\x20The\x20un\
    ique\x20name\x20of\x20the\x20instance\x20to\x20be\x20deleted.\n\x20Value\
    s\x20are\x20of\x20the\x20form\x20`projects/<project>/instances/<instance\
    >`.\n\n\x0f\n\x05\x04\x05\x02\0\x04\x12\x06\x89\x02\x02\x86\x02\x1f\n\r\
    \n\x05\x04\x05\x02\0\x05\x12\x04\x89\x02\x02\x08\n\r\n\x05\x04\x05\x02\0\
    \x01\x12\x04\x89\x02\t\r\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x89\x02\x10\
    \x11\nH\n\x02\x04\x06\x12\x06\x8d\x02\0\x9b\x02\x01\x1a:\x20Request\x20m\
    essage\x20for\x20BigtableInstanceAdmin.CreateCluster.\n\n\x0b\n\x03\x04\
    \x06\x01\x12\x04\x8d\x02\x08\x1c\n\x98\x01\n\x04\x04\x06\x02\0\x12\x04\
    \x91\x02\x02\x14\x1a\x89\x01\x20The\x20unique\x20name\x20of\x20the\x20in\
    stance\x20in\x20which\x20to\x20create\x20the\x20new\x20cluster.\n\x20Val\
    ues\x20are\x20of\x20the\x20form\n\x20`projects/<project>/instances/<inst\
    ance>`.\n\n\x0f\n\x05\x04\x06\x02\0\x04\x12\x06\x91\x02\x02\x8d\x02\x1e\
    \n\r\n\x05\x04\x06\x02\0\x05\x12\x04\x91\x02\x02\x08\n\r\n\x05\x04\x06\
    \x02\0\x01\x12\x04\x91\x02\t\x0f\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x91\
    \x02\x12\x13\n\xbc\x01\n\x04\x04\x06\x02\x01\x12\x04\x96\x02\x02\x18\x1a\
    \xad\x01\x20The\x20ID\x20to\x20be\x20used\x20when\x20referring\x20to\x20\
    the\x20new\x20cluster\x20within\x20its\x20instance,\n\x20e.g.,\x20just\
    \x20`mycluster`\x20rather\x20than\n\x20`projects/myproject/instances/myi\
    nstance/clusters/mycluster`.\n\n\x0f\n\x05\x04\x06\x02\x01\x04\x12\x06\
    \x96\x02\x02\x91\x02\x14\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\x96\x02\
    \x02\x08\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\x96\x02\t\x13\n\r\n\x05\
    \x04\x06\x02\x01\x03\x12\x04\x96\x02\x16\x17\nZ\n\x04\x04\x06\x02\x02\
    \x12\x04\x9a\x02\x02\x16\x1aL\x20The\x20cluster\x20to\x20be\x20created.\
    \n\x20Fields\x20marked\x20`OutputOnly`\x20must\x20be\x20left\x20blank.\n\
    \n\x0f\n\x05\x04\x06\x02\x02\x04\x12\x06\x9a\x02\x02\x96\x02\x18\n\r\n\
    \x05\x04\x06\x02\x02\x06\x12\x04\x9a\x02\x02\t\n\r\n\x05\x04\x06\x02\x02\
    \x01\x12\x04\x9a\x02\n\x11\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\x9a\x02\
    \x14\x15\nE\n\x02\x04\x07\x12\x06\x9e\x02\0\xa2\x02\x01\x1a7\x20Request\
    \x20message\x20for\x20BigtableInstanceAdmin.GetCluster.\n\n\x0b\n\x03\
    \x04\x07\x01\x12\x04\x9e\x02\x08\x19\n\x90\x01\n\x04\x04\x07\x02\0\x12\
    \x04\xa1\x02\x02\x12\x1a\x81\x01\x20The\x20unique\x20name\x20of\x20the\
    \x20requested\x20cluster.\x20Values\x20are\x20of\x20the\x20form\n\x20`pr\
    ojects/<project>/instances/<instance>/clusters/<cluster>`.\n\n\x0f\n\x05\
    \x04\x07\x02\0\x04\x12\x06\xa1\x02\x02\x9e\x02\x1b\n\r\n\x05\x04\x07\x02\
    \0\x05\x12\x04\xa1\x02\x02\x08\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xa1\
    \x02\t\r\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xa1\x02\x10\x11\nG\n\x02\
    \x04\x08\x12\x06\xa5\x02\0\xae\x02\x01\x1a9\x20Request\x20message\x20for\
    \x20BigtableInstanceAdmin.ListClusters.\n\n\x0b\n\x03\x04\x08\x01\x12\
    \x04\xa5\x02\x08\x1b\n\x90\x02\n\x04\x04\x08\x02\0\x12\x04\xaa\x02\x02\
    \x14\x1a\x81\x02\x20The\x20unique\x20name\x20of\x20the\x20instance\x20fo\
    r\x20which\x20a\x20list\x20of\x20clusters\x20is\x20requested.\n\x20Value\
    s\x20are\x20of\x20the\x20form\x20`projects/<project>/instances/<instance\
    >`.\n\x20Use\x20`<instance>\x20=\x20'-'`\x20to\x20list\x20Clusters\x20fo\
    r\x20all\x20Instances\x20in\x20a\x20project,\n\x20e.g.,\x20`projects/myp\
    roject/instances/-`.\n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\xaa\x02\x02\
    \xa5\x02\x1d\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xaa\x02\x02\x08\n\r\n\
    \x05\x04\x08\x02\0\x01\x12\x04\xaa\x02\t\x0f\n\r\n\x05\x04\x08\x02\0\x03\
    \x12\x04\xaa\x02\x12\x13\n=\n\x04\x04\x08\x02\x01\x12\x04\xad\x02\x02\
    \x18\x1a/\x20DEPRECATED:\x20This\x20field\x20is\x20unused\x20and\x20igno\
    red.\n\n\x0f\n\x05\x04\x08\x02\x01\x04\x12\x06\xad\x02\x02\xaa\x02\x14\n\
    \r\n\x05\x04\x08\x02\x01\x05\x12\x04\xad\x02\x02\x08\n\r\n\x05\x04\x08\
    \x02\x01\x01\x12\x04\xad\x02\t\x13\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\
    \xad\x02\x16\x17\nH\n\x02\x04\t\x12\x06\xb1\x02\0\xbe\x02\x01\x1a:\x20Re\
    sponse\x20message\x20for\x20BigtableInstanceAdmin.ListClusters.\n\n\x0b\
    \n\x03\x04\t\x01\x12\x04\xb1\x02\x08\x1c\n/\n\x04\x04\t\x02\0\x12\x04\
    \xb3\x02\x02\x20\x1a!\x20The\x20list\x20of\x20requested\x20clusters.\n\n\
    \r\n\x05\x04\t\x02\0\x04\x12\x04\xb3\x02\x02\n\n\r\n\x05\x04\t\x02\0\x06\
    \x12\x04\xb3\x02\x0b\x12\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xb3\x02\x13\
    \x1b\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xb3\x02\x1e\x1f\n\xb6\x02\n\x04\
    \x04\t\x02\x01\x12\x04\xba\x02\x02'\x1a\xa7\x02\x20Locations\x20from\x20\
    which\x20Cluster\x20information\x20could\x20not\x20be\x20retrieved,\n\
    \x20due\x20to\x20an\x20outage\x20or\x20some\x20other\x20transient\x20con\
    dition.\n\x20Clusters\x20from\x20these\x20locations\x20may\x20be\x20miss\
    ing\x20from\x20`clusters`,\n\x20or\x20may\x20only\x20have\x20partial\x20\
    information\x20returned.\n\x20Values\x20are\x20of\x20the\x20form\x20`pro\
    jects/<project>/locations/<zone_id>`\n\n\r\n\x05\x04\t\x02\x01\x04\x12\
    \x04\xba\x02\x02\n\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\xba\x02\x0b\x11\n\
    \r\n\x05\x04\t\x02\x01\x01\x12\x04\xba\x02\x12\"\n\r\n\x05\x04\t\x02\x01\
    \x03\x12\x04\xba\x02%&\n=\n\x04\x04\t\x02\x02\x12\x04\xbd\x02\x02\x1d\
    \x1a/\x20DEPRECATED:\x20This\x20field\x20is\x20unused\x20and\x20ignored.\
    \n\n\x0f\n\x05\x04\t\x02\x02\x04\x12\x06\xbd\x02\x02\xba\x02'\n\r\n\x05\
    \x04\t\x02\x02\x05\x12\x04\xbd\x02\x02\x08\n\r\n\x05\x04\t\x02\x02\x01\
    \x12\x04\xbd\x02\t\x18\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\xbd\x02\x1b\
    \x1c\nH\n\x02\x04\n\x12\x06\xc1\x02\0\xc5\x02\x01\x1a:\x20Request\x20mes\
    sage\x20for\x20BigtableInstanceAdmin.DeleteCluster.\n\n\x0b\n\x03\x04\n\
    \x01\x12\x04\xc1\x02\x08\x1c\n\x94\x01\n\x04\x04\n\x02\0\x12\x04\xc4\x02\
    \x02\x12\x1a\x85\x01\x20The\x20unique\x20name\x20of\x20the\x20cluster\
    \x20to\x20be\x20deleted.\x20Values\x20are\x20of\x20the\x20form\n\x20`pro\
    jects/<project>/instances/<instance>/clusters/<cluster>`.\n\n\x0f\n\x05\
    \x04\n\x02\0\x04\x12\x06\xc4\x02\x02\xc1\x02\x1e\n\r\n\x05\x04\n\x02\0\
    \x05\x12\x04\xc4\x02\x02\x08\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xc4\x02\t\
    \r\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xc4\x02\x10\x11\nJ\n\x02\x04\x0b\
    \x12\x06\xc8\x02\0\xd1\x02\x01\x1a<\x20The\x20metadata\x20for\x20the\x20\
    Operation\x20returned\x20by\x20CreateInstance.\n\n\x0b\n\x03\x04\x0b\x01\
    \x12\x04\xc8\x02\x08\x1e\nZ\n\x04\x04\x0b\x02\0\x12\x04\xca\x02\x02-\x1a\
    L\x20The\x20request\x20that\x20prompted\x20the\x20initiation\x20of\x20th\
    is\x20CreateInstance\x20operation.\n\n\x0f\n\x05\x04\x0b\x02\0\x04\x12\
    \x06\xca\x02\x02\xc8\x02\x20\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\xca\x02\
    \x02\x17\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xca\x02\x18(\n\r\n\x05\x04\
    \x0b\x02\0\x03\x12\x04\xca\x02+,\nD\n\x04\x04\x0b\x02\x01\x12\x04\xcd\
    \x02\x02-\x1a6\x20The\x20time\x20at\x20which\x20the\x20original\x20reque\
    st\x20was\x20received.\n\n\x0f\n\x05\x04\x0b\x02\x01\x04\x12\x06\xcd\x02\
    \x02\xca\x02-\n\r\n\x05\x04\x0b\x02\x01\x06\x12\x04\xcd\x02\x02\x1b\n\r\
    \n\x05\x04\x0b\x02\x01\x01\x12\x04\xcd\x02\x1c(\n\r\n\x05\x04\x0b\x02\
    \x01\x03\x12\x04\xcd\x02+,\nU\n\x04\x04\x0b\x02\x02\x12\x04\xd0\x02\x02,\
    \x1aG\x20The\x20time\x20at\x20which\x20the\x20operation\x20failed\x20or\
    \x20was\x20completed\x20successfully.\n\n\x0f\n\x05\x04\x0b\x02\x02\x04\
    \x12\x06\xd0\x02\x02\xcd\x02-\n\r\n\x05\x04\x0b\x02\x02\x06\x12\x04\xd0\
    \x02\x02\x1b\n\r\n\x05\x04\x0b\x02\x02\x01\x12\x04\xd0\x02\x1c'\n\r\n\
    \x05\x04\x0b\x02\x02\x03\x12\x04\xd0\x02*+\nJ\n\x02\x04\x0c\x12\x06\xd4\
    \x02\0\xdd\x02\x01\x1a<\x20The\x20metadata\x20for\x20the\x20Operation\
    \x20returned\x20by\x20UpdateInstance.\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\
    \xd4\x02\x08\x1e\nZ\n\x04\x04\x0c\x02\0\x12\x04\xd6\x02\x024\x1aL\x20The\
    \x20request\x20that\x20prompted\x20the\x20initiation\x20of\x20this\x20Up\
    dateInstance\x20operation.\n\n\x0f\n\x05\x04\x0c\x02\0\x04\x12\x06\xd6\
    \x02\x02\xd4\x02\x20\n\r\n\x05\x04\x0c\x02\0\x06\x12\x04\xd6\x02\x02\x1e\
    \n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xd6\x02\x1f/\n\r\n\x05\x04\x0c\x02\
    \0\x03\x12\x04\xd6\x0223\nD\n\x04\x04\x0c\x02\x01\x12\x04\xd9\x02\x02-\
    \x1a6\x20The\x20time\x20at\x20which\x20the\x20original\x20request\x20was\
    \x20received.\n\n\x0f\n\x05\x04\x0c\x02\x01\x04\x12\x06\xd9\x02\x02\xd6\
    \x024\n\r\n\x05\x04\x0c\x02\x01\x06\x12\x04\xd9\x02\x02\x1b\n\r\n\x05\
    \x04\x0c\x02\x01\x01\x12\x04\xd9\x02\x1c(\n\r\n\x05\x04\x0c\x02\x01\x03\
    \x12\x04\xd9\x02+,\nU\n\x04\x04\x0c\x02\x02\x12\x04\xdc\x02\x02,\x1aG\
    \x20The\x20time\x20at\x20which\x20the\x20operation\x20failed\x20or\x20wa\
    s\x20completed\x20successfully.\n\n\x0f\n\x05\x04\x0c\x02\x02\x04\x12\
    \x06\xdc\x02\x02\xd9\x02-\n\r\n\x05\x04\x0c\x02\x02\x06\x12\x04\xdc\x02\
    \x02\x1b\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\xdc\x02\x1c'\n\r\n\x05\
    \x04\x0c\x02\x02\x03\x12\x04\xdc\x02*+\nI\n\x02\x04\r\x12\x06\xe0\x02\0\
    \xe9\x02\x01\x1a;\x20The\x20metadata\x20for\x20the\x20Operation\x20retur\
    ned\x20by\x20CreateCluster.\n\n\x0b\n\x03\x04\r\x01\x12\x04\xe0\x02\x08\
    \x1d\nY\n\x04\x04\r\x02\0\x12\x04\xe2\x02\x02,\x1aK\x20The\x20request\
    \x20that\x20prompted\x20the\x20initiation\x20of\x20this\x20CreateCluster\
    \x20operation.\n\n\x0f\n\x05\x04\r\x02\0\x04\x12\x06\xe2\x02\x02\xe0\x02\
    \x1f\n\r\n\x05\x04\r\x02\0\x06\x12\x04\xe2\x02\x02\x16\n\r\n\x05\x04\r\
    \x02\0\x01\x12\x04\xe2\x02\x17'\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xe2\
    \x02*+\nD\n\x04\x04\r\x02\x01\x12\x04\xe5\x02\x02-\x1a6\x20The\x20time\
    \x20at\x20which\x20the\x20original\x20request\x20was\x20received.\n\n\
    \x0f\n\x05\x04\r\x02\x01\x04\x12\x06\xe5\x02\x02\xe2\x02,\n\r\n\x05\x04\
    \r\x02\x01\x06\x12\x04\xe5\x02\x02\x1b\n\r\n\x05\x04\r\x02\x01\x01\x12\
    \x04\xe5\x02\x1c(\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\xe5\x02+,\nU\n\x04\
    \x04\r\x02\x02\x12\x04\xe8\x02\x02,\x1aG\x20The\x20time\x20at\x20which\
    \x20the\x20operation\x20failed\x20or\x20was\x20completed\x20successfully\
    .\n\n\x0f\n\x05\x04\r\x02\x02\x04\x12\x06\xe8\x02\x02\xe5\x02-\n\r\n\x05\
    \x04\r\x02\x02\x06\x12\x04\xe8\x02\x02\x1b\n\r\n\x05\x04\r\x02\x02\x01\
    \x12\x04\xe8\x02\x1c'\n\r\n\x05\x04\r\x02\x02\x03\x12\x04\xe8\x02*+\nI\n\
    \x02\x04\x0e\x12\x06\xec\x02\0\xf5\x02\x01\x1a;\x20The\x20metadata\x20fo\
    r\x20the\x20Operation\x20returned\x20by\x20UpdateCluster.\n\n\x0b\n\x03\
    \x04\x0e\x01\x12\x04\xec\x02\x08\x1d\nY\n\x04\x04\x0e\x02\0\x12\x04\xee\
    \x02\x02\x1f\x1aK\x20The\x20request\x20that\x20prompted\x20the\x20initia\
    tion\x20of\x20this\x20UpdateCluster\x20operation.\n\n\x0f\n\x05\x04\x0e\
    \x02\0\x04\x12\x06\xee\x02\x02\xec\x02\x1f\n\r\n\x05\x04\x0e\x02\0\x06\
    \x12\x04\xee\x02\x02\t\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xee\x02\n\x1a\
    \n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\xee\x02\x1d\x1e\nD\n\x04\x04\x0e\
    \x02\x01\x12\x04\xf1\x02\x02-\x1a6\x20The\x20time\x20at\x20which\x20the\
    \x20original\x20request\x20was\x20received.\n\n\x0f\n\x05\x04\x0e\x02\
    \x01\x04\x12\x06\xf1\x02\x02\xee\x02\x1f\n\r\n\x05\x04\x0e\x02\x01\x06\
    \x12\x04\xf1\x02\x02\x1b\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\xf1\x02\
    \x1c(\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\xf1\x02+,\nU\n\x04\x04\x0e\
    \x02\x02\x12\x04\xf4\x02\x02,\x1aG\x20The\x20time\x20at\x20which\x20the\
    \x20operation\x20failed\x20or\x20was\x20completed\x20successfully.\n\n\
    \x0f\n\x05\x04\x0e\x02\x02\x04\x12\x06\xf4\x02\x02\xf1\x02-\n\r\n\x05\
    \x04\x0e\x02\x02\x06\x12\x04\xf4\x02\x02\x1b\n\r\n\x05\x04\x0e\x02\x02\
    \x01\x12\x04\xf4\x02\x1c'\n\r\n\x05\x04\x0e\x02\x02\x03\x12\x04\xf4\x02*\
    +\nK\n\x02\x04\x0f\x12\x06\xf8\x02\0\x89\x03\x01\x1a=\x20Request\x20mess\
    age\x20for\x20BigtableInstanceAdmin.CreateAppProfile.\n\n\x0b\n\x03\x04\
    \x0f\x01\x12\x04\xf8\x02\x08\x1f\n\x9c\x01\n\x04\x04\x0f\x02\0\x12\x04\
    \xfc\x02\x02\x14\x1a\x8d\x01\x20The\x20unique\x20name\x20of\x20the\x20in\
    stance\x20in\x20which\x20to\x20create\x20the\x20new\x20app\x20profile.\n\
    \x20Values\x20are\x20of\x20the\x20form\n\x20`projects/<project>/instance\
    s/<instance>`.\n\n\x0f\n\x05\x04\x0f\x02\0\x04\x12\x06\xfc\x02\x02\xf8\
    \x02!\n\r\n\x05\x04\x0f\x02\0\x05\x12\x04\xfc\x02\x02\x08\n\r\n\x05\x04\
    \x0f\x02\0\x01\x12\x04\xfc\x02\t\x0f\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\
    \xfc\x02\x12\x13\n\xc3\x01\n\x04\x04\x0f\x02\x01\x12\x04\x81\x03\x02\x1c\
    \x1a\xb4\x01\x20The\x20ID\x20to\x20be\x20used\x20when\x20referring\x20to\
    \x20the\x20new\x20app\x20profile\x20within\x20its\n\x20instance,\x20e.g.\
    ,\x20just\x20`myprofile`\x20rather\x20than\n\x20`projects/myproject/inst\
    ances/myinstance/appProfiles/myprofile`.\n\n\x0f\n\x05\x04\x0f\x02\x01\
    \x04\x12\x06\x81\x03\x02\xfc\x02\x14\n\r\n\x05\x04\x0f\x02\x01\x05\x12\
    \x04\x81\x03\x02\x08\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\x81\x03\t\x17\
    \n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\x81\x03\x1a\x1b\n[\n\x04\x04\x0f\
    \x02\x02\x12\x04\x85\x03\x02\x1d\x1aM\x20The\x20app\x20profile\x20to\x20\
    be\x20created.\n\x20Fields\x20marked\x20`OutputOnly`\x20will\x20be\x20ig\
    nored.\n\n\x0f\n\x05\x04\x0f\x02\x02\x04\x12\x06\x85\x03\x02\x81\x03\x1c\
    \n\r\n\x05\x04\x0f\x02\x02\x06\x12\x04\x85\x03\x02\x0c\n\r\n\x05\x04\x0f\
    \x02\x02\x01\x12\x04\x85\x03\r\x18\n\r\n\x05\x04\x0f\x02\x02\x03\x12\x04\
    \x85\x03\x1b\x1c\nL\n\x04\x04\x0f\x02\x03\x12\x04\x88\x03\x02\x1b\x1a>\
    \x20If\x20true,\x20ignore\x20safety\x20checks\x20when\x20creating\x20the\
    \x20app\x20profile.\n\n\x0f\n\x05\x04\x0f\x02\x03\x04\x12\x06\x88\x03\
    \x02\x85\x03\x1d\n\r\n\x05\x04\x0f\x02\x03\x05\x12\x04\x88\x03\x02\x06\n\
    \r\n\x05\x04\x0f\x02\x03\x01\x12\x04\x88\x03\x07\x16\n\r\n\x05\x04\x0f\
    \x02\x03\x03\x12\x04\x88\x03\x19\x1a\nH\n\x02\x04\x10\x12\x06\x8c\x03\0\
    \x90\x03\x01\x1a:\x20Request\x20message\x20for\x20BigtableInstanceAdmin.\
    GetAppProfile.\n\n\x0b\n\x03\x04\x10\x01\x12\x04\x8c\x03\x08\x1c\n\x9b\
    \x01\n\x04\x04\x10\x02\0\x12\x04\x8f\x03\x02\x12\x1a\x8c\x01\x20The\x20u\
    nique\x20name\x20of\x20the\x20requested\x20app\x20profile.\x20Values\x20\
    are\x20of\x20the\x20form\n\x20`projects/<project>/instances/<instance>/a\
    ppProfiles/<app_profile>`.\n\n\x0f\n\x05\x04\x10\x02\0\x04\x12\x06\x8f\
    \x03\x02\x8c\x03\x1e\n\r\n\x05\x04\x10\x02\0\x05\x12\x04\x8f\x03\x02\x08\
    \n\r\n\x05\x04\x10\x02\0\x01\x12\x04\x8f\x03\t\r\n\r\n\x05\x04\x10\x02\0\
    \x03\x12\x04\x8f\x03\x10\x11\nJ\n\x02\x04\x11\x12\x06\x93\x03\0\xa1\x03\
    \x01\x1a<\x20Request\x20message\x20for\x20BigtableInstanceAdmin.ListAppP\
    rofiles.\n\n\x0b\n\x03\x04\x11\x01\x12\x04\x93\x03\x08\x1e\n\x98\x02\n\
    \x04\x04\x11\x02\0\x12\x04\x99\x03\x02\x14\x1a\x89\x02\x20The\x20unique\
    \x20name\x20of\x20the\x20instance\x20for\x20which\x20a\x20list\x20of\x20\
    app\x20profiles\x20is\n\x20requested.\x20Values\x20are\x20of\x20the\x20f\
    orm\n\x20`projects/<project>/instances/<instance>`.\n\x20Use\x20`<instan\
    ce>\x20=\x20'-'`\x20to\x20list\x20AppProfiles\x20for\x20all\x20Instances\
    \x20in\x20a\x20project,\n\x20e.g.,\x20`projects/myproject/instances/-`.\
    \n\n\x0f\n\x05\x04\x11\x02\0\x04\x12\x06\x99\x03\x02\x93\x03\x20\n\r\n\
    \x05\x04\x11\x02\0\x05\x12\x04\x99\x03\x02\x08\n\r\n\x05\x04\x11\x02\0\
    \x01\x12\x04\x99\x03\t\x0f\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\x99\x03\
    \x12\x13\nY\n\x04\x04\x11\x02\x01\x12\x04\x9d\x03\x02\x16\x1aK\x20Maximu\
    m\x20number\x20of\x20results\x20per\x20page.\n\x20CURRENTLY\x20UNIMPLEME\
    NTED\x20AND\x20IGNORED.\n\n\x0f\n\x05\x04\x11\x02\x01\x04\x12\x06\x9d\
    \x03\x02\x99\x03\x14\n\r\n\x05\x04\x11\x02\x01\x05\x12\x04\x9d\x03\x02\
    \x07\n\r\n\x05\x04\x11\x02\x01\x01\x12\x04\x9d\x03\x08\x11\n\r\n\x05\x04\
    \x11\x02\x01\x03\x12\x04\x9d\x03\x14\x15\nK\n\x04\x04\x11\x02\x02\x12\
    \x04\xa0\x03\x02\x18\x1a=\x20The\x20value\x20of\x20`next_page_token`\x20\
    returned\x20by\x20a\x20previous\x20call.\n\n\x0f\n\x05\x04\x11\x02\x02\
    \x04\x12\x06\xa0\x03\x02\x9d\x03\x16\n\r\n\x05\x04\x11\x02\x02\x05\x12\
    \x04\xa0\x03\x02\x08\n\r\n\x05\x04\x11\x02\x02\x01\x12\x04\xa0\x03\t\x13\
    \n\r\n\x05\x04\x11\x02\x02\x03\x12\x04\xa0\x03\x16\x17\nK\n\x02\x04\x12\
    \x12\x06\xa4\x03\0\xb2\x03\x01\x1a=\x20Response\x20message\x20for\x20Big\
    tableInstanceAdmin.ListAppProfiles.\n\n\x0b\n\x03\x04\x12\x01\x12\x04\
    \xa4\x03\x08\x1f\n3\n\x04\x04\x12\x02\0\x12\x04\xa6\x03\x02'\x1a%\x20The\
    \x20list\x20of\x20requested\x20app\x20profiles.\n\n\r\n\x05\x04\x12\x02\
    \0\x04\x12\x04\xa6\x03\x02\n\n\r\n\x05\x04\x12\x02\0\x06\x12\x04\xa6\x03\
    \x0b\x15\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\xa6\x03\x16\"\n\r\n\x05\x04\
    \x12\x02\0\x03\x12\x04\xa6\x03%&\n\xaa\x01\n\x04\x04\x12\x02\x01\x12\x04\
    \xab\x03\x02\x1d\x1a\x9b\x01\x20Set\x20if\x20not\x20all\x20app\x20profil\
    es\x20could\x20be\x20returned\x20in\x20a\x20single\x20response.\n\x20Pas\
    s\x20this\x20value\x20to\x20`page_token`\x20in\x20another\x20request\x20\
    to\x20get\x20the\x20next\n\x20page\x20of\x20results.\n\n\x0f\n\x05\x04\
    \x12\x02\x01\x04\x12\x06\xab\x03\x02\xa6\x03'\n\r\n\x05\x04\x12\x02\x01\
    \x05\x12\x04\xab\x03\x02\x08\n\r\n\x05\x04\x12\x02\x01\x01\x12\x04\xab\
    \x03\t\x18\n\r\n\x05\x04\x12\x02\x01\x03\x12\x04\xab\x03\x1b\x1c\n\x90\
    \x02\n\x04\x04\x12\x02\x02\x12\x04\xb1\x03\x02'\x1a\x81\x02\x20Locations\
    \x20from\x20which\x20AppProfile\x20information\x20could\x20not\x20be\x20\
    retrieved,\n\x20due\x20to\x20an\x20outage\x20or\x20some\x20other\x20tran\
    sient\x20condition.\n\x20AppProfiles\x20from\x20these\x20locations\x20ma\
    y\x20be\x20missing\x20from\x20`app_profiles`.\n\x20Values\x20are\x20of\
    \x20the\x20form\x20`projects/<project>/locations/<zone_id>`\n\n\r\n\x05\
    \x04\x12\x02\x02\x04\x12\x04\xb1\x03\x02\n\n\r\n\x05\x04\x12\x02\x02\x05\
    \x12\x04\xb1\x03\x0b\x11\n\r\n\x05\x04\x12\x02\x02\x01\x12\x04\xb1\x03\
    \x12\"\n\r\n\x05\x04\x12\x02\x02\x03\x12\x04\xb1\x03%&\nK\n\x02\x04\x13\
    \x12\x06\xb5\x03\0\xbf\x03\x01\x1a=\x20Request\x20message\x20for\x20Bigt\
    ableInstanceAdmin.UpdateAppProfile.\n\n\x0b\n\x03\x04\x13\x01\x12\x04\
    \xb5\x03\x08\x1f\nQ\n\x04\x04\x13\x02\0\x12\x04\xb7\x03\x02\x1d\x1aC\x20\
    The\x20app\x20profile\x20which\x20will\x20(partially)\x20replace\x20the\
    \x20current\x20value.\n\n\x0f\n\x05\x04\x13\x02\0\x04\x12\x06\xb7\x03\
    \x02\xb5\x03!\n\r\n\x05\x04\x13\x02\0\x06\x12\x04\xb7\x03\x02\x0c\n\r\n\
    \x05\x04\x13\x02\0\x01\x12\x04\xb7\x03\r\x18\n\r\n\x05\x04\x13\x02\0\x03\
    \x12\x04\xb7\x03\x1b\x1c\nr\n\x04\x04\x13\x02\x01\x12\x04\xbb\x03\x02,\
    \x1ad\x20The\x20subset\x20of\x20app\x20profile\x20fields\x20which\x20sho\
    uld\x20be\x20replaced.\n\x20If\x20unset,\x20all\x20fields\x20will\x20be\
    \x20replaced.\n\n\x0f\n\x05\x04\x13\x02\x01\x04\x12\x06\xbb\x03\x02\xb7\
    \x03\x1d\n\r\n\x05\x04\x13\x02\x01\x06\x12\x04\xbb\x03\x02\x1b\n\r\n\x05\
    \x04\x13\x02\x01\x01\x12\x04\xbb\x03\x1c'\n\r\n\x05\x04\x13\x02\x01\x03\
    \x12\x04\xbb\x03*+\nL\n\x04\x04\x13\x02\x02\x12\x04\xbe\x03\x02\x1b\x1a>\
    \x20If\x20true,\x20ignore\x20safety\x20checks\x20when\x20updating\x20the\
    \x20app\x20profile.\n\n\x0f\n\x05\x04\x13\x02\x02\x04\x12\x06\xbe\x03\
    \x02\xbb\x03,\n\r\n\x05\x04\x13\x02\x02\x05\x12\x04\xbe\x03\x02\x06\n\r\
    \n\x05\x04\x13\x02\x02\x01\x12\x04\xbe\x03\x07\x16\n\r\n\x05\x04\x13\x02\
    \x02\x03\x12\x04\xbe\x03\x19\x1a\nK\n\x02\x04\x14\x12\x06\xc2\x03\0\xc9\
    \x03\x01\x1a=\x20Request\x20message\x20for\x20BigtableInstanceAdmin.Dele\
    teAppProfile.\n\n\x0b\n\x03\x04\x14\x01\x12\x04\xc2\x03\x08\x1f\n\x9f\
    \x01\n\x04\x04\x14\x02\0\x12\x04\xc5\x03\x02\x12\x1a\x90\x01\x20The\x20u\
    nique\x20name\x20of\x20the\x20app\x20profile\x20to\x20be\x20deleted.\x20\
    Values\x20are\x20of\x20the\x20form\n\x20`projects/<project>/instances/<i\
    nstance>/appProfiles/<app_profile>`.\n\n\x0f\n\x05\x04\x14\x02\0\x04\x12\
    \x06\xc5\x03\x02\xc2\x03!\n\r\n\x05\x04\x14\x02\0\x05\x12\x04\xc5\x03\
    \x02\x08\n\r\n\x05\x04\x14\x02\0\x01\x12\x04\xc5\x03\t\r\n\r\n\x05\x04\
    \x14\x02\0\x03\x12\x04\xc5\x03\x10\x11\nL\n\x04\x04\x14\x02\x01\x12\x04\
    \xc8\x03\x02\x1b\x1a>\x20If\x20true,\x20ignore\x20safety\x20checks\x20wh\
    en\x20deleting\x20the\x20app\x20profile.\n\n\x0f\n\x05\x04\x14\x02\x01\
    \x04\x12\x06\xc8\x03\x02\xc5\x03\x12\n\r\n\x05\x04\x14\x02\x01\x05\x12\
    \x04\xc8\x03\x02\x06\n\r\n\x05\x04\x14\x02\x01\x01\x12\x04\xc8\x03\x07\
    \x16\n\r\n\x05\x04\x14\x02\x01\x03\x12\x04\xc8\x03\x19\x1a\nJ\n\x02\x04\
    \x15\x12\x04\xcc\x03\0#\x1a>\x20The\x20metadata\x20for\x20the\x20Operati\
    on\x20returned\x20by\x20UpdateAppProfile.\n\n\x0b\n\x03\x04\x15\x01\x12\
    \x04\xcc\x03\x08\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
