// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/bigtable/admin/table/v1/bigtable_table_data.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct Table {
    // message fields
    pub name: ::std::string::String,
    pub current_operation: ::protobuf::SingularPtrField<super::operations::Operation>,
    pub column_families: ::std::collections::HashMap<::std::string::String, ColumnFamily>,
    pub granularity: Table_TimestampGranularity,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Table {
    fn default() -> &'a Table {
        <Table as ::protobuf::Message>::default_instance()
    }
}

impl Table {
    pub fn new() -> Table {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.longrunning.Operation current_operation = 2;


    pub fn get_current_operation(&self) -> &super::operations::Operation {
        self.current_operation.as_ref().unwrap_or_else(|| <super::operations::Operation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_current_operation(&mut self) {
        self.current_operation.clear();
    }

    pub fn has_current_operation(&self) -> bool {
        self.current_operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_operation(&mut self, v: super::operations::Operation) {
        self.current_operation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current_operation(&mut self) -> &mut super::operations::Operation {
        if self.current_operation.is_none() {
            self.current_operation.set_default();
        }
        self.current_operation.as_mut().unwrap()
    }

    // Take field
    pub fn take_current_operation(&mut self) -> super::operations::Operation {
        self.current_operation.take().unwrap_or_else(|| super::operations::Operation::new())
    }

    // repeated .google.bigtable.admin.table.v1.Table.ColumnFamiliesEntry column_families = 3;


    pub fn get_column_families(&self) -> &::std::collections::HashMap<::std::string::String, ColumnFamily> {
        &self.column_families
    }
    pub fn clear_column_families(&mut self) {
        self.column_families.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_families(&mut self, v: ::std::collections::HashMap<::std::string::String, ColumnFamily>) {
        self.column_families = v;
    }

    // Mutable pointer to the field.
    pub fn mut_column_families(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ColumnFamily> {
        &mut self.column_families
    }

    // Take field
    pub fn take_column_families(&mut self) -> ::std::collections::HashMap<::std::string::String, ColumnFamily> {
        ::std::mem::replace(&mut self.column_families, ::std::collections::HashMap::new())
    }

    // .google.bigtable.admin.table.v1.Table.TimestampGranularity granularity = 4;


    pub fn get_granularity(&self) -> Table_TimestampGranularity {
        self.granularity
    }
    pub fn clear_granularity(&mut self) {
        self.granularity = Table_TimestampGranularity::MILLIS;
    }

    // Param is passed by value, moved
    pub fn set_granularity(&mut self, v: Table_TimestampGranularity) {
        self.granularity = v;
    }
}

impl ::protobuf::Message for Table {
    fn is_initialized(&self) -> bool {
        for v in &self.current_operation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.current_operation)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ColumnFamily>>(wire_type, is, &mut self.column_families)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.granularity, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.current_operation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ColumnFamily>>(3, &self.column_families);
        if self.granularity != Table_TimestampGranularity::MILLIS {
            my_size += ::protobuf::rt::enum_size(4, self.granularity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.current_operation.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ColumnFamily>>(3, &self.column_families, os)?;
        if self.granularity != Table_TimestampGranularity::MILLIS {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.granularity))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Table {
        Table::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Table| { &m.name },
                |m: &mut Table| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::operations::Operation>>(
                "current_operation",
                |m: &Table| { &m.current_operation },
                |m: &mut Table| { &mut m.current_operation },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ColumnFamily>>(
                "column_families",
                |m: &Table| { &m.column_families },
                |m: &mut Table| { &mut m.column_families },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Table_TimestampGranularity>>(
                "granularity",
                |m: &Table| { &m.granularity },
                |m: &mut Table| { &mut m.granularity },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Table>(
                "Table",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Table {
        static instance: ::protobuf::rt::LazyV2<Table> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Table::new)
    }
}

impl ::protobuf::Clear for Table {
    fn clear(&mut self) {
        self.name.clear();
        self.current_operation.clear();
        self.column_families.clear();
        self.granularity = Table_TimestampGranularity::MILLIS;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Table {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Table {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Table_TimestampGranularity {
    MILLIS = 0,
}

impl ::protobuf::ProtobufEnum for Table_TimestampGranularity {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Table_TimestampGranularity> {
        match value {
            0 => ::std::option::Option::Some(Table_TimestampGranularity::MILLIS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Table_TimestampGranularity] = &[
            Table_TimestampGranularity::MILLIS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Table_TimestampGranularity>("Table.TimestampGranularity", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Table_TimestampGranularity {
}

impl ::std::default::Default for Table_TimestampGranularity {
    fn default() -> Self {
        Table_TimestampGranularity::MILLIS
    }
}

impl ::protobuf::reflect::ProtobufValue for Table_TimestampGranularity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ColumnFamily {
    // message fields
    pub name: ::std::string::String,
    pub gc_expression: ::std::string::String,
    pub gc_rule: ::protobuf::SingularPtrField<GcRule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ColumnFamily {
    fn default() -> &'a ColumnFamily {
        <ColumnFamily as ::protobuf::Message>::default_instance()
    }
}

impl ColumnFamily {
    pub fn new() -> ColumnFamily {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string gc_expression = 2;


    pub fn get_gc_expression(&self) -> &str {
        &self.gc_expression
    }
    pub fn clear_gc_expression(&mut self) {
        self.gc_expression.clear();
    }

    // Param is passed by value, moved
    pub fn set_gc_expression(&mut self, v: ::std::string::String) {
        self.gc_expression = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gc_expression(&mut self) -> &mut ::std::string::String {
        &mut self.gc_expression
    }

    // Take field
    pub fn take_gc_expression(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gc_expression, ::std::string::String::new())
    }

    // .google.bigtable.admin.table.v1.GcRule gc_rule = 3;


    pub fn get_gc_rule(&self) -> &GcRule {
        self.gc_rule.as_ref().unwrap_or_else(|| <GcRule as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gc_rule(&mut self) {
        self.gc_rule.clear();
    }

    pub fn has_gc_rule(&self) -> bool {
        self.gc_rule.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gc_rule(&mut self, v: GcRule) {
        self.gc_rule = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gc_rule(&mut self) -> &mut GcRule {
        if self.gc_rule.is_none() {
            self.gc_rule.set_default();
        }
        self.gc_rule.as_mut().unwrap()
    }

    // Take field
    pub fn take_gc_rule(&mut self) -> GcRule {
        self.gc_rule.take().unwrap_or_else(|| GcRule::new())
    }
}

impl ::protobuf::Message for ColumnFamily {
    fn is_initialized(&self) -> bool {
        for v in &self.gc_rule {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gc_expression)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gc_rule)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.gc_expression.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.gc_expression);
        }
        if let Some(ref v) = self.gc_rule.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.gc_expression.is_empty() {
            os.write_string(2, &self.gc_expression)?;
        }
        if let Some(ref v) = self.gc_rule.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ColumnFamily {
        ColumnFamily::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ColumnFamily| { &m.name },
                |m: &mut ColumnFamily| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gc_expression",
                |m: &ColumnFamily| { &m.gc_expression },
                |m: &mut ColumnFamily| { &mut m.gc_expression },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GcRule>>(
                "gc_rule",
                |m: &ColumnFamily| { &m.gc_rule },
                |m: &mut ColumnFamily| { &mut m.gc_rule },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ColumnFamily>(
                "ColumnFamily",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ColumnFamily {
        static instance: ::protobuf::rt::LazyV2<ColumnFamily> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ColumnFamily::new)
    }
}

impl ::protobuf::Clear for ColumnFamily {
    fn clear(&mut self) {
        self.name.clear();
        self.gc_expression.clear();
        self.gc_rule.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ColumnFamily {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ColumnFamily {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GcRule {
    // message oneof groups
    pub rule: ::std::option::Option<GcRule_oneof_rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GcRule {
    fn default() -> &'a GcRule {
        <GcRule as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GcRule_oneof_rule {
    max_num_versions(i32),
    max_age(::protobuf::well_known_types::Duration),
    intersection(GcRule_Intersection),
    union(GcRule_Union),
}

impl GcRule {
    pub fn new() -> GcRule {
        ::std::default::Default::default()
    }

    // int32 max_num_versions = 1;


    pub fn get_max_num_versions(&self) -> i32 {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::max_num_versions(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_max_num_versions(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_max_num_versions(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::max_num_versions(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_max_num_versions(&mut self, v: i32) {
        self.rule = ::std::option::Option::Some(GcRule_oneof_rule::max_num_versions(v))
    }

    // .google.protobuf.Duration max_age = 2;


    pub fn get_max_age(&self) -> &::protobuf::well_known_types::Duration {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::max_age(ref v)) => v,
            _ => <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_max_age(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_max_age(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::max_age(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_max_age(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.rule = ::std::option::Option::Some(GcRule_oneof_rule::max_age(v))
    }

    // Mutable pointer to the field.
    pub fn mut_max_age(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if let ::std::option::Option::Some(GcRule_oneof_rule::max_age(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(GcRule_oneof_rule::max_age(::protobuf::well_known_types::Duration::new()));
        }
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::max_age(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_max_age(&mut self) -> ::protobuf::well_known_types::Duration {
        if self.has_max_age() {
            match self.rule.take() {
                ::std::option::Option::Some(GcRule_oneof_rule::max_age(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Duration::new()
        }
    }

    // .google.bigtable.admin.table.v1.GcRule.Intersection intersection = 3;


    pub fn get_intersection(&self) -> &GcRule_Intersection {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::intersection(ref v)) => v,
            _ => <GcRule_Intersection as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_intersection(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_intersection(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::intersection(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_intersection(&mut self, v: GcRule_Intersection) {
        self.rule = ::std::option::Option::Some(GcRule_oneof_rule::intersection(v))
    }

    // Mutable pointer to the field.
    pub fn mut_intersection(&mut self) -> &mut GcRule_Intersection {
        if let ::std::option::Option::Some(GcRule_oneof_rule::intersection(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(GcRule_oneof_rule::intersection(GcRule_Intersection::new()));
        }
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::intersection(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_intersection(&mut self) -> GcRule_Intersection {
        if self.has_intersection() {
            match self.rule.take() {
                ::std::option::Option::Some(GcRule_oneof_rule::intersection(v)) => v,
                _ => panic!(),
            }
        } else {
            GcRule_Intersection::new()
        }
    }

    // .google.bigtable.admin.table.v1.GcRule.Union union = 4;


    pub fn get_union(&self) -> &GcRule_Union {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::union(ref v)) => v,
            _ => <GcRule_Union as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_union(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_union(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::union(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_union(&mut self, v: GcRule_Union) {
        self.rule = ::std::option::Option::Some(GcRule_oneof_rule::union(v))
    }

    // Mutable pointer to the field.
    pub fn mut_union(&mut self) -> &mut GcRule_Union {
        if let ::std::option::Option::Some(GcRule_oneof_rule::union(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(GcRule_oneof_rule::union(GcRule_Union::new()));
        }
        match self.rule {
            ::std::option::Option::Some(GcRule_oneof_rule::union(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_union(&mut self) -> GcRule_Union {
        if self.has_union() {
            match self.rule.take() {
                ::std::option::Option::Some(GcRule_oneof_rule::union(v)) => v,
                _ => panic!(),
            }
        } else {
            GcRule_Union::new()
        }
    }
}

impl ::protobuf::Message for GcRule {
    fn is_initialized(&self) -> bool {
        if let Some(GcRule_oneof_rule::max_age(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GcRule_oneof_rule::intersection(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GcRule_oneof_rule::union(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(GcRule_oneof_rule::max_num_versions(is.read_int32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(GcRule_oneof_rule::max_age(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(GcRule_oneof_rule::intersection(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(GcRule_oneof_rule::union(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &GcRule_oneof_rule::max_num_versions(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &GcRule_oneof_rule::max_age(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GcRule_oneof_rule::intersection(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GcRule_oneof_rule::union(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &GcRule_oneof_rule::max_num_versions(v) => {
                    os.write_int32(1, v)?;
                },
                &GcRule_oneof_rule::max_age(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GcRule_oneof_rule::intersection(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GcRule_oneof_rule::union(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GcRule {
        GcRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "max_num_versions",
                GcRule::has_max_num_versions,
                GcRule::get_max_num_versions,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Duration>(
                "max_age",
                GcRule::has_max_age,
                GcRule::get_max_age,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GcRule_Intersection>(
                "intersection",
                GcRule::has_intersection,
                GcRule::get_intersection,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GcRule_Union>(
                "union",
                GcRule::has_union,
                GcRule::get_union,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GcRule>(
                "GcRule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GcRule {
        static instance: ::protobuf::rt::LazyV2<GcRule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GcRule::new)
    }
}

impl ::protobuf::Clear for GcRule {
    fn clear(&mut self) {
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GcRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GcRule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GcRule_Intersection {
    // message fields
    pub rules: ::protobuf::RepeatedField<GcRule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GcRule_Intersection {
    fn default() -> &'a GcRule_Intersection {
        <GcRule_Intersection as ::protobuf::Message>::default_instance()
    }
}

impl GcRule_Intersection {
    pub fn new() -> GcRule_Intersection {
        ::std::default::Default::default()
    }

    // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;


    pub fn get_rules(&self) -> &[GcRule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<GcRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<GcRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<GcRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GcRule_Intersection {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GcRule_Intersection {
        GcRule_Intersection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GcRule>>(
                "rules",
                |m: &GcRule_Intersection| { &m.rules },
                |m: &mut GcRule_Intersection| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GcRule_Intersection>(
                "GcRule.Intersection",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GcRule_Intersection {
        static instance: ::protobuf::rt::LazyV2<GcRule_Intersection> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GcRule_Intersection::new)
    }
}

impl ::protobuf::Clear for GcRule_Intersection {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GcRule_Intersection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GcRule_Intersection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GcRule_Union {
    // message fields
    pub rules: ::protobuf::RepeatedField<GcRule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GcRule_Union {
    fn default() -> &'a GcRule_Union {
        <GcRule_Union as ::protobuf::Message>::default_instance()
    }
}

impl GcRule_Union {
    pub fn new() -> GcRule_Union {
        ::std::default::Default::default()
    }

    // repeated .google.bigtable.admin.table.v1.GcRule rules = 1;


    pub fn get_rules(&self) -> &[GcRule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<GcRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<GcRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<GcRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GcRule_Union {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GcRule_Union {
        GcRule_Union::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GcRule>>(
                "rules",
                |m: &GcRule_Union| { &m.rules },
                |m: &mut GcRule_Union| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GcRule_Union>(
                "GcRule.Union",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GcRule_Union {
        static instance: ::protobuf::rt::LazyV2<GcRule_Union> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GcRule_Union::new)
    }
}

impl ::protobuf::Clear for GcRule_Union {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GcRule_Union {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GcRule_Union {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n8google/bigtable/admin/table/v1/bigtable_table_data.proto\x12\x1egoogl\
    e.bigtable.admin.table.v1\x1a#google/longrunning/operations.proto\x1a\
    \x1egoogle/protobuf/duration.proto\"\xbe\x03\n\x05Table\x12\x12\n\x04nam\
    e\x18\x01\x20\x01(\tR\x04name\x12J\n\x11current_operation\x18\x02\x20\
    \x01(\x0b2\x1d.google.longrunning.OperationR\x10currentOperation\x12b\n\
    \x0fcolumn_families\x18\x03\x20\x03(\x0b29.google.bigtable.admin.table.v\
    1.Table.ColumnFamiliesEntryR\x0ecolumnFamilies\x12\\\n\x0bgranularity\
    \x18\x04\x20\x01(\x0e2:.google.bigtable.admin.table.v1.Table.TimestampGr\
    anularityR\x0bgranularity\x1ao\n\x13ColumnFamiliesEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12B\n\x05value\x18\x02\x20\x01(\x0b2,.googl\
    e.bigtable.admin.table.v1.ColumnFamilyR\x05value:\x028\x01\"\"\n\x14Time\
    stampGranularity\x12\n\n\x06MILLIS\x10\0\"\x88\x01\n\x0cColumnFamily\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12#\n\rgc_expression\x18\x02\
    \x20\x01(\tR\x0cgcExpression\x12?\n\x07gc_rule\x18\x03\x20\x01(\x0b2&.go\
    ogle.bigtable.admin.table.v1.GcRuleR\x06gcRule\"\xa8\x03\n\x06GcRule\x12\
    *\n\x10max_num_versions\x18\x01\x20\x01(\x05H\0R\x0emaxNumVersions\x124\
    \n\x07max_age\x18\x02\x20\x01(\x0b2\x19.google.protobuf.DurationH\0R\x06\
    maxAge\x12Y\n\x0cintersection\x18\x03\x20\x01(\x0b23.google.bigtable.adm\
    in.table.v1.GcRule.IntersectionH\0R\x0cintersection\x12D\n\x05union\x18\
    \x04\x20\x01(\x0b2,.google.bigtable.admin.table.v1.GcRule.UnionH\0R\x05u\
    nion\x1aL\n\x0cIntersection\x12<\n\x05rules\x18\x01\x20\x03(\x0b2&.googl\
    e.bigtable.admin.table.v1.GcRuleR\x05rules\x1aE\n\x05Union\x12<\n\x05rul\
    es\x18\x01\x20\x03(\x0b2&.google.bigtable.admin.table.v1.GcRuleR\x05rule\
    sB\x06\n\x04ruleB\x83\x01\n\"com.google.bigtable.admin.table.v1B\x16Bigt\
    ableTableDataProtoP\x01ZCgoogle.golang.org/genproto/googleapis/bigtable/\
    admin/table/v1;tableJ\xff%\n\x06\x12\x04\x0e\0z\x01\n\xbd\x04\n\x01\x0c\
    \x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202017\x20Google\x20Inc.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\x08\n\x01\x02\x12\x03\x10\0'\n\t\n\x02\x03\0\x12\x03\x12\0-\n\t\
    \n\x02\x03\x01\x12\x03\x13\0(\n\x08\n\x01\x08\x12\x03\x15\0Z\n\t\n\x02\
    \x08\x0b\x12\x03\x15\0Z\n\x08\n\x01\x08\x12\x03\x16\0\"\n\t\n\x02\x08\n\
    \x12\x03\x16\0\"\n\x08\n\x01\x08\x12\x03\x17\07\n\t\n\x02\x08\x08\x12\
    \x03\x17\07\n\x08\n\x01\x08\x12\x03\x18\0;\n\t\n\x02\x08\x01\x12\x03\x18\
    \0;\n\x90\x01\n\x02\x04\0\x12\x04\x1c\0/\x01\x1a\x83\x01\x20A\x20collect\
    ion\x20of\x20user\x20data\x20indexed\x20by\x20row,\x20column,\x20and\x20\
    timestamp.\n\x20Each\x20table\x20is\x20served\x20using\x20the\x20resourc\
    es\x20of\x20its\x20parent\x20cluster.\n\n\n\n\x03\x04\0\x01\x12\x03\x1c\
    \x08\r\n\x0b\n\x04\x04\0\x04\0\x12\x03\x1d\x02+\n\x0c\n\x05\x04\0\x04\0\
    \x01\x12\x03\x1d\x07\x1b\n\r\n\x06\x04\0\x04\0\x02\0\x12\x03\x1d\x1e)\n\
    \x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x1d\x1e$\n\x0e\n\x07\x04\0\x04\
    \0\x02\0\x02\x12\x03\x1d'(\na\n\x04\x04\0\x02\0\x12\x03!\x02\x12\x1aT\
    \x20A\x20unique\x20identifier\x20of\x20the\x20form\n\x20<cluster_name>/t\
    ables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04!\
    \x02\x1d+\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03!\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03!\x10\x11\n\
    \xd5\x01\n\x04\x04\0\x02\x01\x12\x03&\x025\x1a\xc7\x01\x20If\x20this\x20\
    Table\x20is\x20in\x20the\x20process\x20of\x20being\x20created,\x20the\
    \x20Operation\x20used\x20to\n\x20track\x20its\x20progress.\x20As\x20long\
    \x20as\x20this\x20operation\x20is\x20present,\x20the\x20Table\x20will\n\
    \x20not\x20accept\x20any\x20Table\x20Admin\x20or\x20Read/Write\x20reques\
    ts.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04&\x02!\x12\n\x0c\n\x05\x04\0\
    \x02\x01\x06\x12\x03&\x02\x1e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03&\x1f\
    0\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03&34\nY\n\x04\x04\0\x02\x02\x12\
    \x03)\x020\x1aL\x20The\x20column\x20families\x20configured\x20for\x20thi\
    s\x20table,\x20mapped\x20by\x20column\x20family\x20id.\n\n\r\n\x05\x04\0\
    \x02\x02\x04\x12\x04)\x02&5\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03)\x02\
    \x1b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03)\x1c+\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03)./\n\xcc\x01\n\x04\x04\0\x02\x03\x12\x03.\x02'\x1a\xbe\
    \x01\x20The\x20granularity\x20(e.g.\x20MILLIS,\x20MICROS)\x20at\x20which\
    \x20timestamps\x20are\x20stored\x20in\n\x20this\x20table.\x20Timestamps\
    \x20not\x20matching\x20the\x20granularity\x20will\x20be\x20rejected.\n\
    \x20Cannot\x20be\x20changed\x20once\x20the\x20table\x20is\x20created.\n\
    \n\r\n\x05\x04\0\x02\x03\x04\x12\x04.\x02)0\n\x0c\n\x05\x04\0\x02\x03\
    \x06\x12\x03.\x02\x16\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03.\x17\"\n\x0c\
    \n\x05\x04\0\x02\x03\x03\x12\x03.%&\nQ\n\x02\x04\x01\x12\x042\0[\x01\x1a\
    E\x20A\x20set\x20of\x20columns\x20within\x20a\x20table\x20which\x20share\
    \x20a\x20common\x20configuration.\n\n\n\n\x03\x04\x01\x01\x12\x032\x08\
    \x14\n\xac\x01\n\x04\x04\x01\x02\0\x12\x036\x02\x12\x1a\x9e\x01\x20A\x20\
    unique\x20identifier\x20of\x20the\x20form\x20<table_name>/columnFamilies\
    /[-_.a-zA-Z0-9]+\n\x20The\x20last\x20segment\x20is\x20the\x20same\x20as\
    \x20the\x20\"name\"\x20field\x20in\n\x20google.bigtable.v1.Family.\n\n\r\
    \n\x05\x04\x01\x02\0\x04\x12\x046\x022\x16\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x036\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x036\t\r\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x036\x10\x11\n\x97\t\n\x04\x04\x01\x02\x01\x12\
    \x03Q\x02\x1b\x1a\x89\t\x20Garbage\x20collection\x20expression\x20specif\
    ied\x20by\x20the\x20following\x20grammar:\n\x20\x20\x20GC\x20=\x20EXPR\n\
    \x20\x20\x20\x20\x20\x20|\x20\"\"\x20;\n\x20\x20\x20EXPR\x20=\x20EXPR,\
    \x20\"||\",\x20EXPR\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20(*\x20lowest\x20precedence\x20*)\n\x20\x20\x20\x20\x20\x20\x20\x20|\
    \x20EXPR,\x20\"&&\",\x20EXPR\n\x20\x20\x20\x20\x20\x20\x20\x20|\x20\"(\"\
    ,\x20EXPR,\x20\")\"\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20(*\x20highest\x20precedence\x20*)\n\x20\x20\x20\x20\x20\x20\
    \x20\x20|\x20PROP\x20;\n\x20\x20\x20PROP\x20=\x20\"version()\x20>\",\x20\
    NUM32\n\x20\x20\x20\x20\x20\x20\x20\x20|\x20\"age()\x20>\",\x20NUM64,\
    \x20[\x20UNIT\x20]\x20;\n\x20\x20\x20NUM32\x20=\x20non-zero-digit\x20{\
    \x20digit\x20}\x20;\x20\x20\x20\x20(*\x20#\x20NUM32\x20<=\x202^32\x20-\
    \x201\x20*)\n\x20\x20\x20NUM64\x20=\x20non-zero-digit\x20{\x20digit\x20}\
    \x20;\x20\x20\x20\x20(*\x20#\x20NUM64\x20<=\x202^63\x20-\x201\x20*)\n\
    \x20\x20\x20UNIT\x20=\x20\x20\"d\"\x20|\x20\"h\"\x20|\x20\"m\"\x20\x20(*\
    \x20d=days,\x20h=hours,\x20m=minutes,\x20else\x20micros\x20*)\n\x20GC\
    \x20expressions\x20can\x20be\x20up\x20to\x20500\x20characters\x20in\x20l\
    ength\n\n\x20The\x20different\x20types\x20of\x20PROP\x20are\x20defined\
    \x20as\x20follows:\n\x20\x20\x20version()\x20-\x20cell\x20index,\x20coun\
    ting\x20from\x20most\x20recent\x20and\x20starting\x20at\x201\n\x20\x20\
    \x20age()\x20-\x20age\x20of\x20the\x20cell\x20(current\x20time\x20minus\
    \x20cell\x20timestamp)\n\n\x20Example:\x20\"version()\x20>\x203\x20||\
    \x20(age()\x20>\x203d\x20&&\x20version()\x20>\x201)\"\n\x20\x20\x20drop\
    \x20cells\x20beyond\x20the\x20most\x20recent\x20three,\x20and\x20drop\
    \x20cells\x20older\x20than\x20three\n\x20\x20\x20days\x20unless\x20they'\
    re\x20the\x20most\x20recent\x20cell\x20in\x20the\x20row/column\n\n\x20Ga\
    rbage\x20collection\x20executes\x20opportunistically\x20in\x20the\x20bac\
    kground,\x20and\x20so\n\x20it's\x20possible\x20for\x20reads\x20to\x20ret\
    urn\x20a\x20cell\x20even\x20if\x20it\x20matches\x20the\x20active\x20GC\n\
    \x20expression\x20for\x20its\x20family.\n\n\r\n\x05\x04\x01\x02\x01\x04\
    \x12\x04Q\x026\x12\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03Q\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03Q\t\x16\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03Q\x19\x1a\n\xba\x02\n\x04\x04\x01\x02\x02\x12\x03Z\x02\
    \x15\x1a\xac\x02\x20Garbage\x20collection\x20rule\x20specified\x20as\x20\
    a\x20protobuf.\n\x20Supersedes\x20`gc_expression`.\n\x20Must\x20serializ\
    e\x20to\x20at\x20most\x20500\x20bytes.\n\n\x20NOTE:\x20Garbage\x20collec\
    tion\x20executes\x20opportunistically\x20in\x20the\x20background,\x20and\
    \n\x20so\x20it's\x20possible\x20for\x20reads\x20to\x20return\x20a\x20cel\
    l\x20even\x20if\x20it\x20matches\x20the\x20active\n\x20GC\x20expression\
    \x20for\x20its\x20family.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04Z\x02Q\
    \x1b\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03Z\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03Z\t\x10\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03Z\
    \x13\x14\nS\n\x02\x04\x02\x12\x04^\0z\x01\x1aG\x20Rule\x20for\x20determi\
    ning\x20which\x20cells\x20to\x20delete\x20during\x20garbage\x20collectio\
    n.\n\n\n\n\x03\x04\x02\x01\x12\x03^\x08\x0e\nM\n\x04\x04\x02\x03\0\x12\
    \x04`\x02c\x03\x1a?\x20A\x20GcRule\x20which\x20deletes\x20cells\x20match\
    ing\x20all\x20of\x20the\x20given\x20rules.\n\n\x0c\n\x05\x04\x02\x03\0\
    \x01\x12\x03`\n\x16\nV\n\x06\x04\x02\x03\0\x02\0\x12\x03b\x04\x1e\x1aG\
    \x20Only\x20delete\x20cells\x20which\x20would\x20be\x20deleted\x20by\x20\
    every\x20element\x20of\x20`rules`.\n\n\x0e\n\x07\x04\x02\x03\0\x02\0\x04\
    \x12\x03b\x04\x0c\n\x0e\n\x07\x04\x02\x03\0\x02\0\x06\x12\x03b\r\x13\n\
    \x0e\n\x07\x04\x02\x03\0\x02\0\x01\x12\x03b\x14\x19\n\x0e\n\x07\x04\x02\
    \x03\0\x02\0\x03\x12\x03b\x1c\x1d\nM\n\x04\x04\x02\x03\x01\x12\x04f\x02i\
    \x03\x1a?\x20A\x20GcRule\x20which\x20deletes\x20cells\x20matching\x20any\
    \x20of\x20the\x20given\x20rules.\n\n\x0c\n\x05\x04\x02\x03\x01\x01\x12\
    \x03f\n\x0f\nO\n\x06\x04\x02\x03\x01\x02\0\x12\x03h\x04\x1e\x1a@\x20Dele\
    te\x20cells\x20which\x20would\x20be\x20deleted\x20by\x20any\x20element\
    \x20of\x20`rules`.\n\n\x0e\n\x07\x04\x02\x03\x01\x02\0\x04\x12\x03h\x04\
    \x0c\n\x0e\n\x07\x04\x02\x03\x01\x02\0\x06\x12\x03h\r\x13\n\x0e\n\x07\
    \x04\x02\x03\x01\x02\0\x01\x12\x03h\x14\x19\n\x0e\n\x07\x04\x02\x03\x01\
    \x02\0\x03\x12\x03h\x1c\x1d\n\x0c\n\x04\x04\x02\x08\0\x12\x04k\x02y\x03\
    \n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03k\x08\x0c\nE\n\x04\x04\x02\x02\0\
    \x12\x03m\x04\x1f\x1a8\x20Delete\x20all\x20cells\x20in\x20a\x20column\
    \x20except\x20the\x20most\x20recent\x20N.\n\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03m\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03m\n\x1a\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03m\x1d\x1e\n\x9f\x01\n\x04\x04\x02\x02\x01\
    \x12\x03r\x04)\x1a\x91\x01\x20Delete\x20cells\x20in\x20a\x20column\x20ol\
    der\x20than\x20the\x20given\x20age.\n\x20Values\x20must\x20be\x20at\x20l\
    east\x20one\x20millisecond,\x20and\x20will\x20be\x20truncated\x20to\n\
    \x20microsecond\x20granularity.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\
    \x03r\x04\x1c\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03r\x1d$\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03r'(\nG\n\x04\x04\x02\x02\x02\x12\x03u\x04\"\
    \x1a:\x20Delete\x20cells\x20that\x20would\x20be\x20deleted\x20by\x20ever\
    y\x20nested\x20rule.\n\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03u\x04\x10\
    \n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03u\x11\x1d\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03u\x20!\nE\n\x04\x04\x02\x02\x03\x12\x03x\x04\x14\x1a\
    8\x20Delete\x20cells\x20that\x20would\x20be\x20deleted\x20by\x20any\x20n\
    ested\x20rule.\n\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03x\x04\t\n\x0c\n\
    \x05\x04\x02\x02\x03\x01\x12\x03x\n\x0f\n\x0c\n\x05\x04\x02\x02\x03\x03\
    \x12\x03x\x12\x13b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
