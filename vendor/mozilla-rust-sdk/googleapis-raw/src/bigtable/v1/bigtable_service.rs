// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/bigtable/v1/bigtable_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)google/bigtable/v1/bigtable_service.proto\x12\x12google.bigtable.v1\
    \x1a\x1cgoogle/api/annotations.proto\x1a&google/bigtable/v1/bigtable_dat\
    a.proto\x1a2google/bigtable/v1/bigtable_service_messages.proto\x1a\x1bgo\
    ogle/protobuf/empty.proto2\xdd\x08\n\x0fBigtableService\x12\xa5\x01\n\
    \x08ReadRows\x12#.google.bigtable.v1.ReadRowsRequest\x1a$.google.bigtabl\
    e.v1.ReadRowsResponse\"L\x82\xd3\xe4\x93\x02F\"A/v1/{table_name=projects\
    /*/zones/*/clusters/*/tables/*}/rows:read:\x01*0\x01\x12\xb7\x01\n\rSamp\
    leRowKeys\x12(.google.bigtable.v1.SampleRowKeysRequest\x1a).google.bigta\
    ble.v1.SampleRowKeysResponse\"O\x82\xd3\xe4\x93\x02I\x12G/v1/{table_name\
    =projects/*/zones/*/clusters/*/tables/*}/rows:sampleKeys0\x01\x12\xa3\
    \x01\n\tMutateRow\x12$.google.bigtable.v1.MutateRowRequest\x1a\x16.googl\
    e.protobuf.Empty\"X\x82\xd3\xe4\x93\x02R\"M/v1/{table_name=projects/*/zo\
    nes/*/clusters/*/tables/*}/rows/{row_key}:mutate:\x01*\x12\xaa\x01\n\nMu\
    tateRows\x12%.google.bigtable.v1.MutateRowsRequest\x1a&.google.bigtable.\
    v1.MutateRowsResponse\"M\x82\xd3\xe4\x93\x02G\"B/v1/{table_name=projects\
    /*/zones/*/clusters/*/tables/*}:mutateRows:\x01*\x12\xd2\x01\n\x11CheckA\
    ndMutateRow\x12,.google.bigtable.v1.CheckAndMutateRowRequest\x1a-.google\
    .bigtable.v1.CheckAndMutateRowResponse\"`\x82\xd3\xe4\x93\x02Z\"U/v1/{ta\
    ble_name=projects/*/zones/*/clusters/*/tables/*}/rows/{row_key}:checkAnd\
    Mutate:\x01*\x12\xbf\x01\n\x12ReadModifyWriteRow\x12-.google.bigtable.v1\
    .ReadModifyWriteRowRequest\x1a\x17.google.bigtable.v1.Row\"a\x82\xd3\xe4\
    \x93\x02[\"V/v1/{table_name=projects/*/zones/*/clusters/*/tables/*}/rows\
    /{row_key}:readModifyWrite:\x01*Bp\n\x16com.google.bigtable.v1B\x15Bigta\
    bleServicesProtoP\x01Z:google.golang.org/genproto/googleapis/bigtable/v1\
    ;bigtable\x88\x01\x01J\xb1\x13\n\x06\x12\x04\x0e\0[\x01\n\xbd\x04\n\x01\
    \x0c\x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202018\x20Google\x20Inc.\n\
    \n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\
    \x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\
    \x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x1b\n\t\n\x02\x03\0\x12\
    \x03\x12\0&\n\t\n\x02\x03\x01\x12\x03\x13\00\n\t\n\x02\x03\x02\x12\x03\
    \x14\0<\n\t\n\x02\x03\x03\x12\x03\x15\0%\n\x08\n\x01\x08\x12\x03\x17\0Q\
    \n\t\n\x02\x08\x0b\x12\x03\x17\0Q\n\x08\n\x01\x08\x12\x03\x18\0$\n\t\n\
    \x02\x08\x11\x12\x03\x18\0$\n\x08\n\x01\x08\x12\x03\x19\0\"\n\t\n\x02\
    \x08\n\x12\x03\x19\0\"\n\x08\n\x01\x08\x12\x03\x1a\06\n\t\n\x02\x08\x08\
    \x12\x03\x1a\06\n\x08\n\x01\x08\x12\x03\x1b\0/\n\t\n\x02\x08\x01\x12\x03\
    \x1b\0/\nI\n\x02\x06\0\x12\x04\x1e\0[\x01\x1a=\x20Service\x20for\x20read\
    ing\x20from\x20and\x20writing\x20to\x20existing\x20Bigtables.\n\n\n\n\
    \x03\x06\0\x01\x12\x03\x1e\x08\x17\n\xf5\x01\n\x04\x06\0\x02\0\x12\x04#\
    \x02(\x03\x1a\xe6\x01\x20Streams\x20back\x20the\x20contents\x20of\x20all\
    \x20requested\x20rows,\x20optionally\x20applying\n\x20the\x20same\x20Rea\
    der\x20filter\x20to\x20each.\x20Depending\x20on\x20their\x20size,\x20row\
    s\x20may\x20be\n\x20broken\x20up\x20across\x20multiple\x20responses,\x20\
    but\x20atomicity\x20of\x20each\x20row\x20will\x20still\n\x20be\x20preser\
    ved.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03#\x06\x0e\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03#\x0f\x1e\n\x0c\n\x05\x06\0\x02\0\x06\x12\x03#)/\n\x0c\
    \n\x05\x06\0\x02\0\x03\x12\x03#0@\n\r\n\x05\x06\0\x02\0\x04\x12\x04$\x04\
    '\x06\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04$\x04'\x06\n\xed\
    \x01\n\x04\x06\0\x02\x01\x12\x04.\x023\x03\x1a\xde\x01\x20Returns\x20a\
    \x20sample\x20of\x20row\x20keys\x20in\x20the\x20table.\x20The\x20returne\
    d\x20row\x20keys\x20will\n\x20delimit\x20contiguous\x20sections\x20of\
    \x20the\x20table\x20of\x20approximately\x20equal\x20size,\n\x20which\x20\
    can\x20be\x20used\x20to\x20break\x20up\x20the\x20data\x20for\x20distribu\
    ted\x20tasks\x20like\n\x20mapreduces.\n\n\x0c\n\x05\x06\0\x02\x01\x01\
    \x12\x03.\x06\x13\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03.\x14(\n\x0c\n\
    \x05\x06\0\x02\x01\x06\x12\x03/\x0f\x15\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x03/\x16+\n\r\n\x05\x06\0\x02\x01\x04\x12\x040\x042\x06\n\x11\n\t\
    \x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x040\x042\x06\n\x87\x01\n\x04\x06\0\
    \x02\x02\x12\x047\x02<\x03\x1ay\x20Mutates\x20a\x20row\x20atomically.\
    \x20Cells\x20already\x20present\x20in\x20the\x20row\x20are\x20left\n\x20\
    unchanged\x20unless\x20explicitly\x20changed\x20by\x20'mutation'.\n\n\
    \x0c\n\x05\x06\0\x02\x02\x01\x12\x037\x06\x0f\n\x0c\n\x05\x06\0\x02\x02\
    \x02\x12\x037\x10\x20\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x037+@\n\r\n\x05\
    \x06\0\x02\x02\x04\x12\x048\x04;\x06\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\
    \xbc\"\x12\x048\x04;\x06\n\xa0\x01\n\x04\x06\0\x02\x03\x12\x04A\x02F\x03\
    \x1a\x91\x01\x20Mutates\x20multiple\x20rows\x20in\x20a\x20batch.\x20Each\
    \x20individual\x20row\x20is\x20mutated\n\x20atomically\x20as\x20in\x20Mu\
    tateRow,\x20but\x20the\x20entire\x20batch\x20is\x20not\x20executed\n\x20\
    atomically.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03A\x06\x10\n\x0c\n\x05\
    \x06\0\x02\x03\x02\x12\x03A\x11\"\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03A\
    -?\n\r\n\x05\x06\0\x02\x03\x04\x12\x04B\x04E\x06\n\x11\n\t\x06\0\x02\x03\
    \x04\xb0\xca\xbc\"\x12\x04B\x04E\x06\nZ\n\x04\x06\0\x02\x04\x12\x04I\x02\
    O\x03\x1aL\x20Mutates\x20a\x20row\x20atomically\x20based\x20on\x20the\
    \x20output\x20of\x20a\x20predicate\x20Reader\x20filter.\n\n\x0c\n\x05\
    \x06\0\x02\x04\x01\x12\x03I\x06\x17\n\x0c\n\x05\x06\0\x02\x04\x02\x12\
    \x03I\x180\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03J\x0f(\n\r\n\x05\x06\0\
    \x02\x04\x04\x12\x04K\x04N\x06\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\
    \x12\x04K\x04N\x06\n\x9b\x02\n\x04\x06\0\x02\x05\x12\x04U\x02Z\x03\x1a\
    \x8c\x02\x20Modifies\x20a\x20row\x20atomically,\x20reading\x20the\x20lat\
    est\x20existing\x20timestamp/value\x20from\n\x20the\x20specified\x20colu\
    mns\x20and\x20writing\x20a\x20new\x20value\x20at\n\x20max(existing\x20ti\
    mestamp,\x20current\x20server\x20time)\x20based\x20on\x20pre-defined\n\
    \x20read/modify/write\x20rules.\x20Returns\x20the\x20new\x20contents\x20\
    of\x20all\x20modified\x20cells.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03U\
    \x06\x18\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03U\x192\n\x0c\n\x05\x06\0\
    \x02\x05\x03\x12\x03U=@\n\r\n\x05\x06\0\x02\x05\x04\x12\x04V\x04Y\x06\n\
    \x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x04V\x04Y\x06b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
