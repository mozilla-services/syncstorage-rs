// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/bigtable/v1/bigtable_service_messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct ReadRowsRequest {
    // message fields
    pub table_name: ::std::string::String,
    pub filter: ::protobuf::SingularPtrField<super::bigtable_data::RowFilter>,
    pub allow_row_interleaving: bool,
    pub num_rows_limit: i64,
    // message oneof groups
    pub target: ::std::option::Option<ReadRowsRequest_oneof_target>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRowsRequest {
    fn default() -> &'a ReadRowsRequest {
        <ReadRowsRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReadRowsRequest_oneof_target {
    row_key(::std::vec::Vec<u8>),
    row_range(super::bigtable_data::RowRange),
    row_set(super::bigtable_data::RowSet),
}

impl ReadRowsRequest {
    pub fn new() -> ReadRowsRequest {
        ::std::default::Default::default()
    }

    // string table_name = 1;


    pub fn get_table_name(&self) -> &str {
        &self.table_name
    }
    pub fn clear_table_name(&mut self) {
        self.table_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_table_name(&mut self, v: ::std::string::String) {
        self.table_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table_name(&mut self) -> &mut ::std::string::String {
        &mut self.table_name
    }

    // Take field
    pub fn take_table_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table_name, ::std::string::String::new())
    }

    // bytes row_key = 2;


    pub fn get_row_key(&self) -> &[u8] {
        match self.target {
            ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_key(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_row_key(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_row_key(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_row_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.target = ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_row_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_key(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_key(::std::vec::Vec::new()));
        }
        match self.target {
            ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_row_key(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_row_key() {
            match self.target.take() {
                ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_key(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .google.bigtable.v1.RowRange row_range = 3;


    pub fn get_row_range(&self) -> &super::bigtable_data::RowRange {
        match self.target {
            ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_range(ref v)) => v,
            _ => <super::bigtable_data::RowRange as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_row_range(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_row_range(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_range(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_row_range(&mut self, v: super::bigtable_data::RowRange) {
        self.target = ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_range(v))
    }

    // Mutable pointer to the field.
    pub fn mut_row_range(&mut self) -> &mut super::bigtable_data::RowRange {
        if let ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_range(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_range(super::bigtable_data::RowRange::new()));
        }
        match self.target {
            ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_range(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_row_range(&mut self) -> super::bigtable_data::RowRange {
        if self.has_row_range() {
            match self.target.take() {
                ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_range(v)) => v,
                _ => panic!(),
            }
        } else {
            super::bigtable_data::RowRange::new()
        }
    }

    // .google.bigtable.v1.RowSet row_set = 8;


    pub fn get_row_set(&self) -> &super::bigtable_data::RowSet {
        match self.target {
            ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_set(ref v)) => v,
            _ => <super::bigtable_data::RowSet as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_row_set(&mut self) {
        self.target = ::std::option::Option::None;
    }

    pub fn has_row_set(&self) -> bool {
        match self.target {
            ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_set(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_row_set(&mut self, v: super::bigtable_data::RowSet) {
        self.target = ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_set(v))
    }

    // Mutable pointer to the field.
    pub fn mut_row_set(&mut self) -> &mut super::bigtable_data::RowSet {
        if let ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_set(_)) = self.target {
        } else {
            self.target = ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_set(super::bigtable_data::RowSet::new()));
        }
        match self.target {
            ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_set(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_row_set(&mut self) -> super::bigtable_data::RowSet {
        if self.has_row_set() {
            match self.target.take() {
                ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_set(v)) => v,
                _ => panic!(),
            }
        } else {
            super::bigtable_data::RowSet::new()
        }
    }

    // .google.bigtable.v1.RowFilter filter = 5;


    pub fn get_filter(&self) -> &super::bigtable_data::RowFilter {
        self.filter.as_ref().unwrap_or_else(|| <super::bigtable_data::RowFilter as ::protobuf::Message>::default_instance())
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: super::bigtable_data::RowFilter) {
        self.filter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut super::bigtable_data::RowFilter {
        if self.filter.is_none() {
            self.filter.set_default();
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> super::bigtable_data::RowFilter {
        self.filter.take().unwrap_or_else(|| super::bigtable_data::RowFilter::new())
    }

    // bool allow_row_interleaving = 6;


    pub fn get_allow_row_interleaving(&self) -> bool {
        self.allow_row_interleaving
    }
    pub fn clear_allow_row_interleaving(&mut self) {
        self.allow_row_interleaving = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_row_interleaving(&mut self, v: bool) {
        self.allow_row_interleaving = v;
    }

    // int64 num_rows_limit = 7;


    pub fn get_num_rows_limit(&self) -> i64 {
        self.num_rows_limit
    }
    pub fn clear_num_rows_limit(&mut self) {
        self.num_rows_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_rows_limit(&mut self, v: i64) {
        self.num_rows_limit = v;
    }
}

impl ::protobuf::Message for ReadRowsRequest {
    fn is_initialized(&self) -> bool {
        if let Some(ReadRowsRequest_oneof_target::row_range(ref v)) = self.target {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReadRowsRequest_oneof_target::row_set(ref v)) = self.target {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.filter {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.target = ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_key(is.read_bytes()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.target = ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_range(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.target = ::std::option::Option::Some(ReadRowsRequest_oneof_target::row_set(is.read_message()?));
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_row_interleaving = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.num_rows_limit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        if let Some(ref v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.allow_row_interleaving != false {
            my_size += 2;
        }
        if self.num_rows_limit != 0 {
            my_size += ::protobuf::rt::value_size(7, self.num_rows_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.target {
            match v {
                &ReadRowsRequest_oneof_target::row_key(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
                &ReadRowsRequest_oneof_target::row_range(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReadRowsRequest_oneof_target::row_set(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        if let Some(ref v) = self.filter.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.allow_row_interleaving != false {
            os.write_bool(6, self.allow_row_interleaving)?;
        }
        if self.num_rows_limit != 0 {
            os.write_int64(7, self.num_rows_limit)?;
        }
        if let ::std::option::Option::Some(ref v) = self.target {
            match v {
                &ReadRowsRequest_oneof_target::row_key(ref v) => {
                    os.write_bytes(2, v)?;
                },
                &ReadRowsRequest_oneof_target::row_range(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReadRowsRequest_oneof_target::row_set(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRowsRequest {
        ReadRowsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "table_name",
                |m: &ReadRowsRequest| { &m.table_name },
                |m: &mut ReadRowsRequest| { &mut m.table_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "row_key",
                ReadRowsRequest::has_row_key,
                ReadRowsRequest::get_row_key,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::bigtable_data::RowRange>(
                "row_range",
                ReadRowsRequest::has_row_range,
                ReadRowsRequest::get_row_range,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::bigtable_data::RowSet>(
                "row_set",
                ReadRowsRequest::has_row_set,
                ReadRowsRequest::get_row_set,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::bigtable_data::RowFilter>>(
                "filter",
                |m: &ReadRowsRequest| { &m.filter },
                |m: &mut ReadRowsRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_row_interleaving",
                |m: &ReadRowsRequest| { &m.allow_row_interleaving },
                |m: &mut ReadRowsRequest| { &mut m.allow_row_interleaving },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "num_rows_limit",
                |m: &ReadRowsRequest| { &m.num_rows_limit },
                |m: &mut ReadRowsRequest| { &mut m.num_rows_limit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadRowsRequest>(
                "ReadRowsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadRowsRequest {
        static instance: ::protobuf::rt::LazyV2<ReadRowsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadRowsRequest::new)
    }
}

impl ::protobuf::Clear for ReadRowsRequest {
    fn clear(&mut self) {
        self.table_name.clear();
        self.target = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.target = ::std::option::Option::None;
        self.filter.clear();
        self.allow_row_interleaving = false;
        self.num_rows_limit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRowsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRowsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadRowsResponse {
    // message fields
    pub row_key: ::std::vec::Vec<u8>,
    pub chunks: ::protobuf::RepeatedField<ReadRowsResponse_Chunk>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRowsResponse {
    fn default() -> &'a ReadRowsResponse {
        <ReadRowsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadRowsResponse {
    pub fn new() -> ReadRowsResponse {
        ::std::default::Default::default()
    }

    // bytes row_key = 1;


    pub fn get_row_key(&self) -> &[u8] {
        &self.row_key
    }
    pub fn clear_row_key(&mut self) {
        self.row_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.row_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.row_key
    }

    // Take field
    pub fn take_row_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.row_key, ::std::vec::Vec::new())
    }

    // repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;


    pub fn get_chunks(&self) -> &[ReadRowsResponse_Chunk] {
        &self.chunks
    }
    pub fn clear_chunks(&mut self) {
        self.chunks.clear();
    }

    // Param is passed by value, moved
    pub fn set_chunks(&mut self, v: ::protobuf::RepeatedField<ReadRowsResponse_Chunk>) {
        self.chunks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chunks(&mut self) -> &mut ::protobuf::RepeatedField<ReadRowsResponse_Chunk> {
        &mut self.chunks
    }

    // Take field
    pub fn take_chunks(&mut self) -> ::protobuf::RepeatedField<ReadRowsResponse_Chunk> {
        ::std::mem::replace(&mut self.chunks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReadRowsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.chunks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.row_key)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.chunks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.row_key);
        }
        for value in &self.chunks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.row_key.is_empty() {
            os.write_bytes(1, &self.row_key)?;
        }
        for v in &self.chunks {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRowsResponse {
        ReadRowsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "row_key",
                |m: &ReadRowsResponse| { &m.row_key },
                |m: &mut ReadRowsResponse| { &mut m.row_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReadRowsResponse_Chunk>>(
                "chunks",
                |m: &ReadRowsResponse| { &m.chunks },
                |m: &mut ReadRowsResponse| { &mut m.chunks },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadRowsResponse>(
                "ReadRowsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadRowsResponse {
        static instance: ::protobuf::rt::LazyV2<ReadRowsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadRowsResponse::new)
    }
}

impl ::protobuf::Clear for ReadRowsResponse {
    fn clear(&mut self) {
        self.row_key.clear();
        self.chunks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRowsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRowsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadRowsResponse_Chunk {
    // message oneof groups
    pub chunk: ::std::option::Option<ReadRowsResponse_Chunk_oneof_chunk>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRowsResponse_Chunk {
    fn default() -> &'a ReadRowsResponse_Chunk {
        <ReadRowsResponse_Chunk as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReadRowsResponse_Chunk_oneof_chunk {
    row_contents(super::bigtable_data::Family),
    reset_row(bool),
    commit_row(bool),
}

impl ReadRowsResponse_Chunk {
    pub fn new() -> ReadRowsResponse_Chunk {
        ::std::default::Default::default()
    }

    // .google.bigtable.v1.Family row_contents = 1;


    pub fn get_row_contents(&self) -> &super::bigtable_data::Family {
        match self.chunk {
            ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::row_contents(ref v)) => v,
            _ => <super::bigtable_data::Family as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_row_contents(&mut self) {
        self.chunk = ::std::option::Option::None;
    }

    pub fn has_row_contents(&self) -> bool {
        match self.chunk {
            ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::row_contents(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_row_contents(&mut self, v: super::bigtable_data::Family) {
        self.chunk = ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::row_contents(v))
    }

    // Mutable pointer to the field.
    pub fn mut_row_contents(&mut self) -> &mut super::bigtable_data::Family {
        if let ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::row_contents(_)) = self.chunk {
        } else {
            self.chunk = ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::row_contents(super::bigtable_data::Family::new()));
        }
        match self.chunk {
            ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::row_contents(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_row_contents(&mut self) -> super::bigtable_data::Family {
        if self.has_row_contents() {
            match self.chunk.take() {
                ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::row_contents(v)) => v,
                _ => panic!(),
            }
        } else {
            super::bigtable_data::Family::new()
        }
    }

    // bool reset_row = 2;


    pub fn get_reset_row(&self) -> bool {
        match self.chunk {
            ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::reset_row(v)) => v,
            _ => false,
        }
    }
    pub fn clear_reset_row(&mut self) {
        self.chunk = ::std::option::Option::None;
    }

    pub fn has_reset_row(&self) -> bool {
        match self.chunk {
            ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::reset_row(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reset_row(&mut self, v: bool) {
        self.chunk = ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::reset_row(v))
    }

    // bool commit_row = 3;


    pub fn get_commit_row(&self) -> bool {
        match self.chunk {
            ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::commit_row(v)) => v,
            _ => false,
        }
    }
    pub fn clear_commit_row(&mut self) {
        self.chunk = ::std::option::Option::None;
    }

    pub fn has_commit_row(&self) -> bool {
        match self.chunk {
            ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::commit_row(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_commit_row(&mut self, v: bool) {
        self.chunk = ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::commit_row(v))
    }
}

impl ::protobuf::Message for ReadRowsResponse_Chunk {
    fn is_initialized(&self) -> bool {
        if let Some(ReadRowsResponse_Chunk_oneof_chunk::row_contents(ref v)) = self.chunk {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chunk = ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::row_contents(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chunk = ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::reset_row(is.read_bool()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chunk = ::std::option::Option::Some(ReadRowsResponse_Chunk_oneof_chunk::commit_row(is.read_bool()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.chunk {
            match v {
                &ReadRowsResponse_Chunk_oneof_chunk::row_contents(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReadRowsResponse_Chunk_oneof_chunk::reset_row(v) => {
                    my_size += 2;
                },
                &ReadRowsResponse_Chunk_oneof_chunk::commit_row(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.chunk {
            match v {
                &ReadRowsResponse_Chunk_oneof_chunk::row_contents(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReadRowsResponse_Chunk_oneof_chunk::reset_row(v) => {
                    os.write_bool(2, v)?;
                },
                &ReadRowsResponse_Chunk_oneof_chunk::commit_row(v) => {
                    os.write_bool(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRowsResponse_Chunk {
        ReadRowsResponse_Chunk::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::bigtable_data::Family>(
                "row_contents",
                ReadRowsResponse_Chunk::has_row_contents,
                ReadRowsResponse_Chunk::get_row_contents,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "reset_row",
                ReadRowsResponse_Chunk::has_reset_row,
                ReadRowsResponse_Chunk::get_reset_row,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "commit_row",
                ReadRowsResponse_Chunk::has_commit_row,
                ReadRowsResponse_Chunk::get_commit_row,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadRowsResponse_Chunk>(
                "ReadRowsResponse.Chunk",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadRowsResponse_Chunk {
        static instance: ::protobuf::rt::LazyV2<ReadRowsResponse_Chunk> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadRowsResponse_Chunk::new)
    }
}

impl ::protobuf::Clear for ReadRowsResponse_Chunk {
    fn clear(&mut self) {
        self.chunk = ::std::option::Option::None;
        self.chunk = ::std::option::Option::None;
        self.chunk = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRowsResponse_Chunk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRowsResponse_Chunk {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SampleRowKeysRequest {
    // message fields
    pub table_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SampleRowKeysRequest {
    fn default() -> &'a SampleRowKeysRequest {
        <SampleRowKeysRequest as ::protobuf::Message>::default_instance()
    }
}

impl SampleRowKeysRequest {
    pub fn new() -> SampleRowKeysRequest {
        ::std::default::Default::default()
    }

    // string table_name = 1;


    pub fn get_table_name(&self) -> &str {
        &self.table_name
    }
    pub fn clear_table_name(&mut self) {
        self.table_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_table_name(&mut self, v: ::std::string::String) {
        self.table_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table_name(&mut self) -> &mut ::std::string::String {
        &mut self.table_name
    }

    // Take field
    pub fn take_table_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SampleRowKeysRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SampleRowKeysRequest {
        SampleRowKeysRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "table_name",
                |m: &SampleRowKeysRequest| { &m.table_name },
                |m: &mut SampleRowKeysRequest| { &mut m.table_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SampleRowKeysRequest>(
                "SampleRowKeysRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SampleRowKeysRequest {
        static instance: ::protobuf::rt::LazyV2<SampleRowKeysRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SampleRowKeysRequest::new)
    }
}

impl ::protobuf::Clear for SampleRowKeysRequest {
    fn clear(&mut self) {
        self.table_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SampleRowKeysRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SampleRowKeysRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SampleRowKeysResponse {
    // message fields
    pub row_key: ::std::vec::Vec<u8>,
    pub offset_bytes: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SampleRowKeysResponse {
    fn default() -> &'a SampleRowKeysResponse {
        <SampleRowKeysResponse as ::protobuf::Message>::default_instance()
    }
}

impl SampleRowKeysResponse {
    pub fn new() -> SampleRowKeysResponse {
        ::std::default::Default::default()
    }

    // bytes row_key = 1;


    pub fn get_row_key(&self) -> &[u8] {
        &self.row_key
    }
    pub fn clear_row_key(&mut self) {
        self.row_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.row_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.row_key
    }

    // Take field
    pub fn take_row_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.row_key, ::std::vec::Vec::new())
    }

    // int64 offset_bytes = 2;


    pub fn get_offset_bytes(&self) -> i64 {
        self.offset_bytes
    }
    pub fn clear_offset_bytes(&mut self) {
        self.offset_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset_bytes(&mut self, v: i64) {
        self.offset_bytes = v;
    }
}

impl ::protobuf::Message for SampleRowKeysResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.row_key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.row_key);
        }
        if self.offset_bytes != 0 {
            my_size += ::protobuf::rt::value_size(2, self.offset_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.row_key.is_empty() {
            os.write_bytes(1, &self.row_key)?;
        }
        if self.offset_bytes != 0 {
            os.write_int64(2, self.offset_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SampleRowKeysResponse {
        SampleRowKeysResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "row_key",
                |m: &SampleRowKeysResponse| { &m.row_key },
                |m: &mut SampleRowKeysResponse| { &mut m.row_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "offset_bytes",
                |m: &SampleRowKeysResponse| { &m.offset_bytes },
                |m: &mut SampleRowKeysResponse| { &mut m.offset_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SampleRowKeysResponse>(
                "SampleRowKeysResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SampleRowKeysResponse {
        static instance: ::protobuf::rt::LazyV2<SampleRowKeysResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SampleRowKeysResponse::new)
    }
}

impl ::protobuf::Clear for SampleRowKeysResponse {
    fn clear(&mut self) {
        self.row_key.clear();
        self.offset_bytes = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SampleRowKeysResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SampleRowKeysResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MutateRowRequest {
    // message fields
    pub table_name: ::std::string::String,
    pub row_key: ::std::vec::Vec<u8>,
    pub mutations: ::protobuf::RepeatedField<super::bigtable_data::Mutation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MutateRowRequest {
    fn default() -> &'a MutateRowRequest {
        <MutateRowRequest as ::protobuf::Message>::default_instance()
    }
}

impl MutateRowRequest {
    pub fn new() -> MutateRowRequest {
        ::std::default::Default::default()
    }

    // string table_name = 1;


    pub fn get_table_name(&self) -> &str {
        &self.table_name
    }
    pub fn clear_table_name(&mut self) {
        self.table_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_table_name(&mut self, v: ::std::string::String) {
        self.table_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table_name(&mut self) -> &mut ::std::string::String {
        &mut self.table_name
    }

    // Take field
    pub fn take_table_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table_name, ::std::string::String::new())
    }

    // bytes row_key = 2;


    pub fn get_row_key(&self) -> &[u8] {
        &self.row_key
    }
    pub fn clear_row_key(&mut self) {
        self.row_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.row_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.row_key
    }

    // Take field
    pub fn take_row_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.row_key, ::std::vec::Vec::new())
    }

    // repeated .google.bigtable.v1.Mutation mutations = 3;


    pub fn get_mutations(&self) -> &[super::bigtable_data::Mutation] {
        &self.mutations
    }
    pub fn clear_mutations(&mut self) {
        self.mutations.clear();
    }

    // Param is passed by value, moved
    pub fn set_mutations(&mut self, v: ::protobuf::RepeatedField<super::bigtable_data::Mutation>) {
        self.mutations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mutations(&mut self) -> &mut ::protobuf::RepeatedField<super::bigtable_data::Mutation> {
        &mut self.mutations
    }

    // Take field
    pub fn take_mutations(&mut self) -> ::protobuf::RepeatedField<super::bigtable_data::Mutation> {
        ::std::mem::replace(&mut self.mutations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MutateRowRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.mutations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.row_key)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mutations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        if !self.row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.row_key);
        }
        for value in &self.mutations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        if !self.row_key.is_empty() {
            os.write_bytes(2, &self.row_key)?;
        }
        for v in &self.mutations {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MutateRowRequest {
        MutateRowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "table_name",
                |m: &MutateRowRequest| { &m.table_name },
                |m: &mut MutateRowRequest| { &mut m.table_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "row_key",
                |m: &MutateRowRequest| { &m.row_key },
                |m: &mut MutateRowRequest| { &mut m.row_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::bigtable_data::Mutation>>(
                "mutations",
                |m: &MutateRowRequest| { &m.mutations },
                |m: &mut MutateRowRequest| { &mut m.mutations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MutateRowRequest>(
                "MutateRowRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MutateRowRequest {
        static instance: ::protobuf::rt::LazyV2<MutateRowRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MutateRowRequest::new)
    }
}

impl ::protobuf::Clear for MutateRowRequest {
    fn clear(&mut self) {
        self.table_name.clear();
        self.row_key.clear();
        self.mutations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MutateRowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MutateRowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MutateRowsRequest {
    // message fields
    pub table_name: ::std::string::String,
    pub entries: ::protobuf::RepeatedField<MutateRowsRequest_Entry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MutateRowsRequest {
    fn default() -> &'a MutateRowsRequest {
        <MutateRowsRequest as ::protobuf::Message>::default_instance()
    }
}

impl MutateRowsRequest {
    pub fn new() -> MutateRowsRequest {
        ::std::default::Default::default()
    }

    // string table_name = 1;


    pub fn get_table_name(&self) -> &str {
        &self.table_name
    }
    pub fn clear_table_name(&mut self) {
        self.table_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_table_name(&mut self, v: ::std::string::String) {
        self.table_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table_name(&mut self) -> &mut ::std::string::String {
        &mut self.table_name
    }

    // Take field
    pub fn take_table_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table_name, ::std::string::String::new())
    }

    // repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;


    pub fn get_entries(&self) -> &[MutateRowsRequest_Entry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<MutateRowsRequest_Entry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<MutateRowsRequest_Entry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<MutateRowsRequest_Entry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MutateRowsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        for v in &self.entries {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MutateRowsRequest {
        MutateRowsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "table_name",
                |m: &MutateRowsRequest| { &m.table_name },
                |m: &mut MutateRowsRequest| { &mut m.table_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MutateRowsRequest_Entry>>(
                "entries",
                |m: &MutateRowsRequest| { &m.entries },
                |m: &mut MutateRowsRequest| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MutateRowsRequest>(
                "MutateRowsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MutateRowsRequest {
        static instance: ::protobuf::rt::LazyV2<MutateRowsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MutateRowsRequest::new)
    }
}

impl ::protobuf::Clear for MutateRowsRequest {
    fn clear(&mut self) {
        self.table_name.clear();
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MutateRowsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MutateRowsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MutateRowsRequest_Entry {
    // message fields
    pub row_key: ::std::vec::Vec<u8>,
    pub mutations: ::protobuf::RepeatedField<super::bigtable_data::Mutation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MutateRowsRequest_Entry {
    fn default() -> &'a MutateRowsRequest_Entry {
        <MutateRowsRequest_Entry as ::protobuf::Message>::default_instance()
    }
}

impl MutateRowsRequest_Entry {
    pub fn new() -> MutateRowsRequest_Entry {
        ::std::default::Default::default()
    }

    // bytes row_key = 1;


    pub fn get_row_key(&self) -> &[u8] {
        &self.row_key
    }
    pub fn clear_row_key(&mut self) {
        self.row_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.row_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.row_key
    }

    // Take field
    pub fn take_row_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.row_key, ::std::vec::Vec::new())
    }

    // repeated .google.bigtable.v1.Mutation mutations = 2;


    pub fn get_mutations(&self) -> &[super::bigtable_data::Mutation] {
        &self.mutations
    }
    pub fn clear_mutations(&mut self) {
        self.mutations.clear();
    }

    // Param is passed by value, moved
    pub fn set_mutations(&mut self, v: ::protobuf::RepeatedField<super::bigtable_data::Mutation>) {
        self.mutations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mutations(&mut self) -> &mut ::protobuf::RepeatedField<super::bigtable_data::Mutation> {
        &mut self.mutations
    }

    // Take field
    pub fn take_mutations(&mut self) -> ::protobuf::RepeatedField<super::bigtable_data::Mutation> {
        ::std::mem::replace(&mut self.mutations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MutateRowsRequest_Entry {
    fn is_initialized(&self) -> bool {
        for v in &self.mutations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.row_key)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mutations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.row_key);
        }
        for value in &self.mutations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.row_key.is_empty() {
            os.write_bytes(1, &self.row_key)?;
        }
        for v in &self.mutations {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MutateRowsRequest_Entry {
        MutateRowsRequest_Entry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "row_key",
                |m: &MutateRowsRequest_Entry| { &m.row_key },
                |m: &mut MutateRowsRequest_Entry| { &mut m.row_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::bigtable_data::Mutation>>(
                "mutations",
                |m: &MutateRowsRequest_Entry| { &m.mutations },
                |m: &mut MutateRowsRequest_Entry| { &mut m.mutations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MutateRowsRequest_Entry>(
                "MutateRowsRequest.Entry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MutateRowsRequest_Entry {
        static instance: ::protobuf::rt::LazyV2<MutateRowsRequest_Entry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MutateRowsRequest_Entry::new)
    }
}

impl ::protobuf::Clear for MutateRowsRequest_Entry {
    fn clear(&mut self) {
        self.row_key.clear();
        self.mutations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MutateRowsRequest_Entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MutateRowsRequest_Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MutateRowsResponse {
    // message fields
    pub statuses: ::protobuf::RepeatedField<super::status::Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MutateRowsResponse {
    fn default() -> &'a MutateRowsResponse {
        <MutateRowsResponse as ::protobuf::Message>::default_instance()
    }
}

impl MutateRowsResponse {
    pub fn new() -> MutateRowsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.rpc.Status statuses = 1;


    pub fn get_statuses(&self) -> &[super::status::Status] {
        &self.statuses
    }
    pub fn clear_statuses(&mut self) {
        self.statuses.clear();
    }

    // Param is passed by value, moved
    pub fn set_statuses(&mut self, v: ::protobuf::RepeatedField<super::status::Status>) {
        self.statuses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_statuses(&mut self) -> &mut ::protobuf::RepeatedField<super::status::Status> {
        &mut self.statuses
    }

    // Take field
    pub fn take_statuses(&mut self) -> ::protobuf::RepeatedField<super::status::Status> {
        ::std::mem::replace(&mut self.statuses, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MutateRowsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.statuses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.statuses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.statuses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.statuses {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MutateRowsResponse {
        MutateRowsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                "statuses",
                |m: &MutateRowsResponse| { &m.statuses },
                |m: &mut MutateRowsResponse| { &mut m.statuses },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MutateRowsResponse>(
                "MutateRowsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MutateRowsResponse {
        static instance: ::protobuf::rt::LazyV2<MutateRowsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MutateRowsResponse::new)
    }
}

impl ::protobuf::Clear for MutateRowsResponse {
    fn clear(&mut self) {
        self.statuses.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MutateRowsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MutateRowsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckAndMutateRowRequest {
    // message fields
    pub table_name: ::std::string::String,
    pub row_key: ::std::vec::Vec<u8>,
    pub predicate_filter: ::protobuf::SingularPtrField<super::bigtable_data::RowFilter>,
    pub true_mutations: ::protobuf::RepeatedField<super::bigtable_data::Mutation>,
    pub false_mutations: ::protobuf::RepeatedField<super::bigtable_data::Mutation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckAndMutateRowRequest {
    fn default() -> &'a CheckAndMutateRowRequest {
        <CheckAndMutateRowRequest as ::protobuf::Message>::default_instance()
    }
}

impl CheckAndMutateRowRequest {
    pub fn new() -> CheckAndMutateRowRequest {
        ::std::default::Default::default()
    }

    // string table_name = 1;


    pub fn get_table_name(&self) -> &str {
        &self.table_name
    }
    pub fn clear_table_name(&mut self) {
        self.table_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_table_name(&mut self, v: ::std::string::String) {
        self.table_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table_name(&mut self) -> &mut ::std::string::String {
        &mut self.table_name
    }

    // Take field
    pub fn take_table_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table_name, ::std::string::String::new())
    }

    // bytes row_key = 2;


    pub fn get_row_key(&self) -> &[u8] {
        &self.row_key
    }
    pub fn clear_row_key(&mut self) {
        self.row_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.row_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.row_key
    }

    // Take field
    pub fn take_row_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.row_key, ::std::vec::Vec::new())
    }

    // .google.bigtable.v1.RowFilter predicate_filter = 6;


    pub fn get_predicate_filter(&self) -> &super::bigtable_data::RowFilter {
        self.predicate_filter.as_ref().unwrap_or_else(|| <super::bigtable_data::RowFilter as ::protobuf::Message>::default_instance())
    }
    pub fn clear_predicate_filter(&mut self) {
        self.predicate_filter.clear();
    }

    pub fn has_predicate_filter(&self) -> bool {
        self.predicate_filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_predicate_filter(&mut self, v: super::bigtable_data::RowFilter) {
        self.predicate_filter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_predicate_filter(&mut self) -> &mut super::bigtable_data::RowFilter {
        if self.predicate_filter.is_none() {
            self.predicate_filter.set_default();
        }
        self.predicate_filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_predicate_filter(&mut self) -> super::bigtable_data::RowFilter {
        self.predicate_filter.take().unwrap_or_else(|| super::bigtable_data::RowFilter::new())
    }

    // repeated .google.bigtable.v1.Mutation true_mutations = 4;


    pub fn get_true_mutations(&self) -> &[super::bigtable_data::Mutation] {
        &self.true_mutations
    }
    pub fn clear_true_mutations(&mut self) {
        self.true_mutations.clear();
    }

    // Param is passed by value, moved
    pub fn set_true_mutations(&mut self, v: ::protobuf::RepeatedField<super::bigtable_data::Mutation>) {
        self.true_mutations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_true_mutations(&mut self) -> &mut ::protobuf::RepeatedField<super::bigtable_data::Mutation> {
        &mut self.true_mutations
    }

    // Take field
    pub fn take_true_mutations(&mut self) -> ::protobuf::RepeatedField<super::bigtable_data::Mutation> {
        ::std::mem::replace(&mut self.true_mutations, ::protobuf::RepeatedField::new())
    }

    // repeated .google.bigtable.v1.Mutation false_mutations = 5;


    pub fn get_false_mutations(&self) -> &[super::bigtable_data::Mutation] {
        &self.false_mutations
    }
    pub fn clear_false_mutations(&mut self) {
        self.false_mutations.clear();
    }

    // Param is passed by value, moved
    pub fn set_false_mutations(&mut self, v: ::protobuf::RepeatedField<super::bigtable_data::Mutation>) {
        self.false_mutations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_false_mutations(&mut self) -> &mut ::protobuf::RepeatedField<super::bigtable_data::Mutation> {
        &mut self.false_mutations
    }

    // Take field
    pub fn take_false_mutations(&mut self) -> ::protobuf::RepeatedField<super::bigtable_data::Mutation> {
        ::std::mem::replace(&mut self.false_mutations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CheckAndMutateRowRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.predicate_filter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.true_mutations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.false_mutations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.row_key)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.predicate_filter)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.true_mutations)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.false_mutations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        if !self.row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.row_key);
        }
        if let Some(ref v) = self.predicate_filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.true_mutations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.false_mutations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        if !self.row_key.is_empty() {
            os.write_bytes(2, &self.row_key)?;
        }
        if let Some(ref v) = self.predicate_filter.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.true_mutations {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.false_mutations {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckAndMutateRowRequest {
        CheckAndMutateRowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "table_name",
                |m: &CheckAndMutateRowRequest| { &m.table_name },
                |m: &mut CheckAndMutateRowRequest| { &mut m.table_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "row_key",
                |m: &CheckAndMutateRowRequest| { &m.row_key },
                |m: &mut CheckAndMutateRowRequest| { &mut m.row_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::bigtable_data::RowFilter>>(
                "predicate_filter",
                |m: &CheckAndMutateRowRequest| { &m.predicate_filter },
                |m: &mut CheckAndMutateRowRequest| { &mut m.predicate_filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::bigtable_data::Mutation>>(
                "true_mutations",
                |m: &CheckAndMutateRowRequest| { &m.true_mutations },
                |m: &mut CheckAndMutateRowRequest| { &mut m.true_mutations },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::bigtable_data::Mutation>>(
                "false_mutations",
                |m: &CheckAndMutateRowRequest| { &m.false_mutations },
                |m: &mut CheckAndMutateRowRequest| { &mut m.false_mutations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckAndMutateRowRequest>(
                "CheckAndMutateRowRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckAndMutateRowRequest {
        static instance: ::protobuf::rt::LazyV2<CheckAndMutateRowRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckAndMutateRowRequest::new)
    }
}

impl ::protobuf::Clear for CheckAndMutateRowRequest {
    fn clear(&mut self) {
        self.table_name.clear();
        self.row_key.clear();
        self.predicate_filter.clear();
        self.true_mutations.clear();
        self.false_mutations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckAndMutateRowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckAndMutateRowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckAndMutateRowResponse {
    // message fields
    pub predicate_matched: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckAndMutateRowResponse {
    fn default() -> &'a CheckAndMutateRowResponse {
        <CheckAndMutateRowResponse as ::protobuf::Message>::default_instance()
    }
}

impl CheckAndMutateRowResponse {
    pub fn new() -> CheckAndMutateRowResponse {
        ::std::default::Default::default()
    }

    // bool predicate_matched = 1;


    pub fn get_predicate_matched(&self) -> bool {
        self.predicate_matched
    }
    pub fn clear_predicate_matched(&mut self) {
        self.predicate_matched = false;
    }

    // Param is passed by value, moved
    pub fn set_predicate_matched(&mut self, v: bool) {
        self.predicate_matched = v;
    }
}

impl ::protobuf::Message for CheckAndMutateRowResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.predicate_matched = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.predicate_matched != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.predicate_matched != false {
            os.write_bool(1, self.predicate_matched)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckAndMutateRowResponse {
        CheckAndMutateRowResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "predicate_matched",
                |m: &CheckAndMutateRowResponse| { &m.predicate_matched },
                |m: &mut CheckAndMutateRowResponse| { &mut m.predicate_matched },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckAndMutateRowResponse>(
                "CheckAndMutateRowResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckAndMutateRowResponse {
        static instance: ::protobuf::rt::LazyV2<CheckAndMutateRowResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckAndMutateRowResponse::new)
    }
}

impl ::protobuf::Clear for CheckAndMutateRowResponse {
    fn clear(&mut self) {
        self.predicate_matched = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckAndMutateRowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckAndMutateRowResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadModifyWriteRowRequest {
    // message fields
    pub table_name: ::std::string::String,
    pub row_key: ::std::vec::Vec<u8>,
    pub rules: ::protobuf::RepeatedField<super::bigtable_data::ReadModifyWriteRule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadModifyWriteRowRequest {
    fn default() -> &'a ReadModifyWriteRowRequest {
        <ReadModifyWriteRowRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadModifyWriteRowRequest {
    pub fn new() -> ReadModifyWriteRowRequest {
        ::std::default::Default::default()
    }

    // string table_name = 1;


    pub fn get_table_name(&self) -> &str {
        &self.table_name
    }
    pub fn clear_table_name(&mut self) {
        self.table_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_table_name(&mut self, v: ::std::string::String) {
        self.table_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table_name(&mut self) -> &mut ::std::string::String {
        &mut self.table_name
    }

    // Take field
    pub fn take_table_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table_name, ::std::string::String::new())
    }

    // bytes row_key = 2;


    pub fn get_row_key(&self) -> &[u8] {
        &self.row_key
    }
    pub fn clear_row_key(&mut self) {
        self.row_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.row_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.row_key
    }

    // Take field
    pub fn take_row_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.row_key, ::std::vec::Vec::new())
    }

    // repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;


    pub fn get_rules(&self) -> &[super::bigtable_data::ReadModifyWriteRule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<super::bigtable_data::ReadModifyWriteRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<super::bigtable_data::ReadModifyWriteRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<super::bigtable_data::ReadModifyWriteRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReadModifyWriteRowRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.row_key)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.table_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.table_name);
        }
        if !self.row_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.row_key);
        }
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.table_name.is_empty() {
            os.write_string(1, &self.table_name)?;
        }
        if !self.row_key.is_empty() {
            os.write_bytes(2, &self.row_key)?;
        }
        for v in &self.rules {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadModifyWriteRowRequest {
        ReadModifyWriteRowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "table_name",
                |m: &ReadModifyWriteRowRequest| { &m.table_name },
                |m: &mut ReadModifyWriteRowRequest| { &mut m.table_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "row_key",
                |m: &ReadModifyWriteRowRequest| { &m.row_key },
                |m: &mut ReadModifyWriteRowRequest| { &mut m.row_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::bigtable_data::ReadModifyWriteRule>>(
                "rules",
                |m: &ReadModifyWriteRowRequest| { &m.rules },
                |m: &mut ReadModifyWriteRowRequest| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadModifyWriteRowRequest>(
                "ReadModifyWriteRowRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadModifyWriteRowRequest {
        static instance: ::protobuf::rt::LazyV2<ReadModifyWriteRowRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadModifyWriteRowRequest::new)
    }
}

impl ::protobuf::Clear for ReadModifyWriteRowRequest {
    fn clear(&mut self) {
        self.table_name.clear();
        self.row_key.clear();
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadModifyWriteRowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadModifyWriteRowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n2google/bigtable/v1/bigtable_service_messages.proto\x12\x12google.bigt\
    able.v1\x1a&google/bigtable/v1/bigtable_data.proto\x1a\x17google/rpc/sta\
    tus.proto\"\xdc\x02\n\x0fReadRowsRequest\x12\x1d\n\ntable_name\x18\x01\
    \x20\x01(\tR\ttableName\x12\x19\n\x07row_key\x18\x02\x20\x01(\x0cH\0R\
    \x06rowKey\x12;\n\trow_range\x18\x03\x20\x01(\x0b2\x1c.google.bigtable.v\
    1.RowRangeH\0R\x08rowRange\x125\n\x07row_set\x18\x08\x20\x01(\x0b2\x1a.g\
    oogle.bigtable.v1.RowSetH\0R\x06rowSet\x125\n\x06filter\x18\x05\x20\x01(\
    \x0b2\x1d.google.bigtable.v1.RowFilterR\x06filter\x124\n\x16allow_row_in\
    terleaving\x18\x06\x20\x01(\x08R\x14allowRowInterleaving\x12$\n\x0enum_r\
    ows_limit\x18\x07\x20\x01(\x03R\x0cnumRowsLimitB\x08\n\x06target\"\x83\
    \x02\n\x10ReadRowsResponse\x12\x17\n\x07row_key\x18\x01\x20\x01(\x0cR\
    \x06rowKey\x12B\n\x06chunks\x18\x02\x20\x03(\x0b2*.google.bigtable.v1.Re\
    adRowsResponse.ChunkR\x06chunks\x1a\x91\x01\n\x05Chunk\x12?\n\x0crow_con\
    tents\x18\x01\x20\x01(\x0b2\x1a.google.bigtable.v1.FamilyH\0R\x0browCont\
    ents\x12\x1d\n\treset_row\x18\x02\x20\x01(\x08H\0R\x08resetRow\x12\x1f\n\
    \ncommit_row\x18\x03\x20\x01(\x08H\0R\tcommitRowB\x07\n\x05chunk\"5\n\
    \x14SampleRowKeysRequest\x12\x1d\n\ntable_name\x18\x01\x20\x01(\tR\ttabl\
    eName\"S\n\x15SampleRowKeysResponse\x12\x17\n\x07row_key\x18\x01\x20\x01\
    (\x0cR\x06rowKey\x12!\n\x0coffset_bytes\x18\x02\x20\x01(\x03R\x0boffsetB\
    ytes\"\x86\x01\n\x10MutateRowRequest\x12\x1d\n\ntable_name\x18\x01\x20\
    \x01(\tR\ttableName\x12\x17\n\x07row_key\x18\x02\x20\x01(\x0cR\x06rowKey\
    \x12:\n\tmutations\x18\x03\x20\x03(\x0b2\x1c.google.bigtable.v1.Mutation\
    R\tmutations\"\xd7\x01\n\x11MutateRowsRequest\x12\x1d\n\ntable_name\x18\
    \x01\x20\x01(\tR\ttableName\x12E\n\x07entries\x18\x02\x20\x03(\x0b2+.goo\
    gle.bigtable.v1.MutateRowsRequest.EntryR\x07entries\x1a\\\n\x05Entry\x12\
    \x17\n\x07row_key\x18\x01\x20\x01(\x0cR\x06rowKey\x12:\n\tmutations\x18\
    \x02\x20\x03(\x0b2\x1c.google.bigtable.v1.MutationR\tmutations\"D\n\x12M\
    utateRowsResponse\x12.\n\x08statuses\x18\x01\x20\x03(\x0b2\x12.google.rp\
    c.StatusR\x08statuses\"\xa8\x02\n\x18CheckAndMutateRowRequest\x12\x1d\n\
    \ntable_name\x18\x01\x20\x01(\tR\ttableName\x12\x17\n\x07row_key\x18\x02\
    \x20\x01(\x0cR\x06rowKey\x12H\n\x10predicate_filter\x18\x06\x20\x01(\x0b\
    2\x1d.google.bigtable.v1.RowFilterR\x0fpredicateFilter\x12C\n\x0etrue_mu\
    tations\x18\x04\x20\x03(\x0b2\x1c.google.bigtable.v1.MutationR\rtrueMuta\
    tions\x12E\n\x0ffalse_mutations\x18\x05\x20\x03(\x0b2\x1c.google.bigtabl\
    e.v1.MutationR\x0efalseMutations\"H\n\x19CheckAndMutateRowResponse\x12+\
    \n\x11predicate_matched\x18\x01\x20\x01(\x08R\x10predicateMatched\"\x92\
    \x01\n\x19ReadModifyWriteRowRequest\x12\x1d\n\ntable_name\x18\x01\x20\
    \x01(\tR\ttableName\x12\x17\n\x07row_key\x18\x02\x20\x01(\x0cR\x06rowKey\
    \x12=\n\x05rules\x18\x03\x20\x03(\x0b2'.google.bigtable.v1.ReadModifyWri\
    teRuleR\x05rulesBt\n\x16com.google.bigtable.v1B\x1cBigtableServiceMessag\
    esProtoP\x01Z:google.golang.org/genproto/googleapis/bigtable/v1;bigtable\
    J\x86I\n\x07\x12\x05\x0e\0\xd8\x01\x01\n\xbd\x04\n\x01\x0c\x12\x03\x0e\0\
    \x122\xb2\x04\x20Copyright\x202018\x20Google\x20Inc.\n\n\x20Licensed\x20\
    under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"Licens\
    e\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20c\
    ompliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20c\
    opy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apac\
    he.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicabl\
    e\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distri\
    buted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"A\
    S\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\
    \x02\x12\x03\x10\0\x1b\n\t\n\x02\x03\0\x12\x03\x12\00\n\t\n\x02\x03\x01\
    \x12\x03\x13\0!\n\x08\n\x01\x08\x12\x03\x15\0Q\n\t\n\x02\x08\x0b\x12\x03\
    \x15\0Q\n\x08\n\x01\x08\x12\x03\x16\0\"\n\t\n\x02\x08\n\x12\x03\x16\0\"\
    \n\x08\n\x01\x08\x12\x03\x17\0=\n\t\n\x02\x08\x08\x12\x03\x17\0=\n\x08\n\
    \x01\x08\x12\x03\x18\0/\n\t\n\x02\x08\x01\x12\x03\x18\0/\n:\n\x02\x04\0\
    \x12\x04\x1b\0=\x01\x1a.\x20Request\x20message\x20for\x20BigtableServer.\
    ReadRows.\n\n\n\n\x03\x04\0\x01\x12\x03\x1b\x08\x17\n?\n\x04\x04\0\x02\0\
    \x12\x03\x1d\x02\x18\x1a2\x20The\x20unique\x20name\x20of\x20the\x20table\
    \x20from\x20which\x20to\x20read.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x1d\
    \x02\x1b\x19\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x1d\t\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x1d\x16\x17\nM\n\x04\x04\0\x08\0\x12\x04\x20\x02+\x03\x1a?\x20If\x20nei\
    ther\x20row_key\x20nor\x20row_range\x20is\x20set,\x20reads\x20from\x20al\
    l\x20rows.\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x20\x08\x0e\n:\n\x04\
    \x04\0\x02\x01\x12\x03\"\x04\x16\x1a-\x20The\x20key\x20of\x20a\x20single\
    \x20row\x20from\x20which\x20to\x20read.\n\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\"\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\"\n\x11\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\"\x14\x15\n2\n\x04\x04\0\x02\x02\x12\x03%\
    \x04\x1b\x1a%\x20A\x20range\x20of\x20rows\x20from\x20which\x20to\x20read\
    .\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03%\x04\x0c\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03%\r\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03%\x19\x1a\n\
    \xb4\x01\n\x04\x04\0\x02\x03\x12\x03*\x04\x17\x1a\xa6\x01\x20A\x20set\
    \x20of\x20rows\x20from\x20which\x20to\x20read.\x20Entries\x20need\x20not\
    \x20be\x20in\x20order,\x20and\x20will\n\x20be\x20deduplicated\x20before\
    \x20reading.\n\x20The\x20total\x20serialized\x20size\x20of\x20the\x20set\
    \x20must\x20not\x20exceed\x201MB.\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\
    \x03*\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03*\x0b\x12\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03*\x15\x16\nn\n\x04\x04\0\x02\x04\x12\x03/\x02\
    \x17\x1aa\x20The\x20filter\x20to\x20apply\x20to\x20the\x20contents\x20of\
    \x20the\x20specified\x20row(s).\x20If\x20unset,\n\x20reads\x20the\x20ent\
    ire\x20table.\n\n\r\n\x05\x04\0\x02\x04\x04\x12\x04/\x02+\x03\n\x0c\n\
    \x05\x04\0\x02\x04\x06\x12\x03/\x02\x0b\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03/\x0c\x12\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03/\x15\x16\n\xab\
    \x03\n\x04\x04\0\x02\x05\x12\x037\x02\"\x1a\x9d\x03\x20By\x20default,\
    \x20rows\x20are\x20read\x20sequentially,\x20producing\x20results\x20whic\
    h\x20are\n\x20guaranteed\x20to\x20arrive\x20in\x20increasing\x20row\x20o\
    rder.\x20Setting\n\x20\"allow_row_interleaving\"\x20to\x20true\x20allows\
    \x20multiple\x20rows\x20to\x20be\x20interleaved\x20in\n\x20the\x20respon\
    se\x20stream,\x20which\x20increases\x20throughput\x20but\x20breaks\x20th\
    is\x20guarantee,\n\x20and\x20may\x20force\x20the\x20client\x20to\x20use\
    \x20more\x20memory\x20to\x20buffer\x20partially-received\n\x20rows.\x20C\
    annot\x20be\x20set\x20to\x20true\x20when\x20specifying\x20\"num_rows_lim\
    it\".\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x047\x02/\x17\n\x0c\n\x05\x04\0\
    \x02\x05\x05\x12\x037\x02\x06\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x037\x07\
    \x1d\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x037\x20!\n\xcf\x01\n\x04\x04\0\
    \x02\x06\x12\x03<\x02\x1b\x1a\xc1\x01\x20The\x20read\x20will\x20terminat\
    e\x20after\x20committing\x20to\x20N\x20rows'\x20worth\x20of\x20results.\
    \x20The\n\x20default\x20(zero)\x20is\x20to\x20return\x20all\x20results.\
    \n\x20Note\x20that\x20\"allow_row_interleaving\"\x20cannot\x20be\x20set\
    \x20to\x20true\x20when\x20this\x20is\x20set.\n\n\r\n\x05\x04\0\x02\x06\
    \x04\x12\x04<\x027\"\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03<\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x06\x01\x12\x03<\x08\x16\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03<\x19\x1a\n<\n\x02\x04\x01\x12\x04@\0\\\x01\x1a0\x20Response\
    \x20message\x20for\x20BigtableService.ReadRows.\n\n\n\n\x03\x04\x01\x01\
    \x12\x03@\x08\x18\nd\n\x04\x04\x01\x03\0\x12\x04C\x02S\x03\x1aV\x20Speci\
    fies\x20a\x20piece\x20of\x20a\x20row's\x20contents\x20returned\x20as\x20\
    part\x20of\x20the\x20read\n\x20response\x20stream.\n\n\x0c\n\x05\x04\x01\
    \x03\0\x01\x12\x03C\n\x0f\n\x0e\n\x06\x04\x01\x03\0\x08\0\x12\x04D\x04R\
    \x05\n\x0e\n\x07\x04\x01\x03\0\x08\0\x01\x12\x03D\n\x0f\n\x8b\x02\n\x06\
    \x04\x01\x03\0\x02\0\x12\x03I\x06\x1e\x1a\xfb\x01\x20A\x20subset\x20of\
    \x20the\x20data\x20from\x20a\x20particular\x20row.\x20As\x20long\x20as\
    \x20no\x20\"reset_row\"\n\x20is\x20received\x20in\x20between,\x20multipl\
    e\x20\"row_contents\"\x20from\x20the\x20same\x20row\x20are\n\x20from\x20\
    the\x20same\x20atomic\x20view\x20of\x20that\x20row,\x20and\x20will\x20be\
    \x20received\x20in\x20the\n\x20expected\x20family/column/timestamp\x20or\
    der.\n\n\x0e\n\x07\x04\x01\x03\0\x02\0\x06\x12\x03I\x06\x0c\n\x0e\n\x07\
    \x04\x01\x03\0\x02\0\x01\x12\x03I\r\x19\n\x0e\n\x07\x04\x01\x03\0\x02\0\
    \x03\x12\x03I\x1c\x1d\n\x84\x01\n\x06\x04\x01\x03\0\x02\x01\x12\x03M\x06\
    \x19\x1au\x20Indicates\x20that\x20the\x20client\x20should\x20drop\x20all\
    \x20previous\x20chunks\x20for\n\x20\"row_key\",\x20as\x20it\x20will\x20b\
    e\x20re-read\x20from\x20the\x20beginning.\n\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x01\x05\x12\x03M\x06\n\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x01\x12\
    \x03M\x0b\x14\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x03\x12\x03M\x17\x18\n\
    \x82\x01\n\x06\x04\x01\x03\0\x02\x02\x12\x03Q\x06\x1a\x1as\x20Indicates\
    \x20that\x20the\x20client\x20can\x20safely\x20process\x20all\x20previous\
    \x20chunks\x20for\n\x20\"row_key\",\x20as\x20its\x20data\x20has\x20been\
    \x20fully\x20read.\n\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x05\x12\x03Q\x06\
    \n\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x01\x12\x03Q\x0b\x15\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x02\x03\x12\x03Q\x18\x19\n\xb8\x01\n\x04\x04\x01\x02\
    \0\x12\x03X\x02\x14\x1a\xaa\x01\x20The\x20key\x20of\x20the\x20row\x20for\
    \x20which\x20we're\x20receiving\x20data.\n\x20Results\x20will\x20be\x20r\
    eceived\x20in\x20increasing\x20row\x20key\x20order,\x20unless\n\x20\"all\
    ow_row_interleaving\"\x20was\x20specified\x20in\x20the\x20request.\n\n\r\
    \n\x05\x04\x01\x02\0\x04\x12\x04X\x02S\x03\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03X\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03X\x08\x0f\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03X\x12\x13\nD\n\x04\x04\x01\x02\x01\x12\x03\
    [\x02\x1c\x1a7\x20One\x20or\x20more\x20chunks\x20of\x20the\x20row\x20spe\
    cified\x20by\x20\"row_key\".\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03[\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03[\x0b\x10\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03[\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03[\x1a\x1b\n@\n\x02\x04\x02\x12\x04_\0b\x01\x1a4\x20Request\x20messag\
    e\x20for\x20BigtableService.SampleRowKeys.\n\n\n\n\x03\x04\x02\x01\x12\
    \x03_\x08\x1c\nJ\n\x04\x04\x02\x02\0\x12\x03a\x02\x18\x1a=\x20The\x20uni\
    que\x20name\x20of\x20the\x20table\x20from\x20which\x20to\x20sample\x20ro\
    w\x20keys.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04a\x02_\x1e\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03a\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03a\t\x13\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03a\x16\x17\nA\n\x02\x04\
    \x03\x12\x04e\0t\x01\x1a5\x20Response\x20message\x20for\x20BigtableServi\
    ce.SampleRowKeys.\n\n\n\n\x03\x04\x03\x01\x12\x03e\x08\x1d\n\xdf\x03\n\
    \x04\x04\x03\x02\0\x12\x03m\x02\x14\x1a\xd1\x03\x20Sorted\x20streamed\
    \x20sequence\x20of\x20sample\x20row\x20keys\x20in\x20the\x20table.\x20Th\
    e\x20table\x20might\n\x20have\x20contents\x20before\x20the\x20first\x20r\
    ow\x20key\x20in\x20the\x20list\x20and\x20after\x20the\x20last\x20one,\n\
    \x20but\x20a\x20key\x20containing\x20the\x20empty\x20string\x20indicates\
    \x20\"end\x20of\x20table\"\x20and\x20will\x20be\n\x20the\x20last\x20resp\
    onse\x20given,\x20if\x20present.\n\x20Note\x20that\x20row\x20keys\x20in\
    \x20this\x20list\x20may\x20not\x20have\x20ever\x20been\x20written\x20to\
    \x20or\x20read\n\x20from,\x20and\x20users\x20should\x20therefore\x20not\
    \x20make\x20any\x20assumptions\x20about\x20the\x20row\x20key\n\x20struct\
    ure\x20that\x20are\x20specific\x20to\x20their\x20use\x20case.\n\n\r\n\
    \x05\x04\x03\x02\0\x04\x12\x04m\x02e\x1f\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03m\x02\x07\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03m\x08\x0f\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03m\x12\x13\n\xff\x01\n\x04\x04\x03\x02\x01\
    \x12\x03s\x02\x19\x1a\xf1\x01\x20Approximate\x20total\x20storage\x20spac\
    e\x20used\x20by\x20all\x20rows\x20in\x20the\x20table\x20which\x20precede\
    \n\x20\"row_key\".\x20Buffering\x20the\x20contents\x20of\x20all\x20rows\
    \x20between\x20two\x20subsequent\n\x20samples\x20would\x20require\x20spa\
    ce\x20roughly\x20equal\x20to\x20the\x20difference\x20in\x20their\n\x20\"\
    offset_bytes\"\x20fields.\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04s\x02m\
    \x14\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03s\x02\x07\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03s\x08\x14\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03s\x17\x18\n=\n\x02\x04\x04\x12\x05w\0\x82\x01\x01\x1a0\x20Request\
    \x20message\x20for\x20BigtableService.MutateRow.\n\n\n\n\x03\x04\x04\x01\
    \x12\x03w\x08\x18\nT\n\x04\x04\x04\x02\0\x12\x03y\x02\x18\x1aG\x20The\
    \x20unique\x20name\x20of\x20the\x20table\x20to\x20which\x20the\x20mutati\
    on\x20should\x20be\x20applied.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04y\
    \x02w\x1a\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03y\x02\x08\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03y\t\x13\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03y\x16\
    \x17\nJ\n\x04\x04\x04\x02\x01\x12\x03|\x02\x14\x1a=\x20The\x20key\x20of\
    \x20the\x20row\x20to\x20which\x20the\x20mutation\x20should\x20be\x20appl\
    ied.\n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04|\x02y\x18\n\x0c\n\x05\x04\
    \x04\x02\x01\x05\x12\x03|\x02\x07\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\
    \x03|\x08\x0f\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03|\x12\x13\n\xd7\x01\
    \n\x04\x04\x04\x02\x02\x12\x04\x81\x01\x02\"\x1a\xc8\x01\x20Changes\x20t\
    o\x20be\x20atomically\x20applied\x20to\x20the\x20specified\x20row.\x20En\
    tries\x20are\x20applied\n\x20in\x20order,\x20meaning\x20that\x20earlier\
    \x20mutations\x20can\x20be\x20masked\x20by\x20later\x20ones.\n\x20Must\
    \x20contain\x20at\x20least\x20one\x20entry\x20and\x20at\x20most\x2010000\
    0.\n\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04\x81\x01\x02\n\n\r\n\x05\x04\
    \x04\x02\x02\x06\x12\x04\x81\x01\x0b\x13\n\r\n\x05\x04\x04\x02\x02\x01\
    \x12\x04\x81\x01\x14\x1d\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\x81\x01\
    \x20!\n?\n\x02\x04\x05\x12\x06\x85\x01\0\x9a\x01\x01\x1a1\x20Request\x20\
    message\x20for\x20BigtableService.MutateRows.\n\n\x0b\n\x03\x04\x05\x01\
    \x12\x04\x85\x01\x08\x19\n\x0e\n\x04\x04\x05\x03\0\x12\x06\x86\x01\x02\
    \x8f\x01\x03\n\r\n\x05\x04\x05\x03\0\x01\x12\x04\x86\x01\n\x0f\nP\n\x06\
    \x04\x05\x03\0\x02\0\x12\x04\x88\x01\x04\x16\x1a@\x20The\x20key\x20of\
    \x20the\x20row\x20to\x20which\x20the\x20`mutations`\x20should\x20be\x20a\
    pplied.\n\n\x11\n\x07\x04\x05\x03\0\x02\0\x04\x12\x06\x88\x01\x04\x86\
    \x01\x11\n\x0f\n\x07\x04\x05\x03\0\x02\0\x05\x12\x04\x88\x01\x04\t\n\x0f\
    \n\x07\x04\x05\x03\0\x02\0\x01\x12\x04\x88\x01\n\x11\n\x0f\n\x07\x04\x05\
    \x03\0\x02\0\x03\x12\x04\x88\x01\x14\x15\n\xd1\x01\n\x06\x04\x05\x03\0\
    \x02\x01\x12\x04\x8e\x01\x04$\x1a\xc0\x01\x20Changes\x20to\x20be\x20atom\
    ically\x20applied\x20to\x20the\x20specified\x20row.\x20Mutations\x20are\
    \n\x20applied\x20in\x20order,\x20meaning\x20that\x20earlier\x20mutations\
    \x20can\x20be\x20masked\x20by\n\x20later\x20ones.\n\x20At\x20least\x20on\
    e\x20mutation\x20must\x20be\x20specified.\n\n\x0f\n\x07\x04\x05\x03\0\
    \x02\x01\x04\x12\x04\x8e\x01\x04\x0c\n\x0f\n\x07\x04\x05\x03\0\x02\x01\
    \x06\x12\x04\x8e\x01\r\x15\n\x0f\n\x07\x04\x05\x03\0\x02\x01\x01\x12\x04\
    \x8e\x01\x16\x1f\n\x0f\n\x07\x04\x05\x03\0\x02\x01\x03\x12\x04\x8e\x01\"\
    #\nV\n\x04\x04\x05\x02\0\x12\x04\x92\x01\x02\x18\x1aH\x20The\x20unique\
    \x20name\x20of\x20the\x20table\x20to\x20which\x20the\x20mutations\x20sho\
    uld\x20be\x20applied.\n\n\x0f\n\x05\x04\x05\x02\0\x04\x12\x06\x92\x01\
    \x02\x8f\x01\x03\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\x92\x01\x02\x08\n\r\
    \n\x05\x04\x05\x02\0\x01\x12\x04\x92\x01\t\x13\n\r\n\x05\x04\x05\x02\0\
    \x03\x12\x04\x92\x01\x16\x17\n\xaf\x02\n\x04\x04\x05\x02\x01\x12\x04\x99\
    \x01\x02\x1d\x1a\xa0\x02\x20The\x20row\x20keys/mutations\x20to\x20be\x20\
    applied\x20in\x20bulk.\n\x20Each\x20entry\x20is\x20applied\x20as\x20an\
    \x20atomic\x20mutation,\x20but\x20the\x20entries\x20may\x20be\n\x20appli\
    ed\x20in\x20arbitrary\x20order\x20(even\x20between\x20entries\x20for\x20\
    the\x20same\x20row).\n\x20At\x20least\x20one\x20entry\x20must\x20be\x20s\
    pecified,\x20and\x20in\x20total\x20the\x20entries\x20may\n\x20contain\
    \x20at\x20most\x20100000\x20mutations.\n\n\r\n\x05\x04\x05\x02\x01\x04\
    \x12\x04\x99\x01\x02\n\n\r\n\x05\x04\x05\x02\x01\x06\x12\x04\x99\x01\x0b\
    \x10\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\x99\x01\x11\x18\n\r\n\x05\x04\
    \x05\x02\x01\x03\x12\x04\x99\x01\x1b\x1c\n@\n\x02\x04\x06\x12\x06\x9d\
    \x01\0\xa4\x01\x01\x1a2\x20Response\x20message\x20for\x20BigtableService\
    .MutateRows.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\x9d\x01\x08\x1a\n\xd6\x02\
    \n\x04\x04\x06\x02\0\x12\x04\xa3\x01\x02*\x1a\xc7\x02\x20The\x20results\
    \x20for\x20each\x20Entry\x20from\x20the\x20request,\x20presented\x20in\
    \x20the\x20order\n\x20in\x20which\x20the\x20entries\x20were\x20originall\
    y\x20given.\n\x20Depending\x20on\x20how\x20requests\x20are\x20batched\
    \x20during\x20execution,\x20it\x20is\x20possible\n\x20for\x20one\x20Entr\
    y\x20to\x20fail\x20due\x20to\x20an\x20error\x20with\x20another\x20Entry.\
    \x20In\x20the\x20event\n\x20that\x20this\x20occurs,\x20the\x20same\x20er\
    ror\x20will\x20be\x20reported\x20for\x20both\x20entries.\n\n\r\n\x05\x04\
    \x06\x02\0\x04\x12\x04\xa3\x01\x02\n\n\r\n\x05\x04\x06\x02\0\x06\x12\x04\
    \xa3\x01\x0b\x1c\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xa3\x01\x1d%\n\r\n\
    \x05\x04\x06\x02\0\x03\x12\x04\xa3\x01()\nL\n\x02\x04\x07\x12\x06\xa7\
    \x01\0\xc2\x01\x01\x1a>\x20Request\x20message\x20for\x20BigtableService.\
    CheckAndMutateRowRequest\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xa7\x01\x08\
    \x20\nb\n\x04\x04\x07\x02\0\x12\x04\xaa\x01\x02\x18\x1aT\x20The\x20uniqu\
    e\x20name\x20of\x20the\x20table\x20to\x20which\x20the\x20conditional\x20\
    mutation\x20should\x20be\n\x20applied.\n\n\x0f\n\x05\x04\x07\x02\0\x04\
    \x12\x06\xaa\x01\x02\xa7\x01\"\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\xaa\
    \x01\x02\x08\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xaa\x01\t\x13\n\r\n\x05\
    \x04\x07\x02\0\x03\x12\x04\xaa\x01\x16\x17\nW\n\x04\x04\x07\x02\x01\x12\
    \x04\xad\x01\x02\x14\x1aI\x20The\x20key\x20of\x20the\x20row\x20to\x20whi\
    ch\x20the\x20conditional\x20mutation\x20should\x20be\x20applied.\n\n\x0f\
    \n\x05\x04\x07\x02\x01\x04\x12\x06\xad\x01\x02\xaa\x01\x18\n\r\n\x05\x04\
    \x07\x02\x01\x05\x12\x04\xad\x01\x02\x07\n\r\n\x05\x04\x07\x02\x01\x01\
    \x12\x04\xad\x01\x08\x0f\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\xad\x01\
    \x12\x13\n\x80\x02\n\x04\x04\x07\x02\x02\x12\x04\xb3\x01\x02!\x1a\xf1\
    \x01\x20The\x20filter\x20to\x20be\x20applied\x20to\x20the\x20contents\
    \x20of\x20the\x20specified\x20row.\x20Depending\n\x20on\x20whether\x20or\
    \x20not\x20any\x20results\x20are\x20yielded,\x20either\x20\"true_mutatio\
    ns\"\x20or\n\x20\"false_mutations\"\x20will\x20be\x20executed.\x20If\x20\
    unset,\x20checks\x20that\x20the\x20row\x20contains\n\x20any\x20values\
    \x20at\x20all.\n\n\x0f\n\x05\x04\x07\x02\x02\x04\x12\x06\xb3\x01\x02\xad\
    \x01\x14\n\r\n\x05\x04\x07\x02\x02\x06\x12\x04\xb3\x01\x02\x0b\n\r\n\x05\
    \x04\x07\x02\x02\x01\x12\x04\xb3\x01\x0c\x1c\n\r\n\x05\x04\x07\x02\x02\
    \x03\x12\x04\xb3\x01\x1f\x20\n\xc1\x02\n\x04\x04\x07\x02\x03\x12\x04\xba\
    \x01\x02'\x1a\xb2\x02\x20Changes\x20to\x20be\x20atomically\x20applied\
    \x20to\x20the\x20specified\x20row\x20if\x20\"predicate_filter\"\n\x20yie\
    lds\x20at\x20least\x20one\x20cell\x20when\x20applied\x20to\x20\"row_key\
    \".\x20Entries\x20are\x20applied\x20in\n\x20order,\x20meaning\x20that\
    \x20earlier\x20mutations\x20can\x20be\x20masked\x20by\x20later\x20ones.\
    \n\x20Must\x20contain\x20at\x20least\x20one\x20entry\x20if\x20\"false_mu\
    tations\"\x20is\x20empty,\x20and\x20at\x20most\n\x20100000.\n\n\r\n\x05\
    \x04\x07\x02\x03\x04\x12\x04\xba\x01\x02\n\n\r\n\x05\x04\x07\x02\x03\x06\
    \x12\x04\xba\x01\x0b\x13\n\r\n\x05\x04\x07\x02\x03\x01\x12\x04\xba\x01\
    \x14\"\n\r\n\x05\x04\x07\x02\x03\x03\x12\x04\xba\x01%&\n\xc0\x02\n\x04\
    \x04\x07\x02\x04\x12\x04\xc1\x01\x02(\x1a\xb1\x02\x20Changes\x20to\x20be\
    \x20atomically\x20applied\x20to\x20the\x20specified\x20row\x20if\x20\"pr\
    edicate_filter\"\n\x20does\x20not\x20yield\x20any\x20cells\x20when\x20ap\
    plied\x20to\x20\"row_key\".\x20Entries\x20are\x20applied\x20in\n\x20orde\
    r,\x20meaning\x20that\x20earlier\x20mutations\x20can\x20be\x20masked\x20\
    by\x20later\x20ones.\n\x20Must\x20contain\x20at\x20least\x20one\x20entry\
    \x20if\x20\"true_mutations\"\x20is\x20empty,\x20and\x20at\x20most\n\x201\
    00000.\n\n\r\n\x05\x04\x07\x02\x04\x04\x12\x04\xc1\x01\x02\n\n\r\n\x05\
    \x04\x07\x02\x04\x06\x12\x04\xc1\x01\x0b\x13\n\r\n\x05\x04\x07\x02\x04\
    \x01\x12\x04\xc1\x01\x14#\n\r\n\x05\x04\x07\x02\x04\x03\x12\x04\xc1\x01&\
    '\nN\n\x02\x04\x08\x12\x06\xc5\x01\0\xc9\x01\x01\x1a@\x20Response\x20mes\
    sage\x20for\x20BigtableService.CheckAndMutateRowRequest.\n\n\x0b\n\x03\
    \x04\x08\x01\x12\x04\xc5\x01\x08!\nk\n\x04\x04\x08\x02\0\x12\x04\xc8\x01\
    \x02\x1d\x1a]\x20Whether\x20or\x20not\x20the\x20request's\x20\"predicate\
    _filter\"\x20yielded\x20any\x20results\x20for\n\x20the\x20specified\x20r\
    ow.\n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\xc8\x01\x02\xc5\x01#\n\r\n\
    \x05\x04\x08\x02\0\x05\x12\x04\xc8\x01\x02\x06\n\r\n\x05\x04\x08\x02\0\
    \x01\x12\x04\xc8\x01\x07\x18\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\xc8\x01\
    \x1b\x1c\nN\n\x02\x04\t\x12\x06\xcc\x01\0\xd8\x01\x01\x1a@\x20Request\
    \x20message\x20for\x20BigtableService.ReadModifyWriteRowRequest.\n\n\x0b\
    \n\x03\x04\t\x01\x12\x04\xcc\x01\x08!\ne\n\x04\x04\t\x02\0\x12\x04\xcf\
    \x01\x02\x18\x1aW\x20The\x20unique\x20name\x20of\x20the\x20table\x20to\
    \x20which\x20the\x20read/modify/write\x20rules\x20should\x20be\n\x20appl\
    ied.\n\n\x0f\n\x05\x04\t\x02\0\x04\x12\x06\xcf\x01\x02\xcc\x01#\n\r\n\
    \x05\x04\t\x02\0\x05\x12\x04\xcf\x01\x02\x08\n\r\n\x05\x04\t\x02\0\x01\
    \x12\x04\xcf\x01\t\x13\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xcf\x01\x16\x17\
    \nZ\n\x04\x04\t\x02\x01\x12\x04\xd2\x01\x02\x14\x1aL\x20The\x20key\x20of\
    \x20the\x20row\x20to\x20which\x20the\x20read/modify/write\x20rules\x20sh\
    ould\x20be\x20applied.\n\n\x0f\n\x05\x04\t\x02\x01\x04\x12\x06\xd2\x01\
    \x02\xcf\x01\x18\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\xd2\x01\x02\x07\n\r\
    \n\x05\x04\t\x02\x01\x01\x12\x04\xd2\x01\x08\x0f\n\r\n\x05\x04\t\x02\x01\
    \x03\x12\x04\xd2\x01\x12\x13\n\xc7\x01\n\x04\x04\t\x02\x02\x12\x04\xd7\
    \x01\x02)\x1a\xb8\x01\x20Rules\x20specifying\x20how\x20the\x20specified\
    \x20row's\x20contents\x20are\x20to\x20be\x20transformed\n\x20into\x20wri\
    tes.\x20Entries\x20are\x20applied\x20in\x20order,\x20meaning\x20that\x20\
    earlier\x20rules\x20will\n\x20affect\x20the\x20results\x20of\x20later\
    \x20ones.\n\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\xd7\x01\x02\n\n\r\n\x05\
    \x04\t\x02\x02\x06\x12\x04\xd7\x01\x0b\x1e\n\r\n\x05\x04\t\x02\x02\x01\
    \x12\x04\xd7\x01\x1f$\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\xd7\x01'(b\x06\
    proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
