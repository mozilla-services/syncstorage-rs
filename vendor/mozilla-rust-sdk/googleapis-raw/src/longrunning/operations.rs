// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/longrunning/operations.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Operation {
    // message fields
    pub name: ::std::string::String,
    pub metadata: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub done: bool,
    // message oneof groups
    pub result: ::std::option::Option<Operation_oneof_result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Operation {
    fn default() -> &'a Operation {
        <Operation as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Operation_oneof_result {
    error(super::status::Status),
    response(::protobuf::well_known_types::Any),
}

impl Operation {
    pub fn new() -> Operation {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Any metadata = 2;


    pub fn get_metadata(&self) -> &::protobuf::well_known_types::Any {
        self.metadata.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::protobuf::well_known_types::Any) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::protobuf::well_known_types::Any {
        self.metadata.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // bool done = 3;


    pub fn get_done(&self) -> bool {
        self.done
    }
    pub fn clear_done(&mut self) {
        self.done = false;
    }

    // Param is passed by value, moved
    pub fn set_done(&mut self, v: bool) {
        self.done = v;
    }

    // .google.rpc.Status error = 4;


    pub fn get_error(&self) -> &super::status::Status {
        match self.result {
            ::std::option::Option::Some(Operation_oneof_result::error(ref v)) => v,
            _ => <super::status::Status as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_error(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(Operation_oneof_result::error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: super::status::Status) {
        self.result = ::std::option::Option::Some(Operation_oneof_result::error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut super::status::Status {
        if let ::std::option::Option::Some(Operation_oneof_result::error(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(Operation_oneof_result::error(super::status::Status::new()));
        }
        match self.result {
            ::std::option::Option::Some(Operation_oneof_result::error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> super::status::Status {
        if self.has_error() {
            match self.result.take() {
                ::std::option::Option::Some(Operation_oneof_result::error(v)) => v,
                _ => panic!(),
            }
        } else {
            super::status::Status::new()
        }
    }

    // .google.protobuf.Any response = 5;


    pub fn get_response(&self) -> &::protobuf::well_known_types::Any {
        match self.result {
            ::std::option::Option::Some(Operation_oneof_result::response(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_response(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_response(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(Operation_oneof_result::response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: ::protobuf::well_known_types::Any) {
        self.result = ::std::option::Option::Some(Operation_oneof_result::response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_response(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(Operation_oneof_result::response(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(Operation_oneof_result::response(::protobuf::well_known_types::Any::new()));
        }
        match self.result {
            ::std::option::Option::Some(Operation_oneof_result::response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_response(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_response() {
            match self.result.take() {
                ::std::option::Option::Some(Operation_oneof_result::response(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for Operation {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Operation_oneof_result::error(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Operation_oneof_result::response(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.done = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(Operation_oneof_result::error(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(Operation_oneof_result::response(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.done != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &Operation_oneof_result::error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Operation_oneof_result::response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.done != false {
            os.write_bool(3, self.done)?;
        }
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &Operation_oneof_result::error(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Operation_oneof_result::response(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Operation {
        Operation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Operation| { &m.name },
                |m: &mut Operation| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "metadata",
                |m: &Operation| { &m.metadata },
                |m: &mut Operation| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "done",
                |m: &Operation| { &m.done },
                |m: &mut Operation| { &mut m.done },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::status::Status>(
                "error",
                Operation::has_error,
                Operation::get_error,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "response",
                Operation::has_response,
                Operation::get_response,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Operation>(
                "Operation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Operation {
        static instance: ::protobuf::rt::LazyV2<Operation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Operation::new)
    }
}

impl ::protobuf::Clear for Operation {
    fn clear(&mut self) {
        self.name.clear();
        self.metadata.clear();
        self.done = false;
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Operation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Operation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetOperationRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetOperationRequest {
    fn default() -> &'a GetOperationRequest {
        <GetOperationRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetOperationRequest {
    pub fn new() -> GetOperationRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetOperationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetOperationRequest {
        GetOperationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetOperationRequest| { &m.name },
                |m: &mut GetOperationRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetOperationRequest>(
                "GetOperationRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetOperationRequest {
        static instance: ::protobuf::rt::LazyV2<GetOperationRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetOperationRequest::new)
    }
}

impl ::protobuf::Clear for GetOperationRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetOperationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOperationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListOperationsRequest {
    // message fields
    pub name: ::std::string::String,
    pub filter: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListOperationsRequest {
    fn default() -> &'a ListOperationsRequest {
        <ListOperationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListOperationsRequest {
    pub fn new() -> ListOperationsRequest {
        ::std::default::Default::default()
    }

    // string name = 4;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string filter = 1;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListOperationsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filter);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        if !self.filter.is_empty() {
            os.write_string(1, &self.filter)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListOperationsRequest {
        ListOperationsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ListOperationsRequest| { &m.name },
                |m: &mut ListOperationsRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListOperationsRequest| { &m.filter },
                |m: &mut ListOperationsRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListOperationsRequest| { &m.page_size },
                |m: &mut ListOperationsRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListOperationsRequest| { &m.page_token },
                |m: &mut ListOperationsRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListOperationsRequest>(
                "ListOperationsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListOperationsRequest {
        static instance: ::protobuf::rt::LazyV2<ListOperationsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListOperationsRequest::new)
    }
}

impl ::protobuf::Clear for ListOperationsRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.filter.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListOperationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListOperationsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListOperationsResponse {
    // message fields
    pub operations: ::protobuf::RepeatedField<Operation>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListOperationsResponse {
    fn default() -> &'a ListOperationsResponse {
        <ListOperationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListOperationsResponse {
    pub fn new() -> ListOperationsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.longrunning.Operation operations = 1;


    pub fn get_operations(&self) -> &[Operation] {
        &self.operations
    }
    pub fn clear_operations(&mut self) {
        self.operations.clear();
    }

    // Param is passed by value, moved
    pub fn set_operations(&mut self, v: ::protobuf::RepeatedField<Operation>) {
        self.operations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_operations(&mut self) -> &mut ::protobuf::RepeatedField<Operation> {
        &mut self.operations
    }

    // Take field
    pub fn take_operations(&mut self) -> ::protobuf::RepeatedField<Operation> {
        ::std::mem::replace(&mut self.operations, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListOperationsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.operations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.operations)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.operations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.operations {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListOperationsResponse {
        ListOperationsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Operation>>(
                "operations",
                |m: &ListOperationsResponse| { &m.operations },
                |m: &mut ListOperationsResponse| { &mut m.operations },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListOperationsResponse| { &m.next_page_token },
                |m: &mut ListOperationsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListOperationsResponse>(
                "ListOperationsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListOperationsResponse {
        static instance: ::protobuf::rt::LazyV2<ListOperationsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListOperationsResponse::new)
    }
}

impl ::protobuf::Clear for ListOperationsResponse {
    fn clear(&mut self) {
        self.operations.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListOperationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListOperationsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelOperationRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelOperationRequest {
    fn default() -> &'a CancelOperationRequest {
        <CancelOperationRequest as ::protobuf::Message>::default_instance()
    }
}

impl CancelOperationRequest {
    pub fn new() -> CancelOperationRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CancelOperationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelOperationRequest {
        CancelOperationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &CancelOperationRequest| { &m.name },
                |m: &mut CancelOperationRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CancelOperationRequest>(
                "CancelOperationRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CancelOperationRequest {
        static instance: ::protobuf::rt::LazyV2<CancelOperationRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CancelOperationRequest::new)
    }
}

impl ::protobuf::Clear for CancelOperationRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelOperationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelOperationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteOperationRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteOperationRequest {
    fn default() -> &'a DeleteOperationRequest {
        <DeleteOperationRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteOperationRequest {
    pub fn new() -> DeleteOperationRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteOperationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteOperationRequest {
        DeleteOperationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteOperationRequest| { &m.name },
                |m: &mut DeleteOperationRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteOperationRequest>(
                "DeleteOperationRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteOperationRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteOperationRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteOperationRequest::new)
    }
}

impl ::protobuf::Clear for DeleteOperationRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteOperationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteOperationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#google/longrunning/operations.proto\x12\x12google.longrunning\x1a\x1c\
    google/api/annotations.proto\x1a\x19google/protobuf/any.proto\x1a\x1bgoo\
    gle/protobuf/empty.proto\x1a\x17google/rpc/status.proto\"\xcf\x01\n\tOpe\
    ration\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x120\n\x08metadata\
    \x18\x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\x08metadata\x12\x12\n\
    \x04done\x18\x03\x20\x01(\x08R\x04done\x12*\n\x05error\x18\x04\x20\x01(\
    \x0b2\x12.google.rpc.StatusH\0R\x05error\x122\n\x08response\x18\x05\x20\
    \x01(\x0b2\x14.google.protobuf.AnyH\0R\x08responseB\x08\n\x06result\")\n\
    \x13GetOperationRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"\
    \x7f\n\x15ListOperationsRequest\x12\x12\n\x04name\x18\x04\x20\x01(\tR\
    \x04name\x12\x16\n\x06filter\x18\x01\x20\x01(\tR\x06filter\x12\x1b\n\tpa\
    ge_size\x18\x02\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_token\x18\x03\
    \x20\x01(\tR\tpageToken\"\x7f\n\x16ListOperationsResponse\x12=\n\noperat\
    ions\x18\x01\x20\x03(\x0b2\x1d.google.longrunning.OperationR\noperations\
    \x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPageToken\",\n\x16Ca\
    ncelOperationRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\",\n\
    \x16DeleteOperationRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    2\x8c\x04\n\nOperations\x12\x86\x01\n\x0eListOperations\x12).google.long\
    running.ListOperationsRequest\x1a*.google.longrunning.ListOperationsResp\
    onse\"\x1d\x82\xd3\xe4\x93\x02\x17\x12\x15/v1/{name=operations}\x12x\n\
    \x0cGetOperation\x12'.google.longrunning.GetOperationRequest\x1a\x1d.goo\
    gle.longrunning.Operation\"\x20\x82\xd3\xe4\x93\x02\x1a\x12\x18/v1/{name\
    =operations/**}\x12w\n\x0fDeleteOperation\x12*.google.longrunning.Delete\
    OperationRequest\x1a\x16.google.protobuf.Empty\"\x20\x82\xd3\xe4\x93\x02\
    \x1a*\x18/v1/{name=operations/**}\x12\x81\x01\n\x0fCancelOperation\x12*.\
    google.longrunning.CancelOperationRequest\x1a\x16.google.protobuf.Empty\
    \"*\x82\xd3\xe4\x93\x02$\"\x1f/v1/{name=operations/**}:cancel:\x01*B\x94\
    \x01\n\x16com.google.longrunningB\x0fOperationsProtoP\x01Z=google.golang\
    .org/genproto/googleapis/longrunning;longrunning\xaa\x02\x12Google.LongR\
    unning\xca\x02\x12Google\\LongRunningJ\xed4\n\x07\x12\x05\x0e\0\x9e\x01\
    \x01\n\xbd\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202016\
    \x20Google\x20Inc.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\
    \x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\
    \n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\
    \x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\
    \x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\x20Licen\
    se\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHO\
    UT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20\
    express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20sp\
    ecific\x20language\x20governing\x20permissions\x20and\n\x20limitations\
    \x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x1b\n\t\n\
    \x02\x03\0\x12\x03\x12\0&\n\t\n\x02\x03\x01\x12\x03\x13\0#\n\t\n\x02\x03\
    \x02\x12\x03\x14\0%\n\t\n\x02\x03\x03\x12\x03\x15\0!\n\x08\n\x01\x08\x12\
    \x03\x17\0/\n\t\n\x02\x08%\x12\x03\x17\0/\n\x08\n\x01\x08\x12\x03\x18\0T\
    \n\t\n\x02\x08\x0b\x12\x03\x18\0T\n\x08\n\x01\x08\x12\x03\x19\0\"\n\t\n\
    \x02\x08\n\x12\x03\x19\0\"\n\x08\n\x01\x08\x12\x03\x1a\00\n\t\n\x02\x08\
    \x08\x12\x03\x1a\00\n\x08\n\x01\x08\x12\x03\x1b\0/\n\t\n\x02\x08\x01\x12\
    \x03\x1b\0/\n\x08\n\x01\x08\x12\x03\x1c\0-\n\t\n\x02\x08)\x12\x03\x1c\0-\
    \n\xd2\x04\n\x02\x06\0\x12\x04(\0N\x01\x1a\xc5\x04\x20Manages\x20long-ru\
    nning\x20operations\x20with\x20an\x20API\x20service.\n\n\x20When\x20an\
    \x20API\x20method\x20normally\x20takes\x20long\x20time\x20to\x20complete\
    ,\x20it\x20can\x20be\x20designed\n\x20to\x20return\x20[Operation][google\
    .longrunning.Operation]\x20to\x20the\x20client,\x20and\x20the\x20client\
    \x20can\x20use\x20this\n\x20interface\x20to\x20receive\x20the\x20real\
    \x20response\x20asynchronously\x20by\x20polling\x20the\n\x20operation\
    \x20resource,\x20or\x20pass\x20the\x20operation\x20resource\x20to\x20ano\
    ther\x20API\x20(such\x20as\n\x20Google\x20Cloud\x20Pub/Sub\x20API)\x20to\
    \x20receive\x20the\x20response.\x20\x20Any\x20API\x20service\x20that\n\
    \x20returns\x20long-running\x20operations\x20should\x20implement\x20the\
    \x20`Operations`\x20interface\n\x20so\x20developers\x20can\x20have\x20a\
    \x20consistent\x20client\x20experience.\n\n\n\n\x03\x06\0\x01\x12\x03(\
    \x08\x12\n\xad\x02\n\x04\x06\0\x02\0\x12\x04.\x020\x03\x1a\x9e\x02\x20Li\
    sts\x20operations\x20that\x20match\x20the\x20specified\x20filter\x20in\
    \x20the\x20request.\x20If\x20the\n\x20server\x20doesn't\x20support\x20th\
    is\x20method,\x20it\x20returns\x20`UNIMPLEMENTED`.\n\n\x20NOTE:\x20the\
    \x20`name`\x20binding\x20below\x20allows\x20API\x20services\x20to\x20ove\
    rride\x20the\x20binding\n\x20to\x20use\x20different\x20resource\x20name\
    \x20schemes,\x20such\x20as\x20`users/*/operations`.\n\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x03.\x06\x14\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03.\x15*\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03.5K\n\x0c\n\x05\x06\0\x02\0\x04\x12\
    \x03/\x04@\n\x10\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x03/\x04@\n\xaf\
    \x01\n\x04\x06\0\x02\x01\x12\x045\x027\x03\x1a\xa0\x01\x20Gets\x20the\
    \x20latest\x20state\x20of\x20a\x20long-running\x20operation.\x20\x20Clie\
    nts\x20can\x20use\x20this\n\x20method\x20to\x20poll\x20the\x20operation\
    \x20result\x20at\x20intervals\x20as\x20recommended\x20by\x20the\x20API\n\
    \x20service.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x035\x06\x12\n\x0c\n\
    \x05\x06\0\x02\x01\x02\x12\x035\x13&\n\x0c\n\x05\x06\0\x02\x01\x03\x12\
    \x0351:\n\x0c\n\x05\x06\0\x02\x01\x04\x12\x036\x04C\n\x10\n\t\x06\0\x02\
    \x01\x04\xb0\xca\xbc\"\x12\x036\x04C\n\x85\x02\n\x04\x06\0\x02\x02\x12\
    \x04=\x02?\x03\x1a\xf6\x01\x20Deletes\x20a\x20long-running\x20operation.\
    \x20This\x20method\x20indicates\x20that\x20the\x20client\x20is\n\x20no\
    \x20longer\x20interested\x20in\x20the\x20operation\x20result.\x20It\x20d\
    oes\x20not\x20cancel\x20the\n\x20operation.\x20If\x20the\x20server\x20do\
    esn't\x20support\x20this\x20method,\x20it\x20returns\n\x20`google.rpc.Co\
    de.UNIMPLEMENTED`.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03=\x06\x15\n\
    \x0c\n\x05\x06\0\x02\x02\x02\x12\x03=\x16,\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x03=7L\n\x0c\n\x05\x06\0\x02\x02\x04\x12\x03>\x04F\n\x10\n\t\x06\0\
    \x02\x02\x04\xb0\xca\xbc\"\x12\x03>\x04F\n\xd4\x05\n\x04\x06\0\x02\x03\
    \x12\x04K\x02M\x03\x1a\xc5\x05\x20Starts\x20asynchronous\x20cancellation\
    \x20on\x20a\x20long-running\x20operation.\x20\x20The\x20server\n\x20make\
    s\x20a\x20best\x20effort\x20to\x20cancel\x20the\x20operation,\x20but\x20\
    success\x20is\x20not\n\x20guaranteed.\x20\x20If\x20the\x20server\x20does\
    n't\x20support\x20this\x20method,\x20it\x20returns\n\x20`google.rpc.Code\
    .UNIMPLEMENTED`.\x20\x20Clients\x20can\x20use\n\x20[Operations.GetOperat\
    ion][google.longrunning.Operations.GetOperation]\x20or\n\x20other\x20met\
    hods\x20to\x20check\x20whether\x20the\x20cancellation\x20succeeded\x20or\
    \x20whether\x20the\n\x20operation\x20completed\x20despite\x20cancellatio\
    n.\x20On\x20successful\x20cancellation,\n\x20the\x20operation\x20is\x20n\
    ot\x20deleted;\x20instead,\x20it\x20becomes\x20an\x20operation\x20with\n\
    \x20an\x20[Operation.error][google.longrunning.Operation.error]\x20value\
    \x20with\x20a\x20[google.rpc.Status.code][google.rpc.Status.code]\x20of\
    \x201,\n\x20corresponding\x20to\x20`Code.CANCELLED`.\n\n\x0c\n\x05\x06\0\
    \x02\x03\x01\x12\x03K\x06\x15\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03K\x16\
    ,\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03K7L\n\x0c\n\x05\x06\0\x02\x03\x04\
    \x12\x03L\x04U\n\x10\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x03L\x04U\n\
    j\n\x02\x04\0\x12\x04R\0t\x01\x1a^\x20This\x20resource\x20represents\x20\
    a\x20long-running\x20operation\x20that\x20is\x20the\x20result\x20of\x20a\
    \n\x20network\x20API\x20call.\n\n\n\n\x03\x04\0\x01\x12\x03R\x08\x11\n\
    \xdd\x01\n\x04\x04\0\x02\0\x12\x03V\x02\x12\x1a\xcf\x01\x20The\x20server\
    -assigned\x20name,\x20which\x20is\x20only\x20unique\x20within\x20the\x20\
    same\x20service\x20that\n\x20originally\x20returns\x20it.\x20If\x20you\
    \x20use\x20the\x20default\x20HTTP\x20mapping,\x20the\n\x20`name`\x20shou\
    ld\x20have\x20the\x20format\x20of\x20`operations/some/unique/name`.\n\n\
    \r\n\x05\x04\0\x02\0\x04\x12\x04V\x02R\x13\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03V\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03V\t\r\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03V\x10\x11\n\xac\x02\n\x04\x04\0\x02\x01\x12\x03\
    \\\x02#\x1a\x9e\x02\x20Service-specific\x20metadata\x20associated\x20wit\
    h\x20the\x20operation.\x20\x20It\x20typically\n\x20contains\x20progress\
    \x20information\x20and\x20common\x20metadata\x20such\x20as\x20create\x20\
    time.\n\x20Some\x20services\x20might\x20not\x20provide\x20such\x20metada\
    ta.\x20\x20Any\x20method\x20that\x20returns\x20a\n\x20long-running\x20op\
    eration\x20should\x20document\x20the\x20metadata\x20type,\x20if\x20any.\
    \n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\\\x02V\x12\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03\\\x02\x15\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\\\x16\
    \x1e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\\!\"\n\xab\x01\n\x04\x04\0\
    \x02\x02\x12\x03a\x02\x10\x1a\x9d\x01\x20If\x20the\x20value\x20is\x20`fa\
    lse`,\x20it\x20means\x20the\x20operation\x20is\x20still\x20in\x20progres\
    s.\n\x20If\x20true,\x20the\x20operation\x20is\x20completed,\x20and\x20ei\
    ther\x20`error`\x20or\x20`response`\x20is\n\x20available.\n\n\r\n\x05\
    \x04\0\x02\x02\x04\x12\x04a\x02\\#\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\
    a\x02\x06\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03a\x07\x0b\n\x0c\n\x05\x04\
    \0\x02\x02\x03\x12\x03a\x0e\x0f\n\xdd\x01\n\x04\x04\0\x08\0\x12\x04f\x02\
    s\x03\x1a\xce\x01\x20The\x20operation\x20result,\x20which\x20can\x20be\
    \x20either\x20an\x20`error`\x20or\x20a\x20valid\x20`response`.\n\x20If\
    \x20`done`\x20==\x20`false`,\x20neither\x20`error`\x20nor\x20`response`\
    \x20is\x20set.\n\x20If\x20`done`\x20==\x20`true`,\x20exactly\x20one\x20o\
    f\x20`error`\x20or\x20`response`\x20is\x20set.\n\n\x0c\n\x05\x04\0\x08\0\
    \x01\x12\x03f\x08\x0e\nT\n\x04\x04\0\x02\x03\x12\x03h\x04\x20\x1aG\x20Th\
    e\x20error\x20result\x20of\x20the\x20operation\x20in\x20case\x20of\x20fa\
    ilure\x20or\x20cancellation.\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03h\
    \x04\x15\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03h\x16\x1b\n\x0c\n\x05\x04\
    \0\x02\x03\x03\x12\x03h\x1e\x1f\n\x83\x04\n\x04\x04\0\x02\x04\x12\x03r\
    \x04%\x1a\xf5\x03\x20The\x20normal\x20response\x20of\x20the\x20operation\
    \x20in\x20case\x20of\x20success.\x20\x20If\x20the\x20original\n\x20metho\
    d\x20returns\x20no\x20data\x20on\x20success,\x20such\x20as\x20`Delete`,\
    \x20the\x20response\x20is\n\x20`google.protobuf.Empty`.\x20\x20If\x20the\
    \x20original\x20method\x20is\x20standard\n\x20`Get`/`Create`/`Update`,\
    \x20the\x20response\x20should\x20be\x20the\x20resource.\x20\x20For\x20ot\
    her\n\x20methods,\x20the\x20response\x20should\x20have\x20the\x20type\
    \x20`XxxResponse`,\x20where\x20`Xxx`\n\x20is\x20the\x20original\x20metho\
    d\x20name.\x20\x20For\x20example,\x20if\x20the\x20original\x20method\x20\
    name\n\x20is\x20`TakeSnapshot()`,\x20the\x20inferred\x20response\x20type\
    \x20is\n\x20`TakeSnapshotResponse`.\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\
    \x03r\x04\x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03r\x18\x20\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03r#$\nl\n\x02\x04\x01\x12\x04w\0z\x01\x1a`\x20T\
    he\x20request\x20message\x20for\x20[Operations.GetOperation][google.long\
    running.Operations.GetOperation].\n\n\n\n\x03\x04\x01\x01\x12\x03w\x08\
    \x1b\n2\n\x04\x04\x01\x02\0\x12\x03y\x02\x12\x1a%\x20The\x20name\x20of\
    \x20the\x20operation\x20resource.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04y\
    \x02w\x1d\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03y\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03y\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03y\x10\
    \x11\nq\n\x02\x04\x02\x12\x05}\0\x89\x01\x01\x1ad\x20The\x20request\x20m\
    essage\x20for\x20[Operations.ListOperations][google.longrunning.Operatio\
    ns.ListOperations].\n\n\n\n\x03\x04\x02\x01\x12\x03}\x08\x1d\n4\n\x04\
    \x04\x02\x02\0\x12\x03\x7f\x02\x12\x1a'\x20The\x20name\x20of\x20the\x20o\
    peration\x20collection.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x7f\x02}\
    \x1f\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x7f\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x7f\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x7f\
    \x10\x11\n)\n\x04\x04\x02\x02\x01\x12\x04\x82\x01\x02\x14\x1a\x1b\x20The\
    \x20standard\x20list\x20filter.\n\n\x0e\n\x05\x04\x02\x02\x01\x04\x12\
    \x05\x82\x01\x02\x7f\x12\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\x82\x01\
    \x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x82\x01\t\x0f\n\r\n\x05\
    \x04\x02\x02\x01\x03\x12\x04\x82\x01\x12\x13\n,\n\x04\x04\x02\x02\x02\
    \x12\x04\x85\x01\x02\x16\x1a\x1e\x20The\x20standard\x20list\x20page\x20s\
    ize.\n\n\x0f\n\x05\x04\x02\x02\x02\x04\x12\x06\x85\x01\x02\x82\x01\x14\n\
    \r\n\x05\x04\x02\x02\x02\x05\x12\x04\x85\x01\x02\x07\n\r\n\x05\x04\x02\
    \x02\x02\x01\x12\x04\x85\x01\x08\x11\n\r\n\x05\x04\x02\x02\x02\x03\x12\
    \x04\x85\x01\x14\x15\n-\n\x04\x04\x02\x02\x03\x12\x04\x88\x01\x02\x18\
    \x1a\x1f\x20The\x20standard\x20list\x20page\x20token.\n\n\x0f\n\x05\x04\
    \x02\x02\x03\x04\x12\x06\x88\x01\x02\x85\x01\x16\n\r\n\x05\x04\x02\x02\
    \x03\x05\x12\x04\x88\x01\x02\x08\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\
    \x88\x01\t\x13\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\x88\x01\x16\x17\ns\
    \n\x02\x04\x03\x12\x06\x8c\x01\0\x92\x01\x01\x1ae\x20The\x20response\x20\
    message\x20for\x20[Operations.ListOperations][google.longrunning.Operati\
    ons.ListOperations].\n\n\x0b\n\x03\x04\x03\x01\x12\x04\x8c\x01\x08\x1e\n\
    V\n\x04\x04\x03\x02\0\x12\x04\x8e\x01\x02$\x1aH\x20A\x20list\x20of\x20op\
    erations\x20that\x20matches\x20the\x20specified\x20filter\x20in\x20the\
    \x20request.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x8e\x01\x02\n\n\r\n\
    \x05\x04\x03\x02\0\x06\x12\x04\x8e\x01\x0b\x14\n\r\n\x05\x04\x03\x02\0\
    \x01\x12\x04\x8e\x01\x15\x1f\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x8e\x01\
    \"#\n2\n\x04\x04\x03\x02\x01\x12\x04\x91\x01\x02\x1d\x1a$\x20The\x20stan\
    dard\x20List\x20next-page\x20token.\n\n\x0f\n\x05\x04\x03\x02\x01\x04\
    \x12\x06\x91\x01\x02\x8e\x01$\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\x91\
    \x01\x02\x08\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x91\x01\t\x18\n\r\n\
    \x05\x04\x03\x02\x01\x03\x12\x04\x91\x01\x1b\x1c\nt\n\x02\x04\x04\x12\
    \x06\x95\x01\0\x98\x01\x01\x1af\x20The\x20request\x20message\x20for\x20[\
    Operations.CancelOperation][google.longrunning.Operations.CancelOperatio\
    n].\n\n\x0b\n\x03\x04\x04\x01\x12\x04\x95\x01\x08\x1e\nC\n\x04\x04\x04\
    \x02\0\x12\x04\x97\x01\x02\x12\x1a5\x20The\x20name\x20of\x20the\x20opera\
    tion\x20resource\x20to\x20be\x20cancelled.\n\n\x0f\n\x05\x04\x04\x02\0\
    \x04\x12\x06\x97\x01\x02\x95\x01\x20\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\
    \x97\x01\x02\x08\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\x97\x01\t\r\n\r\n\
    \x05\x04\x04\x02\0\x03\x12\x04\x97\x01\x10\x11\nt\n\x02\x04\x05\x12\x06\
    \x9b\x01\0\x9e\x01\x01\x1af\x20The\x20request\x20message\x20for\x20[Oper\
    ations.DeleteOperation][google.longrunning.Operations.DeleteOperation].\
    \n\n\x0b\n\x03\x04\x05\x01\x12\x04\x9b\x01\x08\x1e\nA\n\x04\x04\x05\x02\
    \0\x12\x04\x9d\x01\x02\x12\x1a3\x20The\x20name\x20of\x20the\x20operation\
    \x20resource\x20to\x20be\x20deleted.\n\n\x0f\n\x05\x04\x05\x02\0\x04\x12\
    \x06\x9d\x01\x02\x9b\x01\x20\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\x9d\x01\
    \x02\x08\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x9d\x01\t\r\n\r\n\x05\x04\
    \x05\x02\0\x03\x12\x04\x9d\x01\x10\x11b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
