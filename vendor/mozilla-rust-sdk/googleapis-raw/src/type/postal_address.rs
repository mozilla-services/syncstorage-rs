// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/type/postal_address.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct PostalAddress {
    // message fields
    pub revision: i32,
    pub region_code: ::std::string::String,
    pub language_code: ::std::string::String,
    pub postal_code: ::std::string::String,
    pub sorting_code: ::std::string::String,
    pub administrative_area: ::std::string::String,
    pub locality: ::std::string::String,
    pub sublocality: ::std::string::String,
    pub address_lines: ::protobuf::RepeatedField<::std::string::String>,
    pub recipients: ::protobuf::RepeatedField<::std::string::String>,
    pub organization: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PostalAddress {
    fn default() -> &'a PostalAddress {
        <PostalAddress as ::protobuf::Message>::default_instance()
    }
}

impl PostalAddress {
    pub fn new() -> PostalAddress {
        ::std::default::Default::default()
    }

    // int32 revision = 1;


    pub fn get_revision(&self) -> i32 {
        self.revision
    }
    pub fn clear_revision(&mut self) {
        self.revision = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: i32) {
        self.revision = v;
    }

    // string region_code = 2;


    pub fn get_region_code(&self) -> &str {
        &self.region_code
    }
    pub fn clear_region_code(&mut self) {
        self.region_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_region_code(&mut self, v: ::std::string::String) {
        self.region_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region_code(&mut self) -> &mut ::std::string::String {
        &mut self.region_code
    }

    // Take field
    pub fn take_region_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.region_code, ::std::string::String::new())
    }

    // string language_code = 3;


    pub fn get_language_code(&self) -> &str {
        &self.language_code
    }
    pub fn clear_language_code(&mut self) {
        self.language_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_language_code(&mut self, v: ::std::string::String) {
        self.language_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language_code(&mut self) -> &mut ::std::string::String {
        &mut self.language_code
    }

    // Take field
    pub fn take_language_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.language_code, ::std::string::String::new())
    }

    // string postal_code = 4;


    pub fn get_postal_code(&self) -> &str {
        &self.postal_code
    }
    pub fn clear_postal_code(&mut self) {
        self.postal_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_postal_code(&mut self, v: ::std::string::String) {
        self.postal_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_postal_code(&mut self) -> &mut ::std::string::String {
        &mut self.postal_code
    }

    // Take field
    pub fn take_postal_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.postal_code, ::std::string::String::new())
    }

    // string sorting_code = 5;


    pub fn get_sorting_code(&self) -> &str {
        &self.sorting_code
    }
    pub fn clear_sorting_code(&mut self) {
        self.sorting_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_sorting_code(&mut self, v: ::std::string::String) {
        self.sorting_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sorting_code(&mut self) -> &mut ::std::string::String {
        &mut self.sorting_code
    }

    // Take field
    pub fn take_sorting_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sorting_code, ::std::string::String::new())
    }

    // string administrative_area = 6;


    pub fn get_administrative_area(&self) -> &str {
        &self.administrative_area
    }
    pub fn clear_administrative_area(&mut self) {
        self.administrative_area.clear();
    }

    // Param is passed by value, moved
    pub fn set_administrative_area(&mut self, v: ::std::string::String) {
        self.administrative_area = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_administrative_area(&mut self) -> &mut ::std::string::String {
        &mut self.administrative_area
    }

    // Take field
    pub fn take_administrative_area(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.administrative_area, ::std::string::String::new())
    }

    // string locality = 7;


    pub fn get_locality(&self) -> &str {
        &self.locality
    }
    pub fn clear_locality(&mut self) {
        self.locality.clear();
    }

    // Param is passed by value, moved
    pub fn set_locality(&mut self, v: ::std::string::String) {
        self.locality = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locality(&mut self) -> &mut ::std::string::String {
        &mut self.locality
    }

    // Take field
    pub fn take_locality(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.locality, ::std::string::String::new())
    }

    // string sublocality = 8;


    pub fn get_sublocality(&self) -> &str {
        &self.sublocality
    }
    pub fn clear_sublocality(&mut self) {
        self.sublocality.clear();
    }

    // Param is passed by value, moved
    pub fn set_sublocality(&mut self, v: ::std::string::String) {
        self.sublocality = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sublocality(&mut self) -> &mut ::std::string::String {
        &mut self.sublocality
    }

    // Take field
    pub fn take_sublocality(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sublocality, ::std::string::String::new())
    }

    // repeated string address_lines = 9;


    pub fn get_address_lines(&self) -> &[::std::string::String] {
        &self.address_lines
    }
    pub fn clear_address_lines(&mut self) {
        self.address_lines.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_lines(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.address_lines = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_lines(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.address_lines
    }

    // Take field
    pub fn take_address_lines(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.address_lines, ::protobuf::RepeatedField::new())
    }

    // repeated string recipients = 10;


    pub fn get_recipients(&self) -> &[::std::string::String] {
        &self.recipients
    }
    pub fn clear_recipients(&mut self) {
        self.recipients.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipients(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.recipients = v;
    }

    // Mutable pointer to the field.
    pub fn mut_recipients(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.recipients
    }

    // Take field
    pub fn take_recipients(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.recipients, ::protobuf::RepeatedField::new())
    }

    // string organization = 11;


    pub fn get_organization(&self) -> &str {
        &self.organization
    }
    pub fn clear_organization(&mut self) {
        self.organization.clear();
    }

    // Param is passed by value, moved
    pub fn set_organization(&mut self, v: ::std::string::String) {
        self.organization = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization(&mut self) -> &mut ::std::string::String {
        &mut self.organization
    }

    // Take field
    pub fn take_organization(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.organization, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PostalAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.revision = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.region_code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.language_code)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.postal_code)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sorting_code)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.administrative_area)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.locality)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sublocality)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.address_lines)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.recipients)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.organization)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.revision != 0 {
            my_size += ::protobuf::rt::value_size(1, self.revision, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.region_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.region_code);
        }
        if !self.language_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.language_code);
        }
        if !self.postal_code.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.postal_code);
        }
        if !self.sorting_code.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.sorting_code);
        }
        if !self.administrative_area.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.administrative_area);
        }
        if !self.locality.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.locality);
        }
        if !self.sublocality.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.sublocality);
        }
        for value in &self.address_lines {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        for value in &self.recipients {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        if !self.organization.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.organization);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.revision != 0 {
            os.write_int32(1, self.revision)?;
        }
        if !self.region_code.is_empty() {
            os.write_string(2, &self.region_code)?;
        }
        if !self.language_code.is_empty() {
            os.write_string(3, &self.language_code)?;
        }
        if !self.postal_code.is_empty() {
            os.write_string(4, &self.postal_code)?;
        }
        if !self.sorting_code.is_empty() {
            os.write_string(5, &self.sorting_code)?;
        }
        if !self.administrative_area.is_empty() {
            os.write_string(6, &self.administrative_area)?;
        }
        if !self.locality.is_empty() {
            os.write_string(7, &self.locality)?;
        }
        if !self.sublocality.is_empty() {
            os.write_string(8, &self.sublocality)?;
        }
        for v in &self.address_lines {
            os.write_string(9, &v)?;
        };
        for v in &self.recipients {
            os.write_string(10, &v)?;
        };
        if !self.organization.is_empty() {
            os.write_string(11, &self.organization)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PostalAddress {
        PostalAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "revision",
                |m: &PostalAddress| { &m.revision },
                |m: &mut PostalAddress| { &mut m.revision },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "region_code",
                |m: &PostalAddress| { &m.region_code },
                |m: &mut PostalAddress| { &mut m.region_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "language_code",
                |m: &PostalAddress| { &m.language_code },
                |m: &mut PostalAddress| { &mut m.language_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "postal_code",
                |m: &PostalAddress| { &m.postal_code },
                |m: &mut PostalAddress| { &mut m.postal_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sorting_code",
                |m: &PostalAddress| { &m.sorting_code },
                |m: &mut PostalAddress| { &mut m.sorting_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "administrative_area",
                |m: &PostalAddress| { &m.administrative_area },
                |m: &mut PostalAddress| { &mut m.administrative_area },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "locality",
                |m: &PostalAddress| { &m.locality },
                |m: &mut PostalAddress| { &mut m.locality },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sublocality",
                |m: &PostalAddress| { &m.sublocality },
                |m: &mut PostalAddress| { &mut m.sublocality },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address_lines",
                |m: &PostalAddress| { &m.address_lines },
                |m: &mut PostalAddress| { &mut m.address_lines },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recipients",
                |m: &PostalAddress| { &m.recipients },
                |m: &mut PostalAddress| { &mut m.recipients },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "organization",
                |m: &PostalAddress| { &m.organization },
                |m: &mut PostalAddress| { &mut m.organization },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PostalAddress>(
                "PostalAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PostalAddress {
        static instance: ::protobuf::rt::LazyV2<PostalAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PostalAddress::new)
    }
}

impl ::protobuf::Clear for PostalAddress {
    fn clear(&mut self) {
        self.revision = 0;
        self.region_code.clear();
        self.language_code.clear();
        self.postal_code.clear();
        self.sorting_code.clear();
        self.administrative_area.clear();
        self.locality.clear();
        self.sublocality.clear();
        self.address_lines.clear();
        self.recipients.clear();
        self.organization.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PostalAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PostalAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20google/type/postal_address.proto\x12\x0bgoogle.type\"\x8d\x03\n\rP\
    ostalAddress\x12\x1a\n\x08revision\x18\x01\x20\x01(\x05R\x08revision\x12\
    \x1f\n\x0bregion_code\x18\x02\x20\x01(\tR\nregionCode\x12#\n\rlanguage_c\
    ode\x18\x03\x20\x01(\tR\x0clanguageCode\x12\x1f\n\x0bpostal_code\x18\x04\
    \x20\x01(\tR\npostalCode\x12!\n\x0csorting_code\x18\x05\x20\x01(\tR\x0bs\
    ortingCode\x12/\n\x13administrative_area\x18\x06\x20\x01(\tR\x12administ\
    rativeArea\x12\x1a\n\x08locality\x18\x07\x20\x01(\tR\x08locality\x12\x20\
    \n\x0bsublocality\x18\x08\x20\x01(\tR\x0bsublocality\x12#\n\raddress_lin\
    es\x18\t\x20\x03(\tR\x0caddressLines\x12\x1e\n\nrecipients\x18\n\x20\x03\
    (\tR\nrecipients\x12\"\n\x0corganization\x18\x0b\x20\x01(\tR\x0corganiza\
    tionBx\n\x0fcom.google.typeB\x12PostalAddressProtoP\x01ZFgoogle.golang.o\
    rg/genproto/googleapis/type/postaladdress;postaladdress\xf8\x01\x01\xa2\
    \x02\x03GTPJ\xd20\n\x07\x12\x05\x0e\0\x85\x01\x01\n\xbc\x04\n\x01\x0c\
    \x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202020\x20Google\x20LLC\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\x08\n\x01\x02\x12\x03\x10\0\x14\n\x08\n\x01\x08\x12\x03\x12\0\
    \x1f\n\t\n\x02\x08\x1f\x12\x03\x12\0\x1f\n\x08\n\x01\x08\x12\x03\x13\0]\
    \n\t\n\x02\x08\x0b\x12\x03\x13\0]\n\x08\n\x01\x08\x12\x03\x14\0\"\n\t\n\
    \x02\x08\n\x12\x03\x14\0\"\n\x08\n\x01\x08\x12\x03\x15\03\n\t\n\x02\x08\
    \x08\x12\x03\x15\03\n\x08\n\x01\x08\x12\x03\x16\0(\n\t\n\x02\x08\x01\x12\
    \x03\x16\0(\n\x08\n\x01\x08\x12\x03\x17\0!\n\t\n\x02\x08$\x12\x03\x17\0!\
    \n\xfe\x05\n\x02\x04\0\x12\x05*\0\x85\x01\x01\x1a\xf0\x05\x20Represents\
    \x20a\x20postal\x20address,\x20e.g.\x20for\x20postal\x20delivery\x20or\
    \x20payments\x20addresses.\n\x20Given\x20a\x20postal\x20address,\x20a\
    \x20postal\x20service\x20can\x20deliver\x20items\x20to\x20a\x20premise,\
    \x20P.O.\n\x20Box\x20or\x20similar.\n\x20It\x20is\x20not\x20intended\x20\
    to\x20model\x20geographical\x20locations\x20(roads,\x20towns,\n\x20mount\
    ains).\n\n\x20In\x20typical\x20usage\x20an\x20address\x20would\x20be\x20\
    created\x20via\x20user\x20input\x20or\x20from\x20importing\n\x20existing\
    \x20data,\x20depending\x20on\x20the\x20type\x20of\x20process.\n\n\x20Adv\
    ice\x20on\x20address\x20input\x20/\x20editing:\n\x20\x20-\x20Use\x20an\
    \x20i18n-ready\x20address\x20widget\x20such\x20as\n\x20\x20\x20\x20https\
    ://github.com/google/libaddressinput)\n\x20-\x20Users\x20should\x20not\
    \x20be\x20presented\x20with\x20UI\x20elements\x20for\x20input\x20or\x20e\
    diting\x20of\n\x20\x20\x20fields\x20outside\x20countries\x20where\x20tha\
    t\x20field\x20is\x20used.\n\n\x20For\x20more\x20guidance\x20on\x20how\
    \x20to\x20use\x20this\x20schema,\x20please\x20see:\n\x20https://support.\
    google.com/business/answer/6397478\n\n\n\n\x03\x04\0\x01\x12\x03*\x08\
    \x15\n\xb9\x01\n\x04\x04\0\x02\0\x12\x03/\x02\x15\x1a\xab\x01\x20The\x20\
    schema\x20revision\x20of\x20the\x20`PostalAddress`.\x20This\x20must\x20b\
    e\x20set\x20to\x200,\x20which\x20is\n\x20the\x20latest\x20revision.\n\n\
    \x20All\x20new\x20revisions\x20**must**\x20be\x20backward\x20compatible\
    \x20with\x20old\x20revisions.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04/\x02*\
    \x17\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03/\x02\x07\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03/\x08\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03/\x13\x14\n\
    \xbf\x02\n\x04\x04\0\x02\x01\x12\x036\x02\x19\x1a\xb1\x02\x20Required.\
    \x20CLDR\x20region\x20code\x20of\x20the\x20country/region\x20of\x20the\
    \x20address.\x20This\n\x20is\x20never\x20inferred\x20and\x20it\x20is\x20\
    up\x20to\x20the\x20user\x20to\x20ensure\x20the\x20value\x20is\n\x20corre\
    ct.\x20See\x20http://cldr.unicode.org/\x20and\n\x20http://www.unicode.or\
    g/cldr/charts/30/supplemental/territory_information.html\n\x20for\x20det\
    ails.\x20Example:\x20\"CH\"\x20for\x20Switzerland.\n\n\r\n\x05\x04\0\x02\
    \x01\x04\x12\x046\x02/\x15\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x036\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x036\t\x14\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x036\x17\x18\n\xd5\x04\n\x04\x04\0\x02\x02\x12\x03D\x02\x1b\
    \x1a\xc7\x04\x20Optional.\x20BCP-47\x20language\x20code\x20of\x20the\x20\
    contents\x20of\x20this\x20address\x20(if\n\x20known).\x20This\x20is\x20o\
    ften\x20the\x20UI\x20language\x20of\x20the\x20input\x20form\x20or\x20is\
    \x20expected\n\x20to\x20match\x20one\x20of\x20the\x20languages\x20used\
    \x20in\x20the\x20address'\x20country/region,\x20or\x20their\n\x20transli\
    terated\x20equivalents.\n\x20This\x20can\x20affect\x20formatting\x20in\
    \x20certain\x20countries,\x20but\x20is\x20not\x20critical\n\x20to\x20the\
    \x20correctness\x20of\x20the\x20data\x20and\x20will\x20never\x20affect\
    \x20any\x20validation\x20or\n\x20other\x20non-formatting\x20related\x20o\
    perations.\n\n\x20If\x20this\x20value\x20is\x20not\x20known,\x20it\x20sh\
    ould\x20be\x20omitted\x20(rather\x20than\x20specifying\x20a\n\x20possibl\
    y\x20incorrect\x20default).\n\n\x20Examples:\x20\"zh-Hant\",\x20\"ja\",\
    \x20\"ja-Latn\",\x20\"en\".\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04D\x026\
    \x19\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03D\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03D\t\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03D\x19\
    \x1a\n\x80\x02\n\x04\x04\0\x02\x03\x12\x03J\x02\x19\x1a\xf2\x01\x20Optio\
    nal.\x20Postal\x20code\x20of\x20the\x20address.\x20Not\x20all\x20countri\
    es\x20use\x20or\x20require\n\x20postal\x20codes\x20to\x20be\x20present,\
    \x20but\x20where\x20they\x20are\x20used,\x20they\x20may\x20trigger\n\x20\
    additional\x20validation\x20with\x20other\x20parts\x20of\x20the\x20addre\
    ss\x20(e.g.\x20state/zip\n\x20validation\x20in\x20the\x20U.S.A.).\n\n\r\
    \n\x05\x04\0\x02\x03\x04\x12\x04J\x02D\x1b\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03J\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03J\t\x14\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03J\x17\x18\n\xf1\x02\n\x04\x04\0\x02\x04\
    \x12\x03Q\x02\x1a\x1a\xe3\x02\x20Optional.\x20Additional,\x20country-spe\
    cific,\x20sorting\x20code.\x20This\x20is\x20not\x20used\n\x20in\x20most\
    \x20regions.\x20Where\x20it\x20is\x20used,\x20the\x20value\x20is\x20eith\
    er\x20a\x20string\x20like\n\x20\"CEDEX\",\x20optionally\x20followed\x20b\
    y\x20a\x20number\x20(e.g.\x20\"CEDEX\x207\"),\x20or\x20just\x20a\x20numb\
    er\n\x20alone,\x20representing\x20the\x20\"sector\x20code\"\x20(Jamaica)\
    ,\x20\"delivery\x20area\x20indicator\"\n\x20(Malawi)\x20or\x20\"post\x20\
    office\x20indicator\"\x20(e.g.\x20C\xc3\xb4te\x20d'Ivoire).\n\n\r\n\x05\
    \x04\0\x02\x04\x04\x12\x04Q\x02J\x19\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03Q\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03Q\t\x15\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03Q\x18\x19\n\xb7\x03\n\x04\x04\0\x02\x05\x12\
    \x03Z\x02!\x1a\xa9\x03\x20Optional.\x20Highest\x20administrative\x20subd\
    ivision\x20which\x20is\x20used\x20for\x20postal\n\x20addresses\x20of\x20\
    a\x20country\x20or\x20region.\n\x20For\x20example,\x20this\x20can\x20be\
    \x20a\x20state,\x20a\x20province,\x20an\x20oblast,\x20or\x20a\x20prefect\
    ure.\n\x20Specifically,\x20for\x20Spain\x20this\x20is\x20the\x20province\
    \x20and\x20not\x20the\x20autonomous\n\x20community\x20(e.g.\x20\"Barcelo\
    na\"\x20and\x20not\x20\"Catalonia\").\n\x20Many\x20countries\x20don't\
    \x20use\x20an\x20administrative\x20area\x20in\x20postal\x20addresses.\
    \x20E.g.\n\x20in\x20Switzerland\x20this\x20should\x20be\x20left\x20unpop\
    ulated.\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x04Z\x02Q\x1a\n\x0c\n\x05\x04\
    \0\x02\x05\x05\x12\x03Z\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03Z\t\
    \x1c\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03Z\x1f\x20\n\x94\x02\n\x04\x04\
    \0\x02\x06\x12\x03`\x02\x16\x1a\x86\x02\x20Optional.\x20Generally\x20ref\
    ers\x20to\x20the\x20city/town\x20portion\x20of\x20the\x20address.\n\x20E\
    xamples:\x20US\x20city,\x20IT\x20comune,\x20UK\x20post\x20town.\n\x20In\
    \x20regions\x20of\x20the\x20world\x20where\x20localities\x20are\x20not\
    \x20well\x20defined\x20or\x20do\x20not\x20fit\n\x20into\x20this\x20struc\
    ture\x20well,\x20leave\x20locality\x20empty\x20and\x20use\x20address_lin\
    es.\n\n\r\n\x05\x04\0\x02\x06\x04\x12\x04`\x02Z!\n\x0c\n\x05\x04\0\x02\
    \x06\x05\x12\x03`\x02\x08\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03`\t\x11\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03`\x14\x15\nr\n\x04\x04\0\x02\x07\x12\
    \x03d\x02\x19\x1ae\x20Optional.\x20Sublocality\x20of\x20the\x20address.\
    \n\x20For\x20example,\x20this\x20can\x20be\x20neighborhoods,\x20boroughs\
    ,\x20districts.\n\n\r\n\x05\x04\0\x02\x07\x04\x12\x04d\x02`\x16\n\x0c\n\
    \x05\x04\0\x02\x07\x05\x12\x03d\x02\x08\n\x0c\n\x05\x04\0\x02\x07\x01\
    \x12\x03d\t\x14\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03d\x17\x18\n\xe0\t\n\
    \x04\x04\0\x02\x08\x12\x03|\x02$\x1a\xd2\t\x20Unstructured\x20address\
    \x20lines\x20describing\x20the\x20lower\x20levels\x20of\x20an\x20address\
    .\n\n\x20Because\x20values\x20in\x20address_lines\x20do\x20not\x20have\
    \x20type\x20information\x20and\x20may\n\x20sometimes\x20contain\x20multi\
    ple\x20values\x20in\x20a\x20single\x20field\x20(e.g.\n\x20\"Austin,\x20T\
    X\"),\x20it\x20is\x20important\x20that\x20the\x20line\x20order\x20is\x20\
    clear.\x20The\x20order\x20of\n\x20address\x20lines\x20should\x20be\x20\"\
    envelope\x20order\"\x20for\x20the\x20country/region\x20of\x20the\n\x20ad\
    dress.\x20In\x20places\x20where\x20this\x20can\x20vary\x20(e.g.\x20Japan\
    ),\x20address_language\x20is\n\x20used\x20to\x20make\x20it\x20explicit\
    \x20(e.g.\x20\"ja\"\x20for\x20large-to-small\x20ordering\x20and\n\x20\"j\
    a-Latn\"\x20or\x20\"en\"\x20for\x20small-to-large).\x20This\x20way,\x20t\
    he\x20most\x20specific\x20line\x20of\n\x20an\x20address\x20can\x20be\x20\
    selected\x20based\x20on\x20the\x20language.\n\n\x20The\x20minimum\x20per\
    mitted\x20structural\x20representation\x20of\x20an\x20address\x20consist\
    s\n\x20of\x20a\x20region_code\x20with\x20all\x20remaining\x20information\
    \x20placed\x20in\x20the\n\x20address_lines.\x20It\x20would\x20be\x20poss\
    ible\x20to\x20format\x20such\x20an\x20address\x20very\n\x20approximately\
    \x20without\x20geocoding,\x20but\x20no\x20semantic\x20reasoning\x20could\
    \x20be\n\x20made\x20about\x20any\x20of\x20the\x20address\x20components\
    \x20until\x20it\x20was\x20at\x20least\n\x20partially\x20resolved.\n\n\
    \x20Creating\x20an\x20address\x20only\x20containing\x20a\x20region_code\
    \x20and\x20address_lines,\x20and\n\x20then\x20geocoding\x20is\x20the\x20\
    recommended\x20way\x20to\x20handle\x20completely\x20unstructured\n\x20ad\
    dresses\x20(as\x20opposed\x20to\x20guessing\x20which\x20parts\x20of\x20t\
    he\x20address\x20should\x20be\n\x20localities\x20or\x20administrative\
    \x20areas).\n\n\x0c\n\x05\x04\0\x02\x08\x04\x12\x03|\x02\n\n\x0c\n\x05\
    \x04\0\x02\x08\x05\x12\x03|\x0b\x11\n\x0c\n\x05\x04\0\x02\x08\x01\x12\
    \x03|\x12\x1f\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03|\"#\n\xbb\x01\n\x04\
    \x04\0\x02\t\x12\x04\x81\x01\x02\"\x1a\xac\x01\x20Optional.\x20The\x20re\
    cipient\x20at\x20the\x20address.\n\x20This\x20field\x20may,\x20under\x20\
    certain\x20circumstances,\x20contain\x20multiline\x20information.\n\x20F\
    or\x20example,\x20it\x20might\x20contain\x20\"care\x20of\"\x20informatio\
    n.\n\n\r\n\x05\x04\0\x02\t\x04\x12\x04\x81\x01\x02\n\n\r\n\x05\x04\0\x02\
    \t\x05\x12\x04\x81\x01\x0b\x11\n\r\n\x05\x04\0\x02\t\x01\x12\x04\x81\x01\
    \x12\x1c\n\r\n\x05\x04\0\x02\t\x03\x12\x04\x81\x01\x1f!\nF\n\x04\x04\0\
    \x02\n\x12\x04\x84\x01\x02\x1b\x1a8\x20Optional.\x20The\x20name\x20of\
    \x20the\x20organization\x20at\x20the\x20address.\n\n\x0f\n\x05\x04\0\x02\
    \n\x04\x12\x06\x84\x01\x02\x81\x01\"\n\r\n\x05\x04\0\x02\n\x05\x12\x04\
    \x84\x01\x02\x08\n\r\n\x05\x04\0\x02\n\x01\x12\x04\x84\x01\t\x15\n\r\n\
    \x05\x04\0\x02\n\x03\x12\x04\x84\x01\x18\x1ab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
