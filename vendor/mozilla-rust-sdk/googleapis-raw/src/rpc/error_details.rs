// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/rpc/error_details.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct RetryInfo {
    // message fields
    pub retry_delay: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RetryInfo {
    fn default() -> &'a RetryInfo {
        <RetryInfo as ::protobuf::Message>::default_instance()
    }
}

impl RetryInfo {
    pub fn new() -> RetryInfo {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration retry_delay = 1;


    pub fn get_retry_delay(&self) -> &::protobuf::well_known_types::Duration {
        self.retry_delay.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_retry_delay(&mut self) {
        self.retry_delay.clear();
    }

    pub fn has_retry_delay(&self) -> bool {
        self.retry_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_retry_delay(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.retry_delay = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_retry_delay(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.retry_delay.is_none() {
            self.retry_delay.set_default();
        }
        self.retry_delay.as_mut().unwrap()
    }

    // Take field
    pub fn take_retry_delay(&mut self) -> ::protobuf::well_known_types::Duration {
        self.retry_delay.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for RetryInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.retry_delay {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.retry_delay)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.retry_delay.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.retry_delay.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RetryInfo {
        RetryInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "retry_delay",
                |m: &RetryInfo| { &m.retry_delay },
                |m: &mut RetryInfo| { &mut m.retry_delay },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RetryInfo>(
                "RetryInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RetryInfo {
        static instance: ::protobuf::rt::LazyV2<RetryInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RetryInfo::new)
    }
}

impl ::protobuf::Clear for RetryInfo {
    fn clear(&mut self) {
        self.retry_delay.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RetryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RetryInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugInfo {
    // message fields
    pub stack_entries: ::protobuf::RepeatedField<::std::string::String>,
    pub detail: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugInfo {
    fn default() -> &'a DebugInfo {
        <DebugInfo as ::protobuf::Message>::default_instance()
    }
}

impl DebugInfo {
    pub fn new() -> DebugInfo {
        ::std::default::Default::default()
    }

    // repeated string stack_entries = 1;


    pub fn get_stack_entries(&self) -> &[::std::string::String] {
        &self.stack_entries
    }
    pub fn clear_stack_entries(&mut self) {
        self.stack_entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_stack_entries(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.stack_entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_stack_entries(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.stack_entries
    }

    // Take field
    pub fn take_stack_entries(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.stack_entries, ::protobuf::RepeatedField::new())
    }

    // string detail = 2;


    pub fn get_detail(&self) -> &str {
        &self.detail
    }
    pub fn clear_detail(&mut self) {
        self.detail.clear();
    }

    // Param is passed by value, moved
    pub fn set_detail(&mut self, v: ::std::string::String) {
        self.detail = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_detail(&mut self) -> &mut ::std::string::String {
        &mut self.detail
    }

    // Take field
    pub fn take_detail(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.detail, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DebugInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.stack_entries)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.detail)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.stack_entries {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if !self.detail.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.detail);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.stack_entries {
            os.write_string(1, &v)?;
        };
        if !self.detail.is_empty() {
            os.write_string(2, &self.detail)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugInfo {
        DebugInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stack_entries",
                |m: &DebugInfo| { &m.stack_entries },
                |m: &mut DebugInfo| { &mut m.stack_entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "detail",
                |m: &DebugInfo| { &m.detail },
                |m: &mut DebugInfo| { &mut m.detail },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugInfo>(
                "DebugInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugInfo {
        static instance: ::protobuf::rt::LazyV2<DebugInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugInfo::new)
    }
}

impl ::protobuf::Clear for DebugInfo {
    fn clear(&mut self) {
        self.stack_entries.clear();
        self.detail.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QuotaFailure {
    // message fields
    pub violations: ::protobuf::RepeatedField<QuotaFailure_Violation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QuotaFailure {
    fn default() -> &'a QuotaFailure {
        <QuotaFailure as ::protobuf::Message>::default_instance()
    }
}

impl QuotaFailure {
    pub fn new() -> QuotaFailure {
        ::std::default::Default::default()
    }

    // repeated .google.rpc.QuotaFailure.Violation violations = 1;


    pub fn get_violations(&self) -> &[QuotaFailure_Violation] {
        &self.violations
    }
    pub fn clear_violations(&mut self) {
        self.violations.clear();
    }

    // Param is passed by value, moved
    pub fn set_violations(&mut self, v: ::protobuf::RepeatedField<QuotaFailure_Violation>) {
        self.violations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_violations(&mut self) -> &mut ::protobuf::RepeatedField<QuotaFailure_Violation> {
        &mut self.violations
    }

    // Take field
    pub fn take_violations(&mut self) -> ::protobuf::RepeatedField<QuotaFailure_Violation> {
        ::std::mem::replace(&mut self.violations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QuotaFailure {
    fn is_initialized(&self) -> bool {
        for v in &self.violations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.violations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.violations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.violations {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QuotaFailure {
        QuotaFailure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<QuotaFailure_Violation>>(
                "violations",
                |m: &QuotaFailure| { &m.violations },
                |m: &mut QuotaFailure| { &mut m.violations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QuotaFailure>(
                "QuotaFailure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QuotaFailure {
        static instance: ::protobuf::rt::LazyV2<QuotaFailure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QuotaFailure::new)
    }
}

impl ::protobuf::Clear for QuotaFailure {
    fn clear(&mut self) {
        self.violations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QuotaFailure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuotaFailure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QuotaFailure_Violation {
    // message fields
    pub subject: ::std::string::String,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QuotaFailure_Violation {
    fn default() -> &'a QuotaFailure_Violation {
        <QuotaFailure_Violation as ::protobuf::Message>::default_instance()
    }
}

impl QuotaFailure_Violation {
    pub fn new() -> QuotaFailure_Violation {
        ::std::default::Default::default()
    }

    // string subject = 1;


    pub fn get_subject(&self) -> &str {
        &self.subject
    }
    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QuotaFailure_Violation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subject);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subject.is_empty() {
            os.write_string(1, &self.subject)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QuotaFailure_Violation {
        QuotaFailure_Violation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subject",
                |m: &QuotaFailure_Violation| { &m.subject },
                |m: &mut QuotaFailure_Violation| { &mut m.subject },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &QuotaFailure_Violation| { &m.description },
                |m: &mut QuotaFailure_Violation| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QuotaFailure_Violation>(
                "QuotaFailure.Violation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QuotaFailure_Violation {
        static instance: ::protobuf::rt::LazyV2<QuotaFailure_Violation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QuotaFailure_Violation::new)
    }
}

impl ::protobuf::Clear for QuotaFailure_Violation {
    fn clear(&mut self) {
        self.subject.clear();
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QuotaFailure_Violation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuotaFailure_Violation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ErrorInfo {
    // message fields
    pub reason: ::std::string::String,
    pub domain: ::std::string::String,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ErrorInfo {
    fn default() -> &'a ErrorInfo {
        <ErrorInfo as ::protobuf::Message>::default_instance()
    }
}

impl ErrorInfo {
    pub fn new() -> ErrorInfo {
        ::std::default::Default::default()
    }

    // string reason = 1;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }

    // string domain = 2;


    pub fn get_domain(&self) -> &str {
        &self.domain
    }
    pub fn clear_domain(&mut self) {
        self.domain.clear();
    }

    // Param is passed by value, moved
    pub fn set_domain(&mut self, v: ::std::string::String) {
        self.domain = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_domain(&mut self) -> &mut ::std::string::String {
        &mut self.domain
    }

    // Take field
    pub fn take_domain(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.domain, ::std::string::String::new())
    }

    // repeated .google.rpc.ErrorInfo.MetadataEntry metadata = 3;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for ErrorInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.domain)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.reason);
        }
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.domain);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.metadata);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.reason.is_empty() {
            os.write_string(1, &self.reason)?;
        }
        if !self.domain.is_empty() {
            os.write_string(2, &self.domain)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.metadata, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ErrorInfo {
        ErrorInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reason",
                |m: &ErrorInfo| { &m.reason },
                |m: &mut ErrorInfo| { &mut m.reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "domain",
                |m: &ErrorInfo| { &m.domain },
                |m: &mut ErrorInfo| { &mut m.domain },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "metadata",
                |m: &ErrorInfo| { &m.metadata },
                |m: &mut ErrorInfo| { &mut m.metadata },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ErrorInfo>(
                "ErrorInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ErrorInfo {
        static instance: ::protobuf::rt::LazyV2<ErrorInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ErrorInfo::new)
    }
}

impl ::protobuf::Clear for ErrorInfo {
    fn clear(&mut self) {
        self.reason.clear();
        self.domain.clear();
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ErrorInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PreconditionFailure {
    // message fields
    pub violations: ::protobuf::RepeatedField<PreconditionFailure_Violation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PreconditionFailure {
    fn default() -> &'a PreconditionFailure {
        <PreconditionFailure as ::protobuf::Message>::default_instance()
    }
}

impl PreconditionFailure {
    pub fn new() -> PreconditionFailure {
        ::std::default::Default::default()
    }

    // repeated .google.rpc.PreconditionFailure.Violation violations = 1;


    pub fn get_violations(&self) -> &[PreconditionFailure_Violation] {
        &self.violations
    }
    pub fn clear_violations(&mut self) {
        self.violations.clear();
    }

    // Param is passed by value, moved
    pub fn set_violations(&mut self, v: ::protobuf::RepeatedField<PreconditionFailure_Violation>) {
        self.violations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_violations(&mut self) -> &mut ::protobuf::RepeatedField<PreconditionFailure_Violation> {
        &mut self.violations
    }

    // Take field
    pub fn take_violations(&mut self) -> ::protobuf::RepeatedField<PreconditionFailure_Violation> {
        ::std::mem::replace(&mut self.violations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PreconditionFailure {
    fn is_initialized(&self) -> bool {
        for v in &self.violations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.violations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.violations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.violations {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PreconditionFailure {
        PreconditionFailure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PreconditionFailure_Violation>>(
                "violations",
                |m: &PreconditionFailure| { &m.violations },
                |m: &mut PreconditionFailure| { &mut m.violations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PreconditionFailure>(
                "PreconditionFailure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PreconditionFailure {
        static instance: ::protobuf::rt::LazyV2<PreconditionFailure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PreconditionFailure::new)
    }
}

impl ::protobuf::Clear for PreconditionFailure {
    fn clear(&mut self) {
        self.violations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PreconditionFailure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PreconditionFailure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PreconditionFailure_Violation {
    // message fields
    pub field_type: ::std::string::String,
    pub subject: ::std::string::String,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PreconditionFailure_Violation {
    fn default() -> &'a PreconditionFailure_Violation {
        <PreconditionFailure_Violation as ::protobuf::Message>::default_instance()
    }
}

impl PreconditionFailure_Violation {
    pub fn new() -> PreconditionFailure_Violation {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string subject = 2;


    pub fn get_subject(&self) -> &str {
        &self.subject
    }
    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PreconditionFailure_Violation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.subject);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.subject.is_empty() {
            os.write_string(2, &self.subject)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PreconditionFailure_Violation {
        PreconditionFailure_Violation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &PreconditionFailure_Violation| { &m.field_type },
                |m: &mut PreconditionFailure_Violation| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subject",
                |m: &PreconditionFailure_Violation| { &m.subject },
                |m: &mut PreconditionFailure_Violation| { &mut m.subject },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &PreconditionFailure_Violation| { &m.description },
                |m: &mut PreconditionFailure_Violation| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PreconditionFailure_Violation>(
                "PreconditionFailure.Violation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PreconditionFailure_Violation {
        static instance: ::protobuf::rt::LazyV2<PreconditionFailure_Violation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PreconditionFailure_Violation::new)
    }
}

impl ::protobuf::Clear for PreconditionFailure_Violation {
    fn clear(&mut self) {
        self.field_type.clear();
        self.subject.clear();
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PreconditionFailure_Violation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PreconditionFailure_Violation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BadRequest {
    // message fields
    pub field_violations: ::protobuf::RepeatedField<BadRequest_FieldViolation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BadRequest {
    fn default() -> &'a BadRequest {
        <BadRequest as ::protobuf::Message>::default_instance()
    }
}

impl BadRequest {
    pub fn new() -> BadRequest {
        ::std::default::Default::default()
    }

    // repeated .google.rpc.BadRequest.FieldViolation field_violations = 1;


    pub fn get_field_violations(&self) -> &[BadRequest_FieldViolation] {
        &self.field_violations
    }
    pub fn clear_field_violations(&mut self) {
        self.field_violations.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_violations(&mut self, v: ::protobuf::RepeatedField<BadRequest_FieldViolation>) {
        self.field_violations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_violations(&mut self) -> &mut ::protobuf::RepeatedField<BadRequest_FieldViolation> {
        &mut self.field_violations
    }

    // Take field
    pub fn take_field_violations(&mut self) -> ::protobuf::RepeatedField<BadRequest_FieldViolation> {
        ::std::mem::replace(&mut self.field_violations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BadRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.field_violations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.field_violations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.field_violations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.field_violations {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BadRequest {
        BadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BadRequest_FieldViolation>>(
                "field_violations",
                |m: &BadRequest| { &m.field_violations },
                |m: &mut BadRequest| { &mut m.field_violations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BadRequest>(
                "BadRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BadRequest {
        static instance: ::protobuf::rt::LazyV2<BadRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BadRequest::new)
    }
}

impl ::protobuf::Clear for BadRequest {
    fn clear(&mut self) {
        self.field_violations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BadRequest_FieldViolation {
    // message fields
    pub field: ::std::string::String,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BadRequest_FieldViolation {
    fn default() -> &'a BadRequest_FieldViolation {
        <BadRequest_FieldViolation as ::protobuf::Message>::default_instance()
    }
}

impl BadRequest_FieldViolation {
    pub fn new() -> BadRequest_FieldViolation {
        ::std::default::Default::default()
    }

    // string field = 1;


    pub fn get_field(&self) -> &str {
        &self.field
    }
    pub fn clear_field(&mut self) {
        self.field.clear();
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: ::std::string::String) {
        self.field = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut ::std::string::String {
        &mut self.field
    }

    // Take field
    pub fn take_field(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BadRequest_FieldViolation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field.is_empty() {
            os.write_string(1, &self.field)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BadRequest_FieldViolation {
        BadRequest_FieldViolation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "field",
                |m: &BadRequest_FieldViolation| { &m.field },
                |m: &mut BadRequest_FieldViolation| { &mut m.field },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &BadRequest_FieldViolation| { &m.description },
                |m: &mut BadRequest_FieldViolation| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BadRequest_FieldViolation>(
                "BadRequest.FieldViolation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BadRequest_FieldViolation {
        static instance: ::protobuf::rt::LazyV2<BadRequest_FieldViolation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BadRequest_FieldViolation::new)
    }
}

impl ::protobuf::Clear for BadRequest_FieldViolation {
    fn clear(&mut self) {
        self.field.clear();
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BadRequest_FieldViolation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BadRequest_FieldViolation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestInfo {
    // message fields
    pub request_id: ::std::string::String,
    pub serving_data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestInfo {
    fn default() -> &'a RequestInfo {
        <RequestInfo as ::protobuf::Message>::default_instance()
    }
}

impl RequestInfo {
    pub fn new() -> RequestInfo {
        ::std::default::Default::default()
    }

    // string request_id = 1;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }

    // string serving_data = 2;


    pub fn get_serving_data(&self) -> &str {
        &self.serving_data
    }
    pub fn clear_serving_data(&mut self) {
        self.serving_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_serving_data(&mut self, v: ::std::string::String) {
        self.serving_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serving_data(&mut self) -> &mut ::std::string::String {
        &mut self.serving_data
    }

    // Take field
    pub fn take_serving_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serving_data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serving_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_id);
        }
        if !self.serving_data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.serving_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.request_id.is_empty() {
            os.write_string(1, &self.request_id)?;
        }
        if !self.serving_data.is_empty() {
            os.write_string(2, &self.serving_data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestInfo {
        RequestInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &RequestInfo| { &m.request_id },
                |m: &mut RequestInfo| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "serving_data",
                |m: &RequestInfo| { &m.serving_data },
                |m: &mut RequestInfo| { &mut m.serving_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestInfo>(
                "RequestInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestInfo {
        static instance: ::protobuf::rt::LazyV2<RequestInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestInfo::new)
    }
}

impl ::protobuf::Clear for RequestInfo {
    fn clear(&mut self) {
        self.request_id.clear();
        self.serving_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResourceInfo {
    // message fields
    pub resource_type: ::std::string::String,
    pub resource_name: ::std::string::String,
    pub owner: ::std::string::String,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourceInfo {
    fn default() -> &'a ResourceInfo {
        <ResourceInfo as ::protobuf::Message>::default_instance()
    }
}

impl ResourceInfo {
    pub fn new() -> ResourceInfo {
        ::std::default::Default::default()
    }

    // string resource_type = 1;


    pub fn get_resource_type(&self) -> &str {
        &self.resource_type
    }
    pub fn clear_resource_type(&mut self) {
        self.resource_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_type(&mut self, v: ::std::string::String) {
        self.resource_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_type(&mut self) -> &mut ::std::string::String {
        &mut self.resource_type
    }

    // Take field
    pub fn take_resource_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_type, ::std::string::String::new())
    }

    // string resource_name = 2;


    pub fn get_resource_name(&self) -> &str {
        &self.resource_name
    }
    pub fn clear_resource_name(&mut self) {
        self.resource_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_name(&mut self, v: ::std::string::String) {
        self.resource_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_name(&mut self) -> &mut ::std::string::String {
        &mut self.resource_name
    }

    // Take field
    pub fn take_resource_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_name, ::std::string::String::new())
    }

    // string owner = 3;


    pub fn get_owner(&self) -> &str {
        &self.owner
    }
    pub fn clear_owner(&mut self) {
        self.owner.clear();
    }

    // Param is passed by value, moved
    pub fn set_owner(&mut self, v: ::std::string::String) {
        self.owner = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_owner(&mut self) -> &mut ::std::string::String {
        &mut self.owner
    }

    // Take field
    pub fn take_owner(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.owner, ::std::string::String::new())
    }

    // string description = 4;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ResourceInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.owner)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource_type);
        }
        if !self.resource_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.resource_name);
        }
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.owner);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.resource_type.is_empty() {
            os.write_string(1, &self.resource_type)?;
        }
        if !self.resource_name.is_empty() {
            os.write_string(2, &self.resource_name)?;
        }
        if !self.owner.is_empty() {
            os.write_string(3, &self.owner)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourceInfo {
        ResourceInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_type",
                |m: &ResourceInfo| { &m.resource_type },
                |m: &mut ResourceInfo| { &mut m.resource_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_name",
                |m: &ResourceInfo| { &m.resource_name },
                |m: &mut ResourceInfo| { &mut m.resource_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "owner",
                |m: &ResourceInfo| { &m.owner },
                |m: &mut ResourceInfo| { &mut m.owner },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &ResourceInfo| { &m.description },
                |m: &mut ResourceInfo| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourceInfo>(
                "ResourceInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResourceInfo {
        static instance: ::protobuf::rt::LazyV2<ResourceInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResourceInfo::new)
    }
}

impl ::protobuf::Clear for ResourceInfo {
    fn clear(&mut self) {
        self.resource_type.clear();
        self.resource_name.clear();
        self.owner.clear();
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Help {
    // message fields
    pub links: ::protobuf::RepeatedField<Help_Link>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Help {
    fn default() -> &'a Help {
        <Help as ::protobuf::Message>::default_instance()
    }
}

impl Help {
    pub fn new() -> Help {
        ::std::default::Default::default()
    }

    // repeated .google.rpc.Help.Link links = 1;


    pub fn get_links(&self) -> &[Help_Link] {
        &self.links
    }
    pub fn clear_links(&mut self) {
        self.links.clear();
    }

    // Param is passed by value, moved
    pub fn set_links(&mut self, v: ::protobuf::RepeatedField<Help_Link>) {
        self.links = v;
    }

    // Mutable pointer to the field.
    pub fn mut_links(&mut self) -> &mut ::protobuf::RepeatedField<Help_Link> {
        &mut self.links
    }

    // Take field
    pub fn take_links(&mut self) -> ::protobuf::RepeatedField<Help_Link> {
        ::std::mem::replace(&mut self.links, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Help {
    fn is_initialized(&self) -> bool {
        for v in &self.links {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.links)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.links {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.links {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Help {
        Help::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Help_Link>>(
                "links",
                |m: &Help| { &m.links },
                |m: &mut Help| { &mut m.links },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Help>(
                "Help",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Help {
        static instance: ::protobuf::rt::LazyV2<Help> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Help::new)
    }
}

impl ::protobuf::Clear for Help {
    fn clear(&mut self) {
        self.links.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Help {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Help {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Help_Link {
    // message fields
    pub description: ::std::string::String,
    pub url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Help_Link {
    fn default() -> &'a Help_Link {
        <Help_Link as ::protobuf::Message>::default_instance()
    }
}

impl Help_Link {
    pub fn new() -> Help_Link {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string url = 2;


    pub fn get_url(&self) -> &str {
        &self.url
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        &mut self.url
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Help_Link {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        if !self.url.is_empty() {
            os.write_string(2, &self.url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Help_Link {
        Help_Link::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Help_Link| { &m.description },
                |m: &mut Help_Link| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &Help_Link| { &m.url },
                |m: &mut Help_Link| { &mut m.url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Help_Link>(
                "Help.Link",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Help_Link {
        static instance: ::protobuf::rt::LazyV2<Help_Link> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Help_Link::new)
    }
}

impl ::protobuf::Clear for Help_Link {
    fn clear(&mut self) {
        self.description.clear();
        self.url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Help_Link {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Help_Link {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalizedMessage {
    // message fields
    pub locale: ::std::string::String,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocalizedMessage {
    fn default() -> &'a LocalizedMessage {
        <LocalizedMessage as ::protobuf::Message>::default_instance()
    }
}

impl LocalizedMessage {
    pub fn new() -> LocalizedMessage {
        ::std::default::Default::default()
    }

    // string locale = 1;


    pub fn get_locale(&self) -> &str {
        &self.locale
    }
    pub fn clear_locale(&mut self) {
        self.locale.clear();
    }

    // Param is passed by value, moved
    pub fn set_locale(&mut self, v: ::std::string::String) {
        self.locale = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locale(&mut self) -> &mut ::std::string::String {
        &mut self.locale
    }

    // Take field
    pub fn take_locale(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.locale, ::std::string::String::new())
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LocalizedMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.locale)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.locale.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.locale);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.locale.is_empty() {
            os.write_string(1, &self.locale)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocalizedMessage {
        LocalizedMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "locale",
                |m: &LocalizedMessage| { &m.locale },
                |m: &mut LocalizedMessage| { &mut m.locale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &LocalizedMessage| { &m.message },
                |m: &mut LocalizedMessage| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LocalizedMessage>(
                "LocalizedMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LocalizedMessage {
        static instance: ::protobuf::rt::LazyV2<LocalizedMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LocalizedMessage::new)
    }
}

impl ::protobuf::Clear for LocalizedMessage {
    fn clear(&mut self) {
        self.locale.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalizedMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalizedMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1egoogle/rpc/error_details.proto\x12\ngoogle.rpc\x1a\x1egoogle/proto\
    buf/duration.proto\"G\n\tRetryInfo\x12:\n\x0bretry_delay\x18\x01\x20\x01\
    (\x0b2\x19.google.protobuf.DurationR\nretryDelay\"H\n\tDebugInfo\x12#\n\
    \rstack_entries\x18\x01\x20\x03(\tR\x0cstackEntries\x12\x16\n\x06detail\
    \x18\x02\x20\x01(\tR\x06detail\"\x9b\x01\n\x0cQuotaFailure\x12B\n\nviola\
    tions\x18\x01\x20\x03(\x0b2\".google.rpc.QuotaFailure.ViolationR\nviolat\
    ions\x1aG\n\tViolation\x12\x18\n\x07subject\x18\x01\x20\x01(\tR\x07subje\
    ct\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\"\xb9\x01\
    \n\tErrorInfo\x12\x16\n\x06reason\x18\x01\x20\x01(\tR\x06reason\x12\x16\
    \n\x06domain\x18\x02\x20\x01(\tR\x06domain\x12?\n\x08metadata\x18\x03\
    \x20\x03(\x0b2#.google.rpc.ErrorInfo.MetadataEntryR\x08metadata\x1a;\n\r\
    MetadataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05v\
    alue\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xbd\x01\n\x13PreconditionF\
    ailure\x12I\n\nviolations\x18\x01\x20\x03(\x0b2).google.rpc.Precondition\
    Failure.ViolationR\nviolations\x1a[\n\tViolation\x12\x12\n\x04type\x18\
    \x01\x20\x01(\tR\x04type\x12\x18\n\x07subject\x18\x02\x20\x01(\tR\x07sub\
    ject\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\"\xa8\
    \x01\n\nBadRequest\x12P\n\x10field_violations\x18\x01\x20\x03(\x0b2%.goo\
    gle.rpc.BadRequest.FieldViolationR\x0ffieldViolations\x1aH\n\x0eFieldVio\
    lation\x12\x14\n\x05field\x18\x01\x20\x01(\tR\x05field\x12\x20\n\x0bdesc\
    ription\x18\x02\x20\x01(\tR\x0bdescription\"O\n\x0bRequestInfo\x12\x1d\n\
    \nrequest_id\x18\x01\x20\x01(\tR\trequestId\x12!\n\x0cserving_data\x18\
    \x02\x20\x01(\tR\x0bservingData\"\x90\x01\n\x0cResourceInfo\x12#\n\rreso\
    urce_type\x18\x01\x20\x01(\tR\x0cresourceType\x12#\n\rresource_name\x18\
    \x02\x20\x01(\tR\x0cresourceName\x12\x14\n\x05owner\x18\x03\x20\x01(\tR\
    \x05owner\x12\x20\n\x0bdescription\x18\x04\x20\x01(\tR\x0bdescription\"o\
    \n\x04Help\x12+\n\x05links\x18\x01\x20\x03(\x0b2\x15.google.rpc.Help.Lin\
    kR\x05links\x1a:\n\x04Link\x12\x20\n\x0bdescription\x18\x01\x20\x01(\tR\
    \x0bdescription\x12\x10\n\x03url\x18\x02\x20\x01(\tR\x03url\"D\n\x10Loca\
    lizedMessage\x12\x16\n\x06locale\x18\x01\x20\x01(\tR\x06locale\x12\x18\n\
    \x07message\x18\x02\x20\x01(\tR\x07messageBl\n\x0ecom.google.rpcB\x11Err\
    orDetailsProtoP\x01Z?google.golang.org/genproto/googleapis/rpc/errdetail\
    s;errdetails\xa2\x02\x03RPCJ\xf2P\n\x07\x12\x05\x0e\0\xf8\x01\x01\n\xbc\
    \x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202020\x20Google\
    \x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\
    \x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\
    \x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\
    \x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20w\
    riting,\x20software\n\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WA\
    RRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\
    \x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\0\x13\n\t\n\x02\x03\0\
    \x12\x03\x12\0(\n\x08\n\x01\x08\x12\x03\x14\0V\n\t\n\x02\x08\x0b\x12\x03\
    \x14\0V\n\x08\n\x01\x08\x12\x03\x15\0\"\n\t\n\x02\x08\n\x12\x03\x15\0\"\
    \n\x08\n\x01\x08\x12\x03\x16\02\n\t\n\x02\x08\x08\x12\x03\x16\02\n\x08\n\
    \x01\x08\x12\x03\x17\0'\n\t\n\x02\x08\x01\x12\x03\x17\0'\n\x08\n\x01\x08\
    \x12\x03\x18\0!\n\t\n\x02\x08$\x12\x03\x18\0!\n\x8b\x05\n\x02\x04\0\x12\
    \x04'\0*\x01\x1a\xfe\x04\x20Describes\x20when\x20the\x20clients\x20can\
    \x20retry\x20a\x20failed\x20request.\x20Clients\x20could\x20ignore\n\x20\
    the\x20recommendation\x20here\x20or\x20retry\x20when\x20this\x20informat\
    ion\x20is\x20missing\x20from\x20error\n\x20responses.\n\n\x20It's\x20alw\
    ays\x20recommended\x20that\x20clients\x20should\x20use\x20exponential\
    \x20backoff\x20when\n\x20retrying.\n\n\x20Clients\x20should\x20wait\x20u\
    ntil\x20`retry_delay`\x20amount\x20of\x20time\x20has\x20passed\x20since\
    \n\x20receiving\x20the\x20error\x20response\x20before\x20retrying.\x20\
    \x20If\x20retrying\x20requests\x20also\n\x20fail,\x20clients\x20should\
    \x20use\x20an\x20exponential\x20backoff\x20scheme\x20to\x20gradually\x20\
    increase\n\x20the\x20delay\x20between\x20retries\x20based\x20on\x20`retr\
    y_delay`,\x20until\x20either\x20a\x20maximum\n\x20number\x20of\x20retrie\
    s\x20have\x20been\x20reached\x20or\x20a\x20maximum\x20retry\x20delay\x20\
    cap\x20has\x20been\n\x20reached.\n\n\n\n\x03\x04\0\x01\x12\x03'\x08\x11\
    \nX\n\x04\x04\0\x02\0\x12\x03)\x02+\x1aK\x20Clients\x20should\x20wait\
    \x20at\x20least\x20this\x20long\x20between\x20retrying\x20the\x20same\
    \x20request.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04)\x02'\x13\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03)\x02\x1a\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03)\
    \x1b&\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03))*\n2\n\x02\x04\x01\x12\x04-\0\
    3\x01\x1a&\x20Describes\x20additional\x20debugging\x20info.\n\n\n\n\x03\
    \x04\x01\x01\x12\x03-\x08\x11\nK\n\x04\x04\x01\x02\0\x12\x03/\x02$\x1a>\
    \x20The\x20stack\x20trace\x20entries\x20indicating\x20where\x20the\x20er\
    ror\x20occurred.\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03/\x02\n\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03/\x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03/\x12\x1f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03/\"#\nG\n\x04\x04\
    \x01\x02\x01\x12\x032\x02\x14\x1a:\x20Additional\x20debugging\x20informa\
    tion\x20provided\x20by\x20the\x20server.\n\n\r\n\x05\x04\x01\x02\x01\x04\
    \x12\x042\x02/$\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x032\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x032\t\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x032\x12\x13\n\xfc\x03\n\x02\x04\x02\x12\x04@\0U\x01\x1a\xef\x03\
    \x20Describes\x20how\x20a\x20quota\x20check\x20failed.\n\n\x20For\x20exa\
    mple\x20if\x20a\x20daily\x20limit\x20was\x20exceeded\x20for\x20the\x20ca\
    lling\x20project,\n\x20a\x20service\x20could\x20respond\x20with\x20a\x20\
    QuotaFailure\x20detail\x20containing\x20the\x20project\n\x20id\x20and\
    \x20the\x20description\x20of\x20the\x20quota\x20limit\x20that\x20was\x20\
    exceeded.\x20\x20If\x20the\n\x20calling\x20project\x20hasn't\x20enabled\
    \x20the\x20service\x20in\x20the\x20developer\x20console,\x20then\n\x20a\
    \x20service\x20could\x20respond\x20with\x20the\x20project\x20id\x20and\
    \x20set\x20`service_disabled`\n\x20to\x20true.\n\n\x20Also\x20see\x20Ret\
    ryInfo\x20and\x20Help\x20types\x20for\x20other\x20details\x20about\x20ha\
    ndling\x20a\n\x20quota\x20failure.\n\n\n\n\x03\x04\x02\x01\x12\x03@\x08\
    \x14\n\x8b\x01\n\x04\x04\x02\x03\0\x12\x04C\x02Q\x03\x1a}\x20A\x20messag\
    e\x20type\x20used\x20to\x20describe\x20a\x20single\x20quota\x20violation\
    .\x20\x20For\x20example,\x20a\n\x20daily\x20quota\x20or\x20a\x20custom\
    \x20quota\x20that\x20was\x20exceeded.\n\n\x0c\n\x05\x04\x02\x03\0\x01\
    \x12\x03C\n\x13\n\x9b\x01\n\x06\x04\x02\x03\0\x02\0\x12\x03G\x04\x17\x1a\
    \x8b\x01\x20The\x20subject\x20on\x20which\x20the\x20quota\x20check\x20fa\
    iled.\n\x20For\x20example,\x20\"clientip:<ip\x20address\x20of\x20client>\
    \"\x20or\x20\"project:<Google\n\x20developer\x20project\x20id>\".\n\n\
    \x0f\n\x07\x04\x02\x03\0\x02\0\x04\x12\x04G\x04C\x15\n\x0e\n\x07\x04\x02\
    \x03\0\x02\0\x05\x12\x03G\x04\n\n\x0e\n\x07\x04\x02\x03\0\x02\0\x01\x12\
    \x03G\x0b\x12\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x03G\x15\x16\n\xcc\
    \x02\n\x06\x04\x02\x03\0\x02\x01\x12\x03P\x04\x1b\x1a\xbc\x02\x20A\x20de\
    scription\x20of\x20how\x20the\x20quota\x20check\x20failed.\x20Clients\
    \x20can\x20use\x20this\n\x20description\x20to\x20find\x20more\x20about\
    \x20the\x20quota\x20configuration\x20in\x20the\x20service's\n\x20public\
    \x20documentation,\x20or\x20find\x20the\x20relevant\x20quota\x20limit\
    \x20to\x20adjust\x20through\n\x20developer\x20console.\n\n\x20For\x20exa\
    mple:\x20\"Service\x20disabled\"\x20or\x20\"Daily\x20Limit\x20for\x20rea\
    d\x20operations\n\x20exceeded\".\n\n\x0f\n\x07\x04\x02\x03\0\x02\x01\x04\
    \x12\x04P\x04G\x17\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x05\x12\x03P\x04\n\
    \n\x0e\n\x07\x04\x02\x03\0\x02\x01\x01\x12\x03P\x0b\x16\n\x0e\n\x07\x04\
    \x02\x03\0\x02\x01\x03\x12\x03P\x19\x1a\n.\n\x04\x04\x02\x02\0\x12\x03T\
    \x02$\x1a!\x20Describes\x20all\x20quota\x20violations.\n\n\x0c\n\x05\x04\
    \x02\x02\0\x04\x12\x03T\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03T\x0b\
    \x14\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03T\x15\x1f\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03T\"#\n\xc6\x05\n\x02\x04\x03\x12\x05o\0\x87\x01\x01\
    \x1a\xb8\x05\x20Describes\x20the\x20cause\x20of\x20the\x20error\x20with\
    \x20structured\x20details.\n\n\x20Example\x20of\x20an\x20error\x20when\
    \x20contacting\x20the\x20\"pubsub.googleapis.com\"\x20API\x20when\x20it\
    \n\x20is\x20not\x20enabled:\n\n\x20\x20\x20\x20\x20{\x20\"reason\":\x20\
    \"API_DISABLED\"\n\x20\x20\x20\x20\x20\x20\x20\"domain\":\x20\"googleapi\
    s.com\"\n\x20\x20\x20\x20\x20\x20\x20\"metadata\":\x20{\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\"resource\":\x20\"projects/123\",\n\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\"service\":\x20\"pubsub.googleapis.com\"\n\x20\
    \x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\n\x20This\x20response\
    \x20indicates\x20that\x20the\x20pubsub.googleapis.com\x20API\x20is\x20no\
    t\x20enabled.\n\n\x20Example\x20of\x20an\x20error\x20that\x20is\x20retur\
    ned\x20when\x20attempting\x20to\x20create\x20a\x20Spanner\n\x20instance\
    \x20in\x20a\x20region\x20that\x20is\x20out\x20of\x20stock:\n\n\x20\x20\
    \x20\x20\x20{\x20\"reason\":\x20\"STOCKOUT\"\n\x20\x20\x20\x20\x20\x20\
    \x20\"domain\":\x20\"spanner.googleapis.com\",\n\x20\x20\x20\x20\x20\x20\
    \x20\"metadata\":\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\"availableR\
    egions\":\x20\"us-central1,us-east2\"\n\x20\x20\x20\x20\x20\x20\x20}\n\
    \x20\x20\x20\x20\x20}\n\n\n\n\x03\x04\x03\x01\x12\x03o\x08\x11\n\xf2\x01\
    \n\x04\x04\x03\x02\0\x12\x03t\x02\x14\x1a\xe4\x01\x20The\x20reason\x20of\
    \x20the\x20error.\x20This\x20is\x20a\x20constant\x20value\x20that\x20ide\
    ntifies\x20the\n\x20proximate\x20cause\x20of\x20the\x20error.\x20Error\
    \x20reasons\x20are\x20unique\x20within\x20a\x20particular\n\x20domain\
    \x20of\x20errors.\x20This\x20should\x20be\x20at\x20most\x2063\x20charact\
    ers\x20and\x20match\n\x20/[A-Z0-9_]+/.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\
    \x04t\x02o\x13\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03t\x02\x08\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03t\t\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03t\x12\x13\n\xa8\x03\n\x04\x04\x03\x02\x01\x12\x03|\x02\x14\x1a\x9a\
    \x03\x20The\x20logical\x20grouping\x20to\x20which\x20the\x20\"reason\"\
    \x20belongs.\x20The\x20error\x20domain\n\x20is\x20typically\x20the\x20re\
    gistered\x20service\x20name\x20of\x20the\x20tool\x20or\x20product\x20tha\
    t\n\x20generates\x20the\x20error.\x20Example:\x20\"pubsub.googleapis.com\
    \".\x20If\x20the\x20error\x20is\n\x20generated\x20by\x20some\x20common\
    \x20infrastructure,\x20the\x20error\x20domain\x20must\x20be\x20a\n\x20gl\
    obally\x20unique\x20value\x20that\x20identifies\x20the\x20infrastructure\
    .\x20For\x20Google\x20API\n\x20infrastructure,\x20the\x20error\x20domain\
    \x20is\x20\"googleapis.com\".\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04|\
    \x02t\x14\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03|\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\x01\x01\x12\x03|\t\x0f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03|\x12\x13\n\xdc\x03\n\x04\x04\x03\x02\x02\x12\x04\x86\x01\x02#\x1a\
    \xcd\x03\x20Additional\x20structured\x20details\x20about\x20this\x20erro\
    r.\n\n\x20Keys\x20should\x20match\x20/[a-zA-Z0-9-_]/\x20and\x20be\x20lim\
    ited\x20to\x2064\x20characters\x20in\n\x20length.\x20When\x20identifying\
    \x20the\x20current\x20value\x20of\x20an\x20exceeded\x20limit,\x20the\x20\
    units\n\x20should\x20be\x20contained\x20in\x20the\x20key,\x20not\x20the\
    \x20value.\x20\x20For\x20example,\x20rather\x20than\n\x20{\"instanceLimi\
    t\":\x20\"100/request\"},\x20should\x20be\x20returned\x20as,\n\x20{\"ins\
    tanceLimitPerRequest\":\x20\"100\"},\x20if\x20the\x20client\x20exceeds\
    \x20the\x20number\x20of\n\x20instances\x20that\x20can\x20be\x20created\
    \x20in\x20a\x20single\x20(batch)\x20request.\n\n\x0e\n\x05\x04\x03\x02\
    \x02\x04\x12\x05\x86\x01\x02|\x14\n\r\n\x05\x04\x03\x02\x02\x06\x12\x04\
    \x86\x01\x02\x15\n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\x86\x01\x16\x1e\n\
    \r\n\x05\x04\x03\x02\x02\x03\x12\x04\x86\x01!\"\n\xea\x01\n\x02\x04\x04\
    \x12\x06\x8e\x01\0\xa4\x01\x01\x1a\xdb\x01\x20Describes\x20what\x20preco\
    nditions\x20have\x20failed.\n\n\x20For\x20example,\x20if\x20an\x20RPC\
    \x20failed\x20because\x20it\x20required\x20the\x20Terms\x20of\x20Service\
    \x20to\x20be\n\x20acknowledged,\x20it\x20could\x20list\x20the\x20terms\
    \x20of\x20service\x20violation\x20in\x20the\n\x20PreconditionFailure\x20\
    message.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\x8e\x01\x08\x1b\nP\n\x04\x04\
    \x04\x03\0\x12\x06\x90\x01\x02\xa0\x01\x03\x1a@\x20A\x20message\x20type\
    \x20used\x20to\x20describe\x20a\x20single\x20precondition\x20failure.\n\
    \n\r\n\x05\x04\x04\x03\0\x01\x12\x04\x90\x01\n\x13\n\xd3\x01\n\x06\x04\
    \x04\x03\0\x02\0\x12\x04\x94\x01\x04\x14\x1a\xc2\x01\x20The\x20type\x20o\
    f\x20PreconditionFailure.\x20We\x20recommend\x20using\x20a\x20service-sp\
    ecific\n\x20enum\x20type\x20to\x20define\x20the\x20supported\x20precondi\
    tion\x20violation\x20subjects.\x20For\n\x20example,\x20\"TOS\"\x20for\
    \x20\"Terms\x20of\x20Service\x20violation\".\n\n\x11\n\x07\x04\x04\x03\0\
    \x02\0\x04\x12\x06\x94\x01\x04\x90\x01\x15\n\x0f\n\x07\x04\x04\x03\0\x02\
    \0\x05\x12\x04\x94\x01\x04\n\n\x0f\n\x07\x04\x04\x03\0\x02\0\x01\x12\x04\
    \x94\x01\x0b\x0f\n\x0f\n\x07\x04\x04\x03\0\x02\0\x03\x12\x04\x94\x01\x12\
    \x13\n\xba\x01\n\x06\x04\x04\x03\0\x02\x01\x12\x04\x99\x01\x04\x17\x1a\
    \xa9\x01\x20The\x20subject,\x20relative\x20to\x20the\x20type,\x20that\
    \x20failed.\n\x20For\x20example,\x20\"google.com/cloud\"\x20relative\x20\
    to\x20the\x20\"TOS\"\x20type\x20would\x20indicate\n\x20which\x20terms\
    \x20of\x20service\x20is\x20being\x20referenced.\n\n\x11\n\x07\x04\x04\
    \x03\0\x02\x01\x04\x12\x06\x99\x01\x04\x94\x01\x14\n\x0f\n\x07\x04\x04\
    \x03\0\x02\x01\x05\x12\x04\x99\x01\x04\n\n\x0f\n\x07\x04\x04\x03\0\x02\
    \x01\x01\x12\x04\x99\x01\x0b\x12\n\x0f\n\x07\x04\x04\x03\0\x02\x01\x03\
    \x12\x04\x99\x01\x15\x16\n\xbb\x01\n\x06\x04\x04\x03\0\x02\x02\x12\x04\
    \x9f\x01\x04\x1b\x1a\xaa\x01\x20A\x20description\x20of\x20how\x20the\x20\
    precondition\x20failed.\x20Developers\x20can\x20use\x20this\n\x20descrip\
    tion\x20to\x20understand\x20how\x20to\x20fix\x20the\x20failure.\n\n\x20F\
    or\x20example:\x20\"Terms\x20of\x20service\x20not\x20accepted\".\n\n\x11\
    \n\x07\x04\x04\x03\0\x02\x02\x04\x12\x06\x9f\x01\x04\x99\x01\x17\n\x0f\n\
    \x07\x04\x04\x03\0\x02\x02\x05\x12\x04\x9f\x01\x04\n\n\x0f\n\x07\x04\x04\
    \x03\0\x02\x02\x01\x12\x04\x9f\x01\x0b\x16\n\x0f\n\x07\x04\x04\x03\0\x02\
    \x02\x03\x12\x04\x9f\x01\x19\x1a\n6\n\x04\x04\x04\x02\0\x12\x04\xa3\x01\
    \x02$\x1a(\x20Describes\x20all\x20precondition\x20violations.\n\n\r\n\
    \x05\x04\x04\x02\0\x04\x12\x04\xa3\x01\x02\n\n\r\n\x05\x04\x04\x02\0\x06\
    \x12\x04\xa3\x01\x0b\x14\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xa3\x01\x15\
    \x1f\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xa3\x01\"#\n{\n\x02\x04\x05\x12\
    \x06\xa8\x01\0\xb6\x01\x01\x1am\x20Describes\x20violations\x20in\x20a\
    \x20client\x20request.\x20This\x20error\x20type\x20focuses\x20on\x20the\
    \n\x20syntactic\x20aspects\x20of\x20the\x20request.\n\n\x0b\n\x03\x04\
    \x05\x01\x12\x04\xa8\x01\x08\x12\nM\n\x04\x04\x05\x03\0\x12\x06\xaa\x01\
    \x02\xb2\x01\x03\x1a=\x20A\x20message\x20type\x20used\x20to\x20describe\
    \x20a\x20single\x20bad\x20request\x20field.\n\n\r\n\x05\x04\x05\x03\0\
    \x01\x12\x04\xaa\x01\n\x18\n\xde\x01\n\x06\x04\x05\x03\0\x02\0\x12\x04\
    \xae\x01\x04\x15\x1a\xcd\x01\x20A\x20path\x20leading\x20to\x20a\x20field\
    \x20in\x20the\x20request\x20body.\x20The\x20value\x20will\x20be\x20a\n\
    \x20sequence\x20of\x20dot-separated\x20identifiers\x20that\x20identify\
    \x20a\x20protocol\x20buffer\n\x20field.\x20E.g.,\x20\"field_violations.f\
    ield\"\x20would\x20identify\x20this\x20field.\n\n\x11\n\x07\x04\x05\x03\
    \0\x02\0\x04\x12\x06\xae\x01\x04\xaa\x01\x1a\n\x0f\n\x07\x04\x05\x03\0\
    \x02\0\x05\x12\x04\xae\x01\x04\n\n\x0f\n\x07\x04\x05\x03\0\x02\0\x01\x12\
    \x04\xae\x01\x0b\x10\n\x0f\n\x07\x04\x05\x03\0\x02\0\x03\x12\x04\xae\x01\
    \x13\x14\nB\n\x06\x04\x05\x03\0\x02\x01\x12\x04\xb1\x01\x04\x1b\x1a2\x20\
    A\x20description\x20of\x20why\x20the\x20request\x20element\x20is\x20bad.\
    \n\n\x11\n\x07\x04\x05\x03\0\x02\x01\x04\x12\x06\xb1\x01\x04\xae\x01\x15\
    \n\x0f\n\x07\x04\x05\x03\0\x02\x01\x05\x12\x04\xb1\x01\x04\n\n\x0f\n\x07\
    \x04\x05\x03\0\x02\x01\x01\x12\x04\xb1\x01\x0b\x16\n\x0f\n\x07\x04\x05\
    \x03\0\x02\x01\x03\x12\x04\xb1\x01\x19\x1a\n=\n\x04\x04\x05\x02\0\x12\
    \x04\xb5\x01\x02/\x1a/\x20Describes\x20all\x20violations\x20in\x20a\x20c\
    lient\x20request.\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04\xb5\x01\x02\n\n\
    \r\n\x05\x04\x05\x02\0\x06\x12\x04\xb5\x01\x0b\x19\n\r\n\x05\x04\x05\x02\
    \0\x01\x12\x04\xb5\x01\x1a*\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xb5\x01-\
    .\n\x84\x01\n\x02\x04\x06\x12\x06\xba\x01\0\xc2\x01\x01\x1av\x20Contains\
    \x20metadata\x20about\x20the\x20request\x20that\x20clients\x20can\x20att\
    ach\x20when\x20filing\x20a\x20bug\n\x20or\x20providing\x20other\x20forms\
    \x20of\x20feedback.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\xba\x01\x08\x13\n\
    \xa8\x01\n\x04\x04\x06\x02\0\x12\x04\xbd\x01\x02\x18\x1a\x99\x01\x20An\
    \x20opaque\x20string\x20that\x20should\x20only\x20be\x20interpreted\x20b\
    y\x20the\x20service\x20generating\n\x20it.\x20For\x20example,\x20it\x20c\
    an\x20be\x20used\x20to\x20identify\x20requests\x20in\x20the\x20service's\
    \x20logs.\n\n\x0f\n\x05\x04\x06\x02\0\x04\x12\x06\xbd\x01\x02\xba\x01\
    \x15\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xbd\x01\x02\x08\n\r\n\x05\x04\
    \x06\x02\0\x01\x12\x04\xbd\x01\t\x13\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\
    \xbd\x01\x16\x17\n\xa2\x01\n\x04\x04\x06\x02\x01\x12\x04\xc1\x01\x02\x1a\
    \x1a\x93\x01\x20Any\x20data\x20that\x20was\x20used\x20to\x20serve\x20thi\
    s\x20request.\x20For\x20example,\x20an\x20encrypted\n\x20stack\x20trace\
    \x20that\x20can\x20be\x20sent\x20back\x20to\x20the\x20service\x20provide\
    r\x20for\x20debugging.\n\n\x0f\n\x05\x04\x06\x02\x01\x04\x12\x06\xc1\x01\
    \x02\xbd\x01\x18\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xc1\x01\x02\x08\n\
    \r\n\x05\x04\x06\x02\x01\x01\x12\x04\xc1\x01\t\x15\n\r\n\x05\x04\x06\x02\
    \x01\x03\x12\x04\xc1\x01\x18\x19\n>\n\x02\x04\x07\x12\x06\xc5\x01\0\xd9\
    \x01\x01\x1a0\x20Describes\x20the\x20resource\x20that\x20is\x20being\x20\
    accessed.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xc5\x01\x08\x14\n\xdb\x01\n\
    \x04\x04\x07\x02\0\x12\x04\xc9\x01\x02\x1b\x1a\xcc\x01\x20A\x20name\x20f\
    or\x20the\x20type\x20of\x20resource\x20being\x20accessed,\x20e.g.\x20\"s\
    ql\x20table\",\n\x20\"cloud\x20storage\x20bucket\",\x20\"file\",\x20\"Go\
    ogle\x20calendar\";\x20or\x20the\x20type\x20URL\n\x20of\x20the\x20resour\
    ce:\x20e.g.\x20\"type.googleapis.com/google.pubsub.v1.Topic\".\n\n\x0f\n\
    \x05\x04\x07\x02\0\x04\x12\x06\xc9\x01\x02\xc5\x01\x16\n\r\n\x05\x04\x07\
    \x02\0\x05\x12\x04\xc9\x01\x02\x08\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\
    \xc9\x01\t\x16\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xc9\x01\x19\x1a\n\xf6\
    \x01\n\x04\x04\x07\x02\x01\x12\x04\xce\x01\x02\x1b\x1a\xe7\x01\x20The\
    \x20name\x20of\x20the\x20resource\x20being\x20accessed.\x20\x20For\x20ex\
    ample,\x20a\x20shared\x20calendar\n\x20name:\x20\"example.com_4fghdhgsrg\
    h@group.calendar.google.com\",\x20if\x20the\x20current\n\x20error\x20is\
    \x20[google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIE\
    D].\n\n\x0f\n\x05\x04\x07\x02\x01\x04\x12\x06\xce\x01\x02\xc9\x01\x1b\n\
    \r\n\x05\x04\x07\x02\x01\x05\x12\x04\xce\x01\x02\x08\n\r\n\x05\x04\x07\
    \x02\x01\x01\x12\x04\xce\x01\t\x16\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\
    \xce\x01\x19\x1a\n\x85\x01\n\x04\x04\x07\x02\x02\x12\x04\xd3\x01\x02\x13\
    \x1aw\x20The\x20owner\x20of\x20the\x20resource\x20(optional).\n\x20For\
    \x20example,\x20\"user:<owner\x20email>\"\x20or\x20\"project:<Google\x20\
    developer\x20project\n\x20id>\".\n\n\x0f\n\x05\x04\x07\x02\x02\x04\x12\
    \x06\xd3\x01\x02\xce\x01\x1b\n\r\n\x05\x04\x07\x02\x02\x05\x12\x04\xd3\
    \x01\x02\x08\n\r\n\x05\x04\x07\x02\x02\x01\x12\x04\xd3\x01\t\x0e\n\r\n\
    \x05\x04\x07\x02\x02\x03\x12\x04\xd3\x01\x11\x12\n\xc0\x01\n\x04\x04\x07\
    \x02\x03\x12\x04\xd8\x01\x02\x19\x1a\xb1\x01\x20Describes\x20what\x20err\
    or\x20is\x20encountered\x20when\x20accessing\x20this\x20resource.\n\x20F\
    or\x20example,\x20updating\x20a\x20cloud\x20project\x20may\x20require\
    \x20the\x20`writer`\x20permission\n\x20on\x20the\x20developer\x20console\
    \x20project.\n\n\x0f\n\x05\x04\x07\x02\x03\x04\x12\x06\xd8\x01\x02\xd3\
    \x01\x13\n\r\n\x05\x04\x07\x02\x03\x05\x12\x04\xd8\x01\x02\x08\n\r\n\x05\
    \x04\x07\x02\x03\x01\x12\x04\xd8\x01\t\x14\n\r\n\x05\x04\x07\x02\x03\x03\
    \x12\x04\xd8\x01\x17\x18\n\xba\x02\n\x02\x04\x08\x12\x06\xe0\x01\0\xec\
    \x01\x01\x1a\xab\x02\x20Provides\x20links\x20to\x20documentation\x20or\
    \x20for\x20performing\x20an\x20out\x20of\x20band\x20action.\n\n\x20For\
    \x20example,\x20if\x20a\x20quota\x20check\x20failed\x20with\x20an\x20err\
    or\x20indicating\x20the\x20calling\n\x20project\x20hasn't\x20enabled\x20\
    the\x20accessed\x20service,\x20this\x20can\x20contain\x20a\x20URL\x20poi\
    nting\n\x20directly\x20to\x20the\x20right\x20place\x20in\x20the\x20devel\
    oper\x20console\x20to\x20flip\x20the\x20bit.\n\n\x0b\n\x03\x04\x08\x01\
    \x12\x04\xe0\x01\x08\x0c\n'\n\x04\x04\x08\x03\0\x12\x06\xe2\x01\x02\xe8\
    \x01\x03\x1a\x17\x20Describes\x20a\x20URL\x20link.\n\n\r\n\x05\x04\x08\
    \x03\0\x01\x12\x04\xe2\x01\n\x0e\n1\n\x06\x04\x08\x03\0\x02\0\x12\x04\
    \xe4\x01\x04\x1b\x1a!\x20Describes\x20what\x20the\x20link\x20offers.\n\n\
    \x11\n\x07\x04\x08\x03\0\x02\0\x04\x12\x06\xe4\x01\x04\xe2\x01\x10\n\x0f\
    \n\x07\x04\x08\x03\0\x02\0\x05\x12\x04\xe4\x01\x04\n\n\x0f\n\x07\x04\x08\
    \x03\0\x02\0\x01\x12\x04\xe4\x01\x0b\x16\n\x0f\n\x07\x04\x08\x03\0\x02\0\
    \x03\x12\x04\xe4\x01\x19\x1a\n&\n\x06\x04\x08\x03\0\x02\x01\x12\x04\xe7\
    \x01\x04\x13\x1a\x16\x20The\x20URL\x20of\x20the\x20link.\n\n\x11\n\x07\
    \x04\x08\x03\0\x02\x01\x04\x12\x06\xe7\x01\x04\xe4\x01\x1b\n\x0f\n\x07\
    \x04\x08\x03\0\x02\x01\x05\x12\x04\xe7\x01\x04\n\n\x0f\n\x07\x04\x08\x03\
    \0\x02\x01\x01\x12\x04\xe7\x01\x0b\x0e\n\x0f\n\x07\x04\x08\x03\0\x02\x01\
    \x03\x12\x04\xe7\x01\x11\x12\nX\n\x04\x04\x08\x02\0\x12\x04\xeb\x01\x02\
    \x1a\x1aJ\x20URL(s)\x20pointing\x20to\x20additional\x20information\x20on\
    \x20handling\x20the\x20current\x20error.\n\n\r\n\x05\x04\x08\x02\0\x04\
    \x12\x04\xeb\x01\x02\n\n\r\n\x05\x04\x08\x02\0\x06\x12\x04\xeb\x01\x0b\
    \x0f\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xeb\x01\x10\x15\n\r\n\x05\x04\
    \x08\x02\0\x03\x12\x04\xeb\x01\x18\x19\n}\n\x02\x04\t\x12\x06\xf0\x01\0\
    \xf8\x01\x01\x1ao\x20Provides\x20a\x20localized\x20error\x20message\x20t\
    hat\x20is\x20safe\x20to\x20return\x20to\x20the\x20user\n\x20which\x20can\
    \x20be\x20attached\x20to\x20an\x20RPC\x20error.\n\n\x0b\n\x03\x04\t\x01\
    \x12\x04\xf0\x01\x08\x18\n\x9e\x01\n\x04\x04\t\x02\0\x12\x04\xf4\x01\x02\
    \x14\x1a\x8f\x01\x20The\x20locale\x20used\x20following\x20the\x20specifi\
    cation\x20defined\x20at\n\x20http://www.rfc-editor.org/rfc/bcp/bcp47.txt\
    .\n\x20Examples\x20are:\x20\"en-US\",\x20\"fr-CH\",\x20\"es-MX\"\n\n\x0f\
    \n\x05\x04\t\x02\0\x04\x12\x06\xf4\x01\x02\xf0\x01\x1a\n\r\n\x05\x04\t\
    \x02\0\x05\x12\x04\xf4\x01\x02\x08\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xf4\
    \x01\t\x0f\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xf4\x01\x12\x13\n@\n\x04\
    \x04\t\x02\x01\x12\x04\xf7\x01\x02\x15\x1a2\x20The\x20localized\x20error\
    \x20message\x20in\x20the\x20above\x20locale.\n\n\x0f\n\x05\x04\t\x02\x01\
    \x04\x12\x06\xf7\x01\x02\xf4\x01\x14\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\
    \xf7\x01\x02\x08\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xf7\x01\t\x10\n\r\n\
    \x05\x04\t\x02\x01\x03\x12\x04\xf7\x01\x13\x14b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
